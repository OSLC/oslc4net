//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.5
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.5 ../Grammars/OslcPrefix.g 2013-06-26 11:32:38

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.
#pragma warning disable 3019


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;


using Antlr.Runtime.Tree;
using RewriteRuleITokenStream = Antlr.Runtime.Tree.RewriteRuleTokenStream;

namespace  OSLC4Net.Core.Query.Impl 
{
/******************************************************************************
 * Copyright (c) 2013 IBM Corporation.
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * and Eclipse Distribution License v. 1.0 which accompanies this distribution. 
 *
 * The Eclipse Public License is available at http://www.eclipse.org/legal/epl-v10.html
 * and the Eclipse Distribution License is available at 
 * http://www.eclipse.org/org/documents/edl-v10.php.
 *
 * Contributors: 
 *
 *    Steve Pitchke - initial API and implementation
 *******************************************************************************/
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.5")]
[System.CLSCompliant(false)]
public partial class OslcPrefixParser : Antlr.Runtime.Parser
{
	internal static readonly string[] tokenNames = new string[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "CLOSE_CURLY_BRACE", "COMMA", "DIGIT", "DOT", "EOL", "GREATER", "IRI_REF", "LESS", "MINUS", "OPEN_CURLY_BRACE", "PN_CHARS", "PN_CHARS_BASE", "PN_CHARS_U", "PN_PREFIX", "PREFIX", "PREFIX_LIST", "WS", "'='"
	};
	public const int EOF=-1;
	public const int T__21=21;
	public const int CLOSE_CURLY_BRACE=4;
	public const int COMMA=5;
	public const int DIGIT=6;
	public const int DOT=7;
	public const int EOL=8;
	public const int GREATER=9;
	public const int IRI_REF=10;
	public const int LESS=11;
	public const int MINUS=12;
	public const int OPEN_CURLY_BRACE=13;
	public const int PN_CHARS=14;
	public const int PN_CHARS_BASE=15;
	public const int PN_CHARS_U=16;
	public const int PN_PREFIX=17;
	public const int PREFIX=18;
	public const int PREFIX_LIST=19;
	public const int WS=20;

	public OslcPrefixParser(ITokenStream input)
		: this(input, new RecognizerSharedState())
	{
	}
	public OslcPrefixParser(ITokenStream input, RecognizerSharedState state)
		: base(input, state)
	{
		ITreeAdaptor treeAdaptor = default(ITreeAdaptor);
		CreateTreeAdaptor(ref treeAdaptor);
		TreeAdaptor = treeAdaptor ?? new CommonTreeAdaptor();
		OnCreated();
	}
	// Implement this function in your helper file to use a custom tree adaptor
	partial void CreateTreeAdaptor(ref ITreeAdaptor adaptor);

	private ITreeAdaptor adaptor;

	public ITreeAdaptor TreeAdaptor
	{
		get
		{
			return adaptor;
		}

		set
		{
			this.adaptor = value;
		}
	}

	public override string[] TokenNames { get { return OslcPrefixParser.tokenNames; } }
	public override string GrammarFileName { get { return "../Grammars/OslcPrefix.g"; } }


	    public OslcPrefixParser(string prefixes) :
			this(new CommonTokenStream(new OslcPrefixLexer(new ANTLRStringStream(prefixes))))
	    {
	    }
		
		public object Result
		{
			get { return oslc_prefixes().Tree; }
		}       


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	#region Rules
	partial void EnterRule_oslc_prefixes();
	partial void LeaveRule_oslc_prefixes();
	// $ANTLR start "oslc_prefixes"
	// ../Grammars/OslcPrefix.g:43:1: oslc_prefixes : prefix_binding ( ',' prefix_binding )* -> ^( 'prefix_list' prefix_binding ( prefix_binding )* ) ;
	[GrammarRule("oslc_prefixes")]
	private AstParserRuleReturnScope<object, IToken> oslc_prefixes()
	{
		EnterRule_oslc_prefixes();
		EnterRule("oslc_prefixes", 1);
		TraceIn("oslc_prefixes", 1);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken char_literal2 = default(IToken);
		AstParserRuleReturnScope<object, IToken> prefix_binding1 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> prefix_binding3 = default(AstParserRuleReturnScope<object, IToken>);

		object char_literal2_tree = default(object);
		RewriteRuleITokenStream stream_COMMA=new RewriteRuleITokenStream(adaptor,"token COMMA");
		RewriteRuleSubtreeStream stream_prefix_binding=new RewriteRuleSubtreeStream(adaptor,"rule prefix_binding");
		try { DebugEnterRule(GrammarFileName, "oslc_prefixes");
		DebugLocation(43, 1);
		try
		{
			// ../Grammars/OslcPrefix.g:43:18: ( prefix_binding ( ',' prefix_binding )* -> ^( 'prefix_list' prefix_binding ( prefix_binding )* ) )
			DebugEnterAlt(1);
			// ../Grammars/OslcPrefix.g:43:20: prefix_binding ( ',' prefix_binding )*
			{
			DebugLocation(43, 20);
			PushFollow(Follow._prefix_binding_in_oslc_prefixes69);
			prefix_binding1=prefix_binding();
			PopFollow();

			stream_prefix_binding.Add(prefix_binding1.Tree);
			DebugLocation(43, 35);
			// ../Grammars/OslcPrefix.g:43:35: ( ',' prefix_binding )*
			try { DebugEnterSubRule(1);
			while (true)
			{
				int alt1=2;
				try { DebugEnterDecision(1, false);
				int LA1_1 = input.LA(1);

				if ((LA1_1==COMMA))
				{
					alt1 = 1;
				}


				} finally { DebugExitDecision(1); }
				switch ( alt1 )
				{
				case 1:
					DebugEnterAlt(1);
					// ../Grammars/OslcPrefix.g:43:37: ',' prefix_binding
					{
					DebugLocation(43, 37);
					char_literal2=(IToken)Match(input,COMMA,Follow._COMMA_in_oslc_prefixes73);  
					stream_COMMA.Add(char_literal2);

					DebugLocation(43, 41);
					PushFollow(Follow._prefix_binding_in_oslc_prefixes75);
					prefix_binding3=prefix_binding();
					PopFollow();

					stream_prefix_binding.Add(prefix_binding3.Tree);

					}
					break;

				default:
					goto loop1;
				}
			}

			loop1:
				;

			} finally { DebugExitSubRule(1); }



			{
			// AST REWRITE
			// elements: prefix_binding, PREFIX_LIST, prefix_binding
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 43:59: -> ^( 'prefix_list' prefix_binding ( prefix_binding )* )
			{
				DebugLocation(43, 62);
				// ../Grammars/OslcPrefix.g:43:62: ^( 'prefix_list' prefix_binding ( prefix_binding )* )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(43, 65);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(PREFIX_LIST, "PREFIX_LIST"), root_1);

				DebugLocation(43, 79);
				adaptor.AddChild(root_1, stream_prefix_binding.NextTree());
				DebugLocation(43, 94);
				// ../Grammars/OslcPrefix.g:43:94: ( prefix_binding )*
				while ( stream_prefix_binding.HasNext )
				{
					DebugLocation(43, 95);
					adaptor.AddChild(root_1, stream_prefix_binding.NextTree());

				}
				stream_prefix_binding.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("oslc_prefixes", 1);
			LeaveRule("oslc_prefixes", 1);
			LeaveRule_oslc_prefixes();
		}
		DebugLocation(44, 1);
		} finally { DebugExitRule(GrammarFileName, "oslc_prefixes"); }
		return retval;

	}
	// $ANTLR end "oslc_prefixes"

	partial void EnterRule_prefix_binding();
	partial void LeaveRule_prefix_binding();
	// $ANTLR start "prefix_binding"
	// ../Grammars/OslcPrefix.g:46:1: prefix_binding : PN_PREFIX '=' IRI_REF -> ^( 'prefix' PN_PREFIX IRI_REF ) ;
	[GrammarRule("prefix_binding")]
	private AstParserRuleReturnScope<object, IToken> prefix_binding()
	{
		EnterRule_prefix_binding();
		EnterRule("prefix_binding", 2);
		TraceIn("prefix_binding", 2);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken PN_PREFIX4 = default(IToken);
		IToken char_literal5 = default(IToken);
		IToken IRI_REF6 = default(IToken);

		object PN_PREFIX4_tree = default(object);
		object char_literal5_tree = default(object);
		object IRI_REF6_tree = default(object);
		RewriteRuleITokenStream stream_PN_PREFIX=new RewriteRuleITokenStream(adaptor,"token PN_PREFIX");
		RewriteRuleITokenStream stream_IRI_REF=new RewriteRuleITokenStream(adaptor,"token IRI_REF");
		RewriteRuleITokenStream stream_21=new RewriteRuleITokenStream(adaptor,"token 21");
		try { DebugEnterRule(GrammarFileName, "prefix_binding");
		DebugLocation(46, 4);
		try
		{
			// ../Grammars/OslcPrefix.g:46:16: ( PN_PREFIX '=' IRI_REF -> ^( 'prefix' PN_PREFIX IRI_REF ) )
			DebugEnterAlt(1);
			// ../Grammars/OslcPrefix.g:46:18: PN_PREFIX '=' IRI_REF
			{
			DebugLocation(46, 18);
			PN_PREFIX4=(IToken)Match(input,PN_PREFIX,Follow._PN_PREFIX_in_prefix_binding105);  
			stream_PN_PREFIX.Add(PN_PREFIX4);

			DebugLocation(46, 28);
			char_literal5=(IToken)Match(input,21,Follow._21_in_prefix_binding107);  
			stream_21.Add(char_literal5);

			DebugLocation(46, 32);
			IRI_REF6=(IToken)Match(input,IRI_REF,Follow._IRI_REF_in_prefix_binding109);  
			stream_IRI_REF.Add(IRI_REF6);



			{
			// AST REWRITE
			// elements: IRI_REF, PREFIX, PN_PREFIX
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 46:40: -> ^( 'prefix' PN_PREFIX IRI_REF )
			{
				DebugLocation(46, 43);
				// ../Grammars/OslcPrefix.g:46:43: ^( 'prefix' PN_PREFIX IRI_REF )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(46, 46);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(PREFIX, "PREFIX"), root_1);

				DebugLocation(46, 55);
				adaptor.AddChild(root_1, stream_PN_PREFIX.NextNode());
				DebugLocation(46, 65);
				adaptor.AddChild(root_1, stream_IRI_REF.NextNode());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("prefix_binding", 2);
			LeaveRule("prefix_binding", 2);
			LeaveRule_prefix_binding();
		}
		DebugLocation(47, 4);
		} finally { DebugExitRule(GrammarFileName, "prefix_binding"); }
		return retval;

	}
	// $ANTLR end "prefix_binding"
	#endregion Rules


	#region Follow sets
	private static class Follow
	{
		public static readonly BitSet _prefix_binding_in_oslc_prefixes69 = new BitSet(new ulong[]{0x22UL});
		public static readonly BitSet _COMMA_in_oslc_prefixes73 = new BitSet(new ulong[]{0x20000UL});
		public static readonly BitSet _prefix_binding_in_oslc_prefixes75 = new BitSet(new ulong[]{0x22UL});
		public static readonly BitSet _PN_PREFIX_in_prefix_binding105 = new BitSet(new ulong[]{0x200000UL});
		public static readonly BitSet _21_in_prefix_binding107 = new BitSet(new ulong[]{0x400UL});
		public static readonly BitSet _IRI_REF_in_prefix_binding109 = new BitSet(new ulong[]{0x2UL});
	}
	#endregion Follow sets
}

} // namespace  OSLC4Net.Core.Query.Impl 
