//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.5
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.5 ../Grammars/OslcSearchTerms.g 2013-06-26 12:30:34

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.
#pragma warning disable 3019


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.5")]
[System.CLSCompliant(false)]
public partial class OslcSearchTermsLexer : Antlr.Runtime.Lexer
{
	public const int EOF=-1;
	public const int COMMA=4;
	public const int ECHAR=5;
	public const int EOL=6;
	public const int STRING_LIST=7;
	public const int STRING_LITERAL=8;
	public const int WS=9;

    // delegates
    // delegators

	public OslcSearchTermsLexer()
	{
		OnCreated();
	}

	public OslcSearchTermsLexer(ICharStream input )
		: this(input, new RecognizerSharedState())
	{
	}

	public OslcSearchTermsLexer(ICharStream input, RecognizerSharedState state)
		: base(input, state)
	{

		OnCreated();
	}
	public override string GrammarFileName { get { return "../Grammars/OslcSearchTerms.g"; } }


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	partial void EnterRule_STRING_LIST();
	partial void LeaveRule_STRING_LIST();

	// $ANTLR start "STRING_LIST"
	[GrammarRule("STRING_LIST")]
	private void mSTRING_LIST()
	{
		EnterRule_STRING_LIST();
		EnterRule("STRING_LIST", 1);
		TraceIn("STRING_LIST", 1);
		try
		{
			int _type = STRING_LIST;
			int _channel = DefaultTokenChannel;
			// ../Grammars/OslcSearchTerms.g:7:13: ( 'string_list' )
			DebugEnterAlt(1);
			// ../Grammars/OslcSearchTerms.g:7:15: 'string_list'
			{
			DebugLocation(7, 15);
			Match("string_list"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("STRING_LIST", 1);
			LeaveRule("STRING_LIST", 1);
			LeaveRule_STRING_LIST();
		}
	}
	// $ANTLR end "STRING_LIST"

	partial void EnterRule_WS();
	partial void LeaveRule_WS();

	// $ANTLR start "WS"
	[GrammarRule("WS")]
	private void mWS()
	{
		EnterRule_WS();
		EnterRule("WS", 2);
		TraceIn("WS", 2);
		try
		{
			int _type = WS;
			int _channel = DefaultTokenChannel;
			// ../Grammars/OslcSearchTerms.g:51:5: ( ( ' ' | '\\t' | EOL )+ )
			DebugEnterAlt(1);
			// ../Grammars/OslcSearchTerms.g:51:7: ( ' ' | '\\t' | EOL )+
			{
			DebugLocation(51, 7);
			// ../Grammars/OslcSearchTerms.g:51:7: ( ' ' | '\\t' | EOL )+
			int cnt1=0;
			try { DebugEnterSubRule(1);
			while (true)
			{
				int alt1=2;
				try { DebugEnterDecision(1, false);
				int LA1_1 = input.LA(1);

				if (((LA1_1>='\t' && LA1_1<='\n')||LA1_1=='\r'||LA1_1==' '))
				{
					alt1 = 1;
				}


				} finally { DebugExitDecision(1); }
				switch (alt1)
				{
				case 1:
					DebugEnterAlt(1);
					// ../Grammars/OslcSearchTerms.g:
					{
					DebugLocation(51, 7);
					input.Consume();


					}
					break;

				default:
					if (cnt1 >= 1)
						goto loop1;

					EarlyExitException eee1 = new EarlyExitException( 1, input );
					DebugRecognitionException(eee1);
					throw eee1;
				}
				cnt1++;
			}
			loop1:
				;

			} finally { DebugExitSubRule(1); }

			DebugLocation(51, 25);
			 _channel=Hidden; 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("WS", 2);
			LeaveRule("WS", 2);
			LeaveRule_WS();
		}
	}
	// $ANTLR end "WS"

	partial void EnterRule_EOL();
	partial void LeaveRule_EOL();

	// $ANTLR start "EOL"
	[GrammarRule("EOL")]
	private void mEOL()
	{
		EnterRule_EOL();
		EnterRule("EOL", 3);
		TraceIn("EOL", 3);
		try
		{
			// ../Grammars/OslcSearchTerms.g:57:5: ( '\\n' | '\\r' )
			DebugEnterAlt(1);
			// ../Grammars/OslcSearchTerms.g:
			{
			DebugLocation(57, 5);
			if (input.LA(1)=='\n'||input.LA(1)=='\r')
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}


			}

		}
		finally
		{
			TraceOut("EOL", 3);
			LeaveRule("EOL", 3);
			LeaveRule_EOL();
		}
	}
	// $ANTLR end "EOL"

	partial void EnterRule_STRING_LITERAL();
	partial void LeaveRule_STRING_LITERAL();

	// $ANTLR start "STRING_LITERAL"
	[GrammarRule("STRING_LITERAL")]
	private void mSTRING_LITERAL()
	{
		EnterRule_STRING_LITERAL();
		EnterRule("STRING_LITERAL", 4);
		TraceIn("STRING_LITERAL", 4);
		try
		{
			int _type = STRING_LITERAL;
			int _channel = DefaultTokenChannel;
			// ../Grammars/OslcSearchTerms.g:60:5: ( '\"' ( options {greedy=false; } :~ ( '\\u0022' | '\\u005C' | '\\u000A' | '\\u000D' ) | ECHAR )* '\"' )
			DebugEnterAlt(1);
			// ../Grammars/OslcSearchTerms.g:60:7: '\"' ( options {greedy=false; } :~ ( '\\u0022' | '\\u005C' | '\\u000A' | '\\u000D' ) | ECHAR )* '\"'
			{
			DebugLocation(60, 7);
			Match('\"'); 
			DebugLocation(60, 12);
			// ../Grammars/OslcSearchTerms.g:60:12: ( options {greedy=false; } :~ ( '\\u0022' | '\\u005C' | '\\u000A' | '\\u000D' ) | ECHAR )*
			try { DebugEnterSubRule(2);
			while (true)
			{
				int alt2=3;
				try { DebugEnterDecision(2, false);
				int LA2_1 = input.LA(1);

				if (((LA2_1>='\u0000' && LA2_1<='\t')||(LA2_1>='\u000B' && LA2_1<='\f')||(LA2_1>='\u000E' && LA2_1<='!')||(LA2_1>='#' && LA2_1<='[')||(LA2_1>=']' && LA2_1<='\uFFFF')))
				{
					alt2 = 1;
				}
				else if ((LA2_1=='\\'))
				{
					alt2 = 2;
				}
				else if ((LA2_1=='\"'))
				{
					alt2 = 3;
				}


				} finally { DebugExitDecision(2); }
				switch ( alt2 )
				{
				case 1:
					DebugEnterAlt(1);
					// ../Grammars/OslcSearchTerms.g:60:40: ~ ( '\\u0022' | '\\u005C' | '\\u000A' | '\\u000D' )
					{
					DebugLocation(60, 40);
					input.Consume();


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// ../Grammars/OslcSearchTerms.g:60:87: ECHAR
					{
					DebugLocation(60, 87);
					mECHAR(); 

					}
					break;

				default:
					goto loop2;
				}
			}

			loop2:
				;

			} finally { DebugExitSubRule(2); }

			DebugLocation(60, 96);
			Match('\"'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("STRING_LITERAL", 4);
			LeaveRule("STRING_LITERAL", 4);
			LeaveRule_STRING_LITERAL();
		}
	}
	// $ANTLR end "STRING_LITERAL"

	partial void EnterRule_ECHAR();
	partial void LeaveRule_ECHAR();

	// $ANTLR start "ECHAR"
	[GrammarRule("ECHAR")]
	private void mECHAR()
	{
		EnterRule_ECHAR();
		EnterRule("ECHAR", 5);
		TraceIn("ECHAR", 5);
		try
		{
			// ../Grammars/OslcSearchTerms.g:66:5: ( '\\\\' ( 't' | 'b' | 'n' | 'r' | 'f' | '\\\\' | '\"' | '\\'' ) )
			DebugEnterAlt(1);
			// ../Grammars/OslcSearchTerms.g:66:7: '\\\\' ( 't' | 'b' | 'n' | 'r' | 'f' | '\\\\' | '\"' | '\\'' )
			{
			DebugLocation(66, 7);
			Match('\\'); 
			DebugLocation(66, 12);
			if (input.LA(1)=='\"'||input.LA(1)=='\''||input.LA(1)=='\\'||input.LA(1)=='b'||input.LA(1)=='f'||input.LA(1)=='n'||input.LA(1)=='r'||input.LA(1)=='t')
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}


			}

		}
		finally
		{
			TraceOut("ECHAR", 5);
			LeaveRule("ECHAR", 5);
			LeaveRule_ECHAR();
		}
	}
	// $ANTLR end "ECHAR"

	partial void EnterRule_COMMA();
	partial void LeaveRule_COMMA();

	// $ANTLR start "COMMA"
	[GrammarRule("COMMA")]
	private void mCOMMA()
	{
		EnterRule_COMMA();
		EnterRule("COMMA", 6);
		TraceIn("COMMA", 6);
		try
		{
			int _type = COMMA;
			int _channel = DefaultTokenChannel;
			// ../Grammars/OslcSearchTerms.g:69:5: ( ',' )
			DebugEnterAlt(1);
			// ../Grammars/OslcSearchTerms.g:69:7: ','
			{
			DebugLocation(69, 7);
			Match(','); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("COMMA", 6);
			LeaveRule("COMMA", 6);
			LeaveRule_COMMA();
		}
	}
	// $ANTLR end "COMMA"

	public override void mTokens()
	{
		// ../Grammars/OslcSearchTerms.g:1:8: ( STRING_LIST | WS | STRING_LITERAL | COMMA )
		int alt3=4;
		try { DebugEnterDecision(3, false);
		switch (input.LA(1))
		{
		case 's':
			{
			alt3 = 1;
			}
			break;
		case '\t':
		case '\n':
		case '\r':
		case ' ':
			{
			alt3 = 2;
			}
			break;
		case '\"':
			{
			alt3 = 3;
			}
			break;
		case ',':
			{
			alt3 = 4;
			}
			break;
		default:
			{
				NoViableAltException nvae = new NoViableAltException("", 3, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
		}

		} finally { DebugExitDecision(3); }
		switch (alt3)
		{
		case 1:
			DebugEnterAlt(1);
			// ../Grammars/OslcSearchTerms.g:1:10: STRING_LIST
			{
			DebugLocation(1, 10);
			mSTRING_LIST(); 

			}
			break;
		case 2:
			DebugEnterAlt(2);
			// ../Grammars/OslcSearchTerms.g:1:22: WS
			{
			DebugLocation(1, 22);
			mWS(); 

			}
			break;
		case 3:
			DebugEnterAlt(3);
			// ../Grammars/OslcSearchTerms.g:1:25: STRING_LITERAL
			{
			DebugLocation(1, 25);
			mSTRING_LITERAL(); 

			}
			break;
		case 4:
			DebugEnterAlt(4);
			// ../Grammars/OslcSearchTerms.g:1:40: COMMA
			{
			DebugLocation(1, 40);
			mCOMMA(); 

			}
			break;

		}

	}


	#region DFA

	protected override void InitDFAs()
	{
		base.InitDFAs();
	}

 
	#endregion

}
