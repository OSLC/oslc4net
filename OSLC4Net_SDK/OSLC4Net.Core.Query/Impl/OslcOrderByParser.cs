//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.5
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.5 ../Grammars/OslcOrderBy.g 2013-06-26 12:12:44

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.
#pragma warning disable 3019


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;


using Antlr.Runtime.Tree;
using RewriteRuleITokenStream = Antlr.Runtime.Tree.RewriteRuleTokenStream;

namespace  OSLC4Net.Core.Query.Impl 
{
/******************************************************************************
 * Copyright (c) 2013 IBM Corporation.
 *
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * and Eclipse Distribution License v. 1.0 which accompanies this distribution. 
 *
 * The Eclipse Public License is available at http://www.eclipse.org/legal/epl-v10.html
 * and the Eclipse Distribution License is available at 
 * http://www.eclipse.org/org/documents/edl-v10.php.
 *
 * Contributors: 
 *
 *    Steve Pitchke - initial API and implementation
 *******************************************************************************/
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.5")]
[System.CLSCompliant(false)]
public partial class OslcOrderByParser : Antlr.Runtime.Parser
{
	internal static readonly string[] tokenNames = new string[] {
		"<invalid>", "<EOR>", "<DOWN>", "<UP>", "ASTERISK", "CLOSE_CURLY_BRACE", "COMMA", "DIGIT", "DIRECTION", "DOT", "EOL", "MINUS", "OPEN_CURLY_BRACE", "PLUS", "PNAME_LN", "PNAME_NS", "PN_CHARS", "PN_CHARS_BASE", "PN_CHARS_U", "PN_LOCAL", "PN_PREFIX", "SCOPED_TERM", "SIMPLE_TERM", "TERMS", "WS"
	};
	public const int EOF=-1;
	public const int ASTERISK=4;
	public const int CLOSE_CURLY_BRACE=5;
	public const int COMMA=6;
	public const int DIGIT=7;
	public const int DIRECTION=8;
	public const int DOT=9;
	public const int EOL=10;
	public const int MINUS=11;
	public const int OPEN_CURLY_BRACE=12;
	public const int PLUS=13;
	public const int PNAME_LN=14;
	public const int PNAME_NS=15;
	public const int PN_CHARS=16;
	public const int PN_CHARS_BASE=17;
	public const int PN_CHARS_U=18;
	public const int PN_LOCAL=19;
	public const int PN_PREFIX=20;
	public const int SCOPED_TERM=21;
	public const int SIMPLE_TERM=22;
	public const int TERMS=23;
	public const int WS=24;

	public OslcOrderByParser(ITokenStream input)
		: this(input, new RecognizerSharedState())
	{
	}
	public OslcOrderByParser(ITokenStream input, RecognizerSharedState state)
		: base(input, state)
	{
		ITreeAdaptor treeAdaptor = default(ITreeAdaptor);
		CreateTreeAdaptor(ref treeAdaptor);
		TreeAdaptor = treeAdaptor ?? new CommonTreeAdaptor();
		OnCreated();
	}
	// Implement this function in your helper file to use a custom tree adaptor
	partial void CreateTreeAdaptor(ref ITreeAdaptor adaptor);

	private ITreeAdaptor adaptor;

	public ITreeAdaptor TreeAdaptor
	{
		get
		{
			return adaptor;
		}

		set
		{
			this.adaptor = value;
		}
	}

	public override string[] TokenNames { get { return OslcOrderByParser.tokenNames; } }
	public override string GrammarFileName { get { return "../Grammars/OslcOrderBy.g"; } }


	    public OslcOrderByParser(string orderBy) :
			this(new CommonTokenStream(new OslcOrderByLexer(new ANTLRStringStream(orderBy))))
	    {
	    }
		
		public object Result
		{
			get { return oslc_order_by().Tree; }
		}


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	#region Rules
	partial void EnterRule_oslc_order_by();
	partial void LeaveRule_oslc_order_by();
	// $ANTLR start "oslc_order_by"
	// ../Grammars/OslcOrderBy.g:43:1: oslc_order_by : sort_terms ;
	[GrammarRule("oslc_order_by")]
	private AstParserRuleReturnScope<object, IToken> oslc_order_by()
	{
		EnterRule_oslc_order_by();
		EnterRule("oslc_order_by", 1);
		TraceIn("oslc_order_by", 1);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		AstParserRuleReturnScope<object, IToken> sort_terms1 = default(AstParserRuleReturnScope<object, IToken>);

		try { DebugEnterRule(GrammarFileName, "oslc_order_by");
		DebugLocation(43, 1);
		try
		{
			// ../Grammars/OslcOrderBy.g:43:15: ( sort_terms )
			DebugEnterAlt(1);
			// ../Grammars/OslcOrderBy.g:43:17: sort_terms
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(43, 17);
			PushFollow(Follow._sort_terms_in_oslc_order_by70);
			sort_terms1=sort_terms();
			PopFollow();

			adaptor.AddChild(root_0, sort_terms1.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("oslc_order_by", 1);
			LeaveRule("oslc_order_by", 1);
			LeaveRule_oslc_order_by();
		}
		DebugLocation(44, 1);
		} finally { DebugExitRule(GrammarFileName, "oslc_order_by"); }
		return retval;

	}
	// $ANTLR end "oslc_order_by"

	partial void EnterRule_sort_terms();
	partial void LeaveRule_sort_terms();
	// $ANTLR start "sort_terms"
	// ../Grammars/OslcOrderBy.g:46:1: sort_terms : sort_term ( ',' sort_term )* -> ^( 'terms' sort_term ( sort_term )* ) ;
	[GrammarRule("sort_terms")]
	private AstParserRuleReturnScope<object, IToken> sort_terms()
	{
		EnterRule_sort_terms();
		EnterRule("sort_terms", 2);
		TraceIn("sort_terms", 2);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken char_literal3 = default(IToken);
		AstParserRuleReturnScope<object, IToken> sort_term2 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> sort_term4 = default(AstParserRuleReturnScope<object, IToken>);

		object char_literal3_tree = default(object);
		RewriteRuleITokenStream stream_COMMA=new RewriteRuleITokenStream(adaptor,"token COMMA");
		RewriteRuleSubtreeStream stream_sort_term=new RewriteRuleSubtreeStream(adaptor,"rule sort_term");
		try { DebugEnterRule(GrammarFileName, "sort_terms");
		DebugLocation(46, 1);
		try
		{
			// ../Grammars/OslcOrderBy.g:46:13: ( sort_term ( ',' sort_term )* -> ^( 'terms' sort_term ( sort_term )* ) )
			DebugEnterAlt(1);
			// ../Grammars/OslcOrderBy.g:46:15: sort_term ( ',' sort_term )*
			{
			DebugLocation(46, 15);
			PushFollow(Follow._sort_term_in_sort_terms82);
			sort_term2=sort_term();
			PopFollow();

			stream_sort_term.Add(sort_term2.Tree);
			DebugLocation(46, 25);
			// ../Grammars/OslcOrderBy.g:46:25: ( ',' sort_term )*
			try { DebugEnterSubRule(1);
			while (true)
			{
				int alt1=2;
				try { DebugEnterDecision(1, false);
				int LA1_1 = input.LA(1);

				if ((LA1_1==COMMA))
				{
					alt1 = 1;
				}


				} finally { DebugExitDecision(1); }
				switch ( alt1 )
				{
				case 1:
					DebugEnterAlt(1);
					// ../Grammars/OslcOrderBy.g:46:27: ',' sort_term
					{
					DebugLocation(46, 27);
					char_literal3=(IToken)Match(input,COMMA,Follow._COMMA_in_sort_terms86);  
					stream_COMMA.Add(char_literal3);

					DebugLocation(46, 31);
					PushFollow(Follow._sort_term_in_sort_terms88);
					sort_term4=sort_term();
					PopFollow();

					stream_sort_term.Add(sort_term4.Tree);

					}
					break;

				default:
					goto loop1;
				}
			}

			loop1:
				;

			} finally { DebugExitSubRule(1); }



			{
			// AST REWRITE
			// elements: sort_term, sort_term, TERMS
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 46:45: -> ^( 'terms' sort_term ( sort_term )* )
			{
				DebugLocation(46, 48);
				// ../Grammars/OslcOrderBy.g:46:48: ^( 'terms' sort_term ( sort_term )* )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(46, 51);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(TERMS, "TERMS"), root_1);

				DebugLocation(46, 59);
				adaptor.AddChild(root_1, stream_sort_term.NextTree());
				DebugLocation(46, 69);
				// ../Grammars/OslcOrderBy.g:46:69: ( sort_term )*
				while ( stream_sort_term.HasNext )
				{
					DebugLocation(46, 70);
					adaptor.AddChild(root_1, stream_sort_term.NextTree());

				}
				stream_sort_term.Reset();

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("sort_terms", 2);
			LeaveRule("sort_terms", 2);
			LeaveRule_sort_terms();
		}
		DebugLocation(47, 1);
		} finally { DebugExitRule(GrammarFileName, "sort_terms"); }
		return retval;

	}
	// $ANTLR end "sort_terms"

	partial void EnterRule_sort_term();
	partial void LeaveRule_sort_term();
	// $ANTLR start "sort_term"
	// ../Grammars/OslcOrderBy.g:49:1: sort_term : ( scoped_sort_term | DIRECTION identifier -> ^( 'simple_term' identifier DIRECTION ) );
	[GrammarRule("sort_term")]
	private AstParserRuleReturnScope<object, IToken> sort_term()
	{
		EnterRule_sort_term();
		EnterRule("sort_term", 3);
		TraceIn("sort_term", 3);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken DIRECTION6 = default(IToken);
		AstParserRuleReturnScope<object, IToken> scoped_sort_term5 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> identifier7 = default(AstParserRuleReturnScope<object, IToken>);

		object DIRECTION6_tree = default(object);
		RewriteRuleITokenStream stream_DIRECTION=new RewriteRuleITokenStream(adaptor,"token DIRECTION");
		RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");
		try { DebugEnterRule(GrammarFileName, "sort_term");
		DebugLocation(49, 1);
		try
		{
			// ../Grammars/OslcOrderBy.g:49:13: ( scoped_sort_term | DIRECTION identifier -> ^( 'simple_term' identifier DIRECTION ) )
			int alt2=2;
			try { DebugEnterDecision(2, false);
			int LA2_1 = input.LA(1);

			if (((LA2_1>=PNAME_LN && LA2_1<=PNAME_NS)))
			{
				alt2 = 1;
			}
			else if ((LA2_1==DIRECTION))
			{
				alt2 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 2, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(2); }
			switch (alt2)
			{
			case 1:
				DebugEnterAlt(1);
				// ../Grammars/OslcOrderBy.g:49:15: scoped_sort_term
				{
				root_0 = (object)adaptor.Nil();

				DebugLocation(49, 15);
				PushFollow(Follow._scoped_sort_term_in_sort_term120);
				scoped_sort_term5=scoped_sort_term();
				PopFollow();

				adaptor.AddChild(root_0, scoped_sort_term5.Tree);

				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ../Grammars/OslcOrderBy.g:49:34: DIRECTION identifier
				{
				DebugLocation(49, 34);
				DIRECTION6=(IToken)Match(input,DIRECTION,Follow._DIRECTION_in_sort_term124);  
				stream_DIRECTION.Add(DIRECTION6);

				DebugLocation(49, 44);
				PushFollow(Follow._identifier_in_sort_term126);
				identifier7=identifier();
				PopFollow();

				stream_identifier.Add(identifier7.Tree);


				{
				// AST REWRITE
				// elements: identifier, DIRECTION, SIMPLE_TERM
				// token labels: 
				// rule labels: retval
				// token list labels: 
				// rule list labels: 
				// wildcard labels: 
				retval.Tree = root_0;
				RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

				root_0 = (object)adaptor.Nil();
				// 49:55: -> ^( 'simple_term' identifier DIRECTION )
				{
					DebugLocation(49, 58);
					// ../Grammars/OslcOrderBy.g:49:58: ^( 'simple_term' identifier DIRECTION )
					{
					object root_1 = (object)adaptor.Nil();
					DebugLocation(49, 61);
					root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(SIMPLE_TERM, "SIMPLE_TERM"), root_1);

					DebugLocation(49, 75);
					adaptor.AddChild(root_1, stream_identifier.NextTree());
					DebugLocation(49, 86);
					adaptor.AddChild(root_1, stream_DIRECTION.NextNode());

					adaptor.AddChild(root_0, root_1);
					}

				}

				retval.Tree = root_0;
				}

				}
				break;

			}
			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("sort_term", 3);
			LeaveRule("sort_term", 3);
			LeaveRule_sort_term();
		}
		DebugLocation(50, 1);
		} finally { DebugExitRule(GrammarFileName, "sort_term"); }
		return retval;

	}
	// $ANTLR end "sort_term"

	partial void EnterRule_scoped_sort_term();
	partial void LeaveRule_scoped_sort_term();
	// $ANTLR start "scoped_sort_term"
	// ../Grammars/OslcOrderBy.g:52:1: scoped_sort_term : identifier '{' sort_terms '}' -> ^( 'scoped_term' identifier sort_terms ) ;
	[GrammarRule("scoped_sort_term")]
	private AstParserRuleReturnScope<object, IToken> scoped_sort_term()
	{
		EnterRule_scoped_sort_term();
		EnterRule("scoped_sort_term", 4);
		TraceIn("scoped_sort_term", 4);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken char_literal9 = default(IToken);
		IToken char_literal11 = default(IToken);
		AstParserRuleReturnScope<object, IToken> identifier8 = default(AstParserRuleReturnScope<object, IToken>);
		AstParserRuleReturnScope<object, IToken> sort_terms10 = default(AstParserRuleReturnScope<object, IToken>);

		object char_literal9_tree = default(object);
		object char_literal11_tree = default(object);
		RewriteRuleITokenStream stream_CLOSE_CURLY_BRACE=new RewriteRuleITokenStream(adaptor,"token CLOSE_CURLY_BRACE");
		RewriteRuleITokenStream stream_OPEN_CURLY_BRACE=new RewriteRuleITokenStream(adaptor,"token OPEN_CURLY_BRACE");
		RewriteRuleSubtreeStream stream_sort_terms=new RewriteRuleSubtreeStream(adaptor,"rule sort_terms");
		RewriteRuleSubtreeStream stream_identifier=new RewriteRuleSubtreeStream(adaptor,"rule identifier");
		try { DebugEnterRule(GrammarFileName, "scoped_sort_term");
		DebugLocation(52, 4);
		try
		{
			// ../Grammars/OslcOrderBy.g:52:18: ( identifier '{' sort_terms '}' -> ^( 'scoped_term' identifier sort_terms ) )
			DebugEnterAlt(1);
			// ../Grammars/OslcOrderBy.g:52:20: identifier '{' sort_terms '}'
			{
			DebugLocation(52, 20);
			PushFollow(Follow._identifier_in_scoped_sort_term148);
			identifier8=identifier();
			PopFollow();

			stream_identifier.Add(identifier8.Tree);
			DebugLocation(52, 31);
			char_literal9=(IToken)Match(input,OPEN_CURLY_BRACE,Follow._OPEN_CURLY_BRACE_in_scoped_sort_term150);  
			stream_OPEN_CURLY_BRACE.Add(char_literal9);

			DebugLocation(52, 35);
			PushFollow(Follow._sort_terms_in_scoped_sort_term152);
			sort_terms10=sort_terms();
			PopFollow();

			stream_sort_terms.Add(sort_terms10.Tree);
			DebugLocation(52, 46);
			char_literal11=(IToken)Match(input,CLOSE_CURLY_BRACE,Follow._CLOSE_CURLY_BRACE_in_scoped_sort_term154);  
			stream_CLOSE_CURLY_BRACE.Add(char_literal11);



			{
			// AST REWRITE
			// elements: SCOPED_TERM, identifier, sort_terms
			// token labels: 
			// rule labels: retval
			// token list labels: 
			// rule list labels: 
			// wildcard labels: 
			retval.Tree = root_0;
			RewriteRuleSubtreeStream stream_retval=new RewriteRuleSubtreeStream(adaptor,"rule retval",retval!=null?retval.Tree:null);

			root_0 = (object)adaptor.Nil();
			// 52:50: -> ^( 'scoped_term' identifier sort_terms )
			{
				DebugLocation(52, 53);
				// ../Grammars/OslcOrderBy.g:52:53: ^( 'scoped_term' identifier sort_terms )
				{
				object root_1 = (object)adaptor.Nil();
				DebugLocation(52, 56);
				root_1 = (object)adaptor.BecomeRoot((object)adaptor.Create(SCOPED_TERM, "SCOPED_TERM"), root_1);

				DebugLocation(52, 70);
				adaptor.AddChild(root_1, stream_identifier.NextTree());
				DebugLocation(52, 81);
				adaptor.AddChild(root_1, stream_sort_terms.NextTree());

				adaptor.AddChild(root_0, root_1);
				}

			}

			retval.Tree = root_0;
			}

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("scoped_sort_term", 4);
			LeaveRule("scoped_sort_term", 4);
			LeaveRule_scoped_sort_term();
		}
		DebugLocation(53, 4);
		} finally { DebugExitRule(GrammarFileName, "scoped_sort_term"); }
		return retval;

	}
	// $ANTLR end "scoped_sort_term"

	partial void EnterRule_identifier();
	partial void LeaveRule_identifier();
	// $ANTLR start "identifier"
	// ../Grammars/OslcOrderBy.g:55:1: identifier : prefixedName ;
	[GrammarRule("identifier")]
	private AstParserRuleReturnScope<object, IToken> identifier()
	{
		EnterRule_identifier();
		EnterRule("identifier", 5);
		TraceIn("identifier", 5);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		AstParserRuleReturnScope<object, IToken> prefixedName12 = default(AstParserRuleReturnScope<object, IToken>);

		try { DebugEnterRule(GrammarFileName, "identifier");
		DebugLocation(55, 29);
		try
		{
			// ../Grammars/OslcOrderBy.g:55:15: ( prefixedName )
			DebugEnterAlt(1);
			// ../Grammars/OslcOrderBy.g:55:17: prefixedName
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(55, 17);
			PushFollow(Follow._prefixedName_in_identifier182);
			prefixedName12=prefixedName();
			PopFollow();

			adaptor.AddChild(root_0, prefixedName12.Tree);

			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("identifier", 5);
			LeaveRule("identifier", 5);
			LeaveRule_identifier();
		}
		DebugLocation(55, 29);
		} finally { DebugExitRule(GrammarFileName, "identifier"); }
		return retval;

	}
	// $ANTLR end "identifier"

	partial void EnterRule_prefixedName();
	partial void LeaveRule_prefixedName();
	// $ANTLR start "prefixedName"
	// ../Grammars/OslcOrderBy.g:57:1: prefixedName : ( PNAME_LN | PNAME_NS );
	[GrammarRule("prefixedName")]
	private AstParserRuleReturnScope<object, IToken> prefixedName()
	{
		EnterRule_prefixedName();
		EnterRule("prefixedName", 6);
		TraceIn("prefixedName", 6);
		AstParserRuleReturnScope<object, IToken> retval = new AstParserRuleReturnScope<object, IToken>();
		retval.Start = (IToken)input.LT(1);

		object root_0 = default(object);

		IToken set13 = default(IToken);

		object set13_tree = default(object);
		try { DebugEnterRule(GrammarFileName, "prefixedName");
		DebugLocation(57, 4);
		try
		{
			// ../Grammars/OslcOrderBy.g:58:5: ( PNAME_LN | PNAME_NS )
			DebugEnterAlt(1);
			// ../Grammars/OslcOrderBy.g:
			{
			root_0 = (object)adaptor.Nil();

			DebugLocation(58, 5);

			set13=(IToken)input.LT(1);
			if ((input.LA(1)>=PNAME_LN && input.LA(1)<=PNAME_NS))
			{
				input.Consume();
				adaptor.AddChild(root_0, (object)adaptor.Create(set13));
				state.errorRecovery=false;
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				throw mse;
			}


			}

			retval.Stop = (IToken)input.LT(-1);

			retval.Tree = (object)adaptor.RulePostProcessing(root_0);
			adaptor.SetTokenBoundaries(retval.Tree, retval.Start, retval.Stop);

		}
		catch (RecognitionException re)
		{
			ReportError(re);
			Recover(input,re);
		retval.Tree = (object)adaptor.ErrorNode(input, retval.Start, input.LT(-1), re);

		}
		finally
		{
			TraceOut("prefixedName", 6);
			LeaveRule("prefixedName", 6);
			LeaveRule_prefixedName();
		}
		DebugLocation(60, 4);
		} finally { DebugExitRule(GrammarFileName, "prefixedName"); }
		return retval;

	}
	// $ANTLR end "prefixedName"
	#endregion Rules


	#region Follow sets
	private static class Follow
	{
		public static readonly BitSet _sort_terms_in_oslc_order_by70 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _sort_term_in_sort_terms82 = new BitSet(new ulong[]{0x42UL});
		public static readonly BitSet _COMMA_in_sort_terms86 = new BitSet(new ulong[]{0xC100UL});
		public static readonly BitSet _sort_term_in_sort_terms88 = new BitSet(new ulong[]{0x42UL});
		public static readonly BitSet _scoped_sort_term_in_sort_term120 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _DIRECTION_in_sort_term124 = new BitSet(new ulong[]{0xC000UL});
		public static readonly BitSet _identifier_in_sort_term126 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _identifier_in_scoped_sort_term148 = new BitSet(new ulong[]{0x1000UL});
		public static readonly BitSet _OPEN_CURLY_BRACE_in_scoped_sort_term150 = new BitSet(new ulong[]{0xC100UL});
		public static readonly BitSet _sort_terms_in_scoped_sort_term152 = new BitSet(new ulong[]{0x20UL});
		public static readonly BitSet _CLOSE_CURLY_BRACE_in_scoped_sort_term154 = new BitSet(new ulong[]{0x2UL});
		public static readonly BitSet _prefixedName_in_identifier182 = new BitSet(new ulong[]{0x2UL});
	}
	#endregion Follow sets
}

} // namespace  OSLC4Net.Core.Query.Impl 
