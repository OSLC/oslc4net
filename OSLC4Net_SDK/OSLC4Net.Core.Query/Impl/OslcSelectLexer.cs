//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.5
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.5 ../Grammars/OslcSelect.g 2013-06-26 14:33:40

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.
#pragma warning disable 3019


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.5")]
[System.CLSCompliant(false)]
public partial class OslcSelectLexer : Antlr.Runtime.Lexer
{
	public const int EOF=-1;
	public const int ASTERISK=4;
	public const int CLOSE_CURLY_BRACE=5;
	public const int COMMA=6;
	public const int DIGIT=7;
	public const int DOT=8;
	public const int ECHAR=9;
	public const int EOL=10;
	public const int MINUS=11;
	public const int NESTED_PROPERTIES=12;
	public const int NOT=13;
	public const int OPEN_CURLY_BRACE=14;
	public const int PLUS=15;
	public const int PNAME_LN=16;
	public const int PNAME_NS=17;
	public const int PN_CHARS=18;
	public const int PN_CHARS_BASE=19;
	public const int PN_CHARS_U=20;
	public const int PN_LOCAL=21;
	public const int PN_PREFIX=22;
	public const int PREFIXED_NAME=23;
	public const int PROPERTIES=24;
	public const int WILDCARD=25;
	public const int WS=26;

    // delegates
    // delegators

	public OslcSelectLexer()
	{
		OnCreated();
	}

	public OslcSelectLexer(ICharStream input )
		: this(input, new RecognizerSharedState())
	{
	}

	public OslcSelectLexer(ICharStream input, RecognizerSharedState state)
		: base(input, state)
	{

		OnCreated();
	}
	public override string GrammarFileName { get { return "../Grammars/OslcSelect.g"; } }


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	partial void EnterRule_NESTED_PROPERTIES();
	partial void LeaveRule_NESTED_PROPERTIES();

	// $ANTLR start "NESTED_PROPERTIES"
	[GrammarRule("NESTED_PROPERTIES")]
	private void mNESTED_PROPERTIES()
	{
		EnterRule_NESTED_PROPERTIES();
		EnterRule("NESTED_PROPERTIES", 1);
		TraceIn("NESTED_PROPERTIES", 1);
		try
		{
			int _type = NESTED_PROPERTIES;
			int _channel = DefaultTokenChannel;
			// ../Grammars/OslcSelect.g:7:19: ( 'nested_property' )
			DebugEnterAlt(1);
			// ../Grammars/OslcSelect.g:7:21: 'nested_property'
			{
			DebugLocation(7, 21);
			Match("nested_property"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("NESTED_PROPERTIES", 1);
			LeaveRule("NESTED_PROPERTIES", 1);
			LeaveRule_NESTED_PROPERTIES();
		}
	}
	// $ANTLR end "NESTED_PROPERTIES"

	partial void EnterRule_PREFIXED_NAME();
	partial void LeaveRule_PREFIXED_NAME();

	// $ANTLR start "PREFIXED_NAME"
	[GrammarRule("PREFIXED_NAME")]
	private void mPREFIXED_NAME()
	{
		EnterRule_PREFIXED_NAME();
		EnterRule("PREFIXED_NAME", 2);
		TraceIn("PREFIXED_NAME", 2);
		try
		{
			int _type = PREFIXED_NAME;
			int _channel = DefaultTokenChannel;
			// ../Grammars/OslcSelect.g:8:15: ( 'prefixed_name' )
			DebugEnterAlt(1);
			// ../Grammars/OslcSelect.g:8:17: 'prefixed_name'
			{
			DebugLocation(8, 17);
			Match("prefixed_name"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("PREFIXED_NAME", 2);
			LeaveRule("PREFIXED_NAME", 2);
			LeaveRule_PREFIXED_NAME();
		}
	}
	// $ANTLR end "PREFIXED_NAME"

	partial void EnterRule_PROPERTIES();
	partial void LeaveRule_PROPERTIES();

	// $ANTLR start "PROPERTIES"
	[GrammarRule("PROPERTIES")]
	private void mPROPERTIES()
	{
		EnterRule_PROPERTIES();
		EnterRule("PROPERTIES", 3);
		TraceIn("PROPERTIES", 3);
		try
		{
			int _type = PROPERTIES;
			int _channel = DefaultTokenChannel;
			// ../Grammars/OslcSelect.g:9:12: ( 'properties' )
			DebugEnterAlt(1);
			// ../Grammars/OslcSelect.g:9:14: 'properties'
			{
			DebugLocation(9, 14);
			Match("properties"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("PROPERTIES", 3);
			LeaveRule("PROPERTIES", 3);
			LeaveRule_PROPERTIES();
		}
	}
	// $ANTLR end "PROPERTIES"

	partial void EnterRule_WILDCARD();
	partial void LeaveRule_WILDCARD();

	// $ANTLR start "WILDCARD"
	[GrammarRule("WILDCARD")]
	private void mWILDCARD()
	{
		EnterRule_WILDCARD();
		EnterRule("WILDCARD", 4);
		TraceIn("WILDCARD", 4);
		try
		{
			int _type = WILDCARD;
			int _channel = DefaultTokenChannel;
			// ../Grammars/OslcSelect.g:10:10: ( 'wildcard' )
			DebugEnterAlt(1);
			// ../Grammars/OslcSelect.g:10:12: 'wildcard'
			{
			DebugLocation(10, 12);
			Match("wildcard"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("WILDCARD", 4);
			LeaveRule("WILDCARD", 4);
			LeaveRule_WILDCARD();
		}
	}
	// $ANTLR end "WILDCARD"

	partial void EnterRule_WS();
	partial void LeaveRule_WS();

	// $ANTLR start "WS"
	[GrammarRule("WS")]
	private void mWS()
	{
		EnterRule_WS();
		EnterRule("WS", 5);
		TraceIn("WS", 5);
		try
		{
			int _type = WS;
			int _channel = DefaultTokenChannel;
			// ../Grammars/OslcSelect.g:71:5: ( ( ' ' | '\\t' | EOL )+ )
			DebugEnterAlt(1);
			// ../Grammars/OslcSelect.g:71:7: ( ' ' | '\\t' | EOL )+
			{
			DebugLocation(71, 7);
			// ../Grammars/OslcSelect.g:71:7: ( ' ' | '\\t' | EOL )+
			int cnt1=0;
			try { DebugEnterSubRule(1);
			while (true)
			{
				int alt1=2;
				try { DebugEnterDecision(1, false);
				int LA1_1 = input.LA(1);

				if (((LA1_1>='\t' && LA1_1<='\n')||LA1_1=='\r'||LA1_1==' '))
				{
					alt1 = 1;
				}


				} finally { DebugExitDecision(1); }
				switch (alt1)
				{
				case 1:
					DebugEnterAlt(1);
					// ../Grammars/OslcSelect.g:
					{
					DebugLocation(71, 7);
					input.Consume();


					}
					break;

				default:
					if (cnt1 >= 1)
						goto loop1;

					EarlyExitException eee1 = new EarlyExitException( 1, input );
					DebugRecognitionException(eee1);
					throw eee1;
				}
				cnt1++;
			}
			loop1:
				;

			} finally { DebugExitSubRule(1); }

			DebugLocation(71, 25);
			 _channel=Hidden; 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("WS", 5);
			LeaveRule("WS", 5);
			LeaveRule_WS();
		}
	}
	// $ANTLR end "WS"

	partial void EnterRule_PNAME_NS();
	partial void LeaveRule_PNAME_NS();

	// $ANTLR start "PNAME_NS"
	[GrammarRule("PNAME_NS")]
	private void mPNAME_NS()
	{
		EnterRule_PNAME_NS();
		EnterRule("PNAME_NS", 6);
		TraceIn("PNAME_NS", 6);
		try
		{
			int _type = PNAME_NS;
			int _channel = DefaultTokenChannel;
			CommonToken p = default(CommonToken);

			// ../Grammars/OslcSelect.g:75:5: ( (p= PN_PREFIX )? ':' )
			DebugEnterAlt(1);
			// ../Grammars/OslcSelect.g:75:7: (p= PN_PREFIX )? ':'
			{
			DebugLocation(75, 8);
			// ../Grammars/OslcSelect.g:75:8: (p= PN_PREFIX )?
			int alt2=2;
			try { DebugEnterSubRule(2);
			try { DebugEnterDecision(2, false);
			int LA2_1 = input.LA(1);

			if (((LA2_1>='A' && LA2_1<='Z')||(LA2_1>='a' && LA2_1<='z')||(LA2_1>='\u00C0' && LA2_1<='\u00D6')||(LA2_1>='\u00D8' && LA2_1<='\u00F6')||(LA2_1>='\u00F8' && LA2_1<='\u02FF')||(LA2_1>='\u0370' && LA2_1<='\u037D')||(LA2_1>='\u037F' && LA2_1<='\u1FFF')||(LA2_1>='\u200C' && LA2_1<='\u200D')||(LA2_1>='\u2070' && LA2_1<='\u218F')||(LA2_1>='\u2C00' && LA2_1<='\u2FEF')||(LA2_1>='\u3001' && LA2_1<='\uD7FF')||(LA2_1>='\uF900' && LA2_1<='\uFDCF')||(LA2_1>='\uFDF0' && LA2_1<='\uFFFD')))
			{
				alt2 = 1;
			}
			} finally { DebugExitDecision(2); }
			switch (alt2)
			{
			case 1:
				DebugEnterAlt(1);
				// ../Grammars/OslcSelect.g:75:8: p= PN_PREFIX
				{
				DebugLocation(75, 8);
				int pStart91 = CharIndex;
				int pStartLine91 = Line;
				int pStartCharPos91 = CharPositionInLine;
				mPN_PREFIX(); 
				p = new CommonToken(input, TokenTypes.Invalid, TokenChannels.Default, pStart91, CharIndex-1);
				p.Line = pStartLine91;
				p.CharPositionInLine = pStartCharPos91;

				}
				break;

			}
			} finally { DebugExitSubRule(2); }

			DebugLocation(75, 20);
			Match(':'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("PNAME_NS", 6);
			LeaveRule("PNAME_NS", 6);
			LeaveRule_PNAME_NS();
		}
	}
	// $ANTLR end "PNAME_NS"

	partial void EnterRule_PNAME_LN();
	partial void LeaveRule_PNAME_LN();

	// $ANTLR start "PNAME_LN"
	[GrammarRule("PNAME_LN")]
	private void mPNAME_LN()
	{
		EnterRule_PNAME_LN();
		EnterRule("PNAME_LN", 7);
		TraceIn("PNAME_LN", 7);
		try
		{
			int _type = PNAME_LN;
			int _channel = DefaultTokenChannel;
			// ../Grammars/OslcSelect.g:79:5: ( PNAME_NS PN_LOCAL )
			DebugEnterAlt(1);
			// ../Grammars/OslcSelect.g:79:7: PNAME_NS PN_LOCAL
			{
			DebugLocation(79, 7);
			mPNAME_NS(); 
			DebugLocation(79, 16);
			mPN_LOCAL(); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("PNAME_LN", 7);
			LeaveRule("PNAME_LN", 7);
			LeaveRule_PNAME_LN();
		}
	}
	// $ANTLR end "PNAME_LN"

	partial void EnterRule_ECHAR();
	partial void LeaveRule_ECHAR();

	// $ANTLR start "ECHAR"
	[GrammarRule("ECHAR")]
	private void mECHAR()
	{
		EnterRule_ECHAR();
		EnterRule("ECHAR", 8);
		TraceIn("ECHAR", 8);
		try
		{
			// ../Grammars/OslcSelect.g:85:5: ( '\\\\' ( 't' | 'b' | 'n' | 'r' | 'f' | '\\\\' | '\"' | '\\'' ) )
			DebugEnterAlt(1);
			// ../Grammars/OslcSelect.g:85:7: '\\\\' ( 't' | 'b' | 'n' | 'r' | 'f' | '\\\\' | '\"' | '\\'' )
			{
			DebugLocation(85, 7);
			Match('\\'); 
			DebugLocation(85, 12);
			if (input.LA(1)=='\"'||input.LA(1)=='\''||input.LA(1)=='\\'||input.LA(1)=='b'||input.LA(1)=='f'||input.LA(1)=='n'||input.LA(1)=='r'||input.LA(1)=='t')
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}


			}

		}
		finally
		{
			TraceOut("ECHAR", 8);
			LeaveRule("ECHAR", 8);
			LeaveRule_ECHAR();
		}
	}
	// $ANTLR end "ECHAR"

	partial void EnterRule_PN_CHARS_U();
	partial void LeaveRule_PN_CHARS_U();

	// $ANTLR start "PN_CHARS_U"
	[GrammarRule("PN_CHARS_U")]
	private void mPN_CHARS_U()
	{
		EnterRule_PN_CHARS_U();
		EnterRule("PN_CHARS_U", 9);
		TraceIn("PN_CHARS_U", 9);
		try
		{
			// ../Grammars/OslcSelect.g:90:5: ( PN_CHARS_BASE | '_' )
			DebugEnterAlt(1);
			// ../Grammars/OslcSelect.g:
			{
			DebugLocation(90, 5);
			if ((input.LA(1)>='A' && input.LA(1)<='Z')||input.LA(1)=='_'||(input.LA(1)>='a' && input.LA(1)<='z')||(input.LA(1)>='\u00C0' && input.LA(1)<='\u00D6')||(input.LA(1)>='\u00D8' && input.LA(1)<='\u00F6')||(input.LA(1)>='\u00F8' && input.LA(1)<='\u02FF')||(input.LA(1)>='\u0370' && input.LA(1)<='\u037D')||(input.LA(1)>='\u037F' && input.LA(1)<='\u1FFF')||(input.LA(1)>='\u200C' && input.LA(1)<='\u200D')||(input.LA(1)>='\u2070' && input.LA(1)<='\u218F')||(input.LA(1)>='\u2C00' && input.LA(1)<='\u2FEF')||(input.LA(1)>='\u3001' && input.LA(1)<='\uD7FF')||(input.LA(1)>='\uF900' && input.LA(1)<='\uFDCF')||(input.LA(1)>='\uFDF0' && input.LA(1)<='\uFFFD'))
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}


			}

		}
		finally
		{
			TraceOut("PN_CHARS_U", 9);
			LeaveRule("PN_CHARS_U", 9);
			LeaveRule_PN_CHARS_U();
		}
	}
	// $ANTLR end "PN_CHARS_U"

	partial void EnterRule_PN_CHARS();
	partial void LeaveRule_PN_CHARS();

	// $ANTLR start "PN_CHARS"
	[GrammarRule("PN_CHARS")]
	private void mPN_CHARS()
	{
		EnterRule_PN_CHARS();
		EnterRule("PN_CHARS", 10);
		TraceIn("PN_CHARS", 10);
		try
		{
			// ../Grammars/OslcSelect.g:95:5: ( PN_CHARS_U | MINUS | DIGIT | '\\u00B7' | '\\u0300' .. '\\u036F' | '\\u203F' .. '\\u2040' )
			DebugEnterAlt(1);
			// ../Grammars/OslcSelect.g:
			{
			DebugLocation(95, 5);
			if (input.LA(1)=='-'||(input.LA(1)>='0' && input.LA(1)<='9')||(input.LA(1)>='A' && input.LA(1)<='Z')||input.LA(1)=='_'||(input.LA(1)>='a' && input.LA(1)<='z')||input.LA(1)=='\u00B7'||(input.LA(1)>='\u00C0' && input.LA(1)<='\u00D6')||(input.LA(1)>='\u00D8' && input.LA(1)<='\u00F6')||(input.LA(1)>='\u00F8' && input.LA(1)<='\u037D')||(input.LA(1)>='\u037F' && input.LA(1)<='\u1FFF')||(input.LA(1)>='\u200C' && input.LA(1)<='\u200D')||(input.LA(1)>='\u203F' && input.LA(1)<='\u2040')||(input.LA(1)>='\u2070' && input.LA(1)<='\u218F')||(input.LA(1)>='\u2C00' && input.LA(1)<='\u2FEF')||(input.LA(1)>='\u3001' && input.LA(1)<='\uD7FF')||(input.LA(1)>='\uF900' && input.LA(1)<='\uFDCF')||(input.LA(1)>='\uFDF0' && input.LA(1)<='\uFFFD'))
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}


			}

		}
		finally
		{
			TraceOut("PN_CHARS", 10);
			LeaveRule("PN_CHARS", 10);
			LeaveRule_PN_CHARS();
		}
	}
	// $ANTLR end "PN_CHARS"

	partial void EnterRule_PN_PREFIX();
	partial void LeaveRule_PN_PREFIX();

	// $ANTLR start "PN_PREFIX"
	[GrammarRule("PN_PREFIX")]
	private void mPN_PREFIX()
	{
		EnterRule_PN_PREFIX();
		EnterRule("PN_PREFIX", 11);
		TraceIn("PN_PREFIX", 11);
		try
		{
			// ../Grammars/OslcSelect.g:105:5: ( PN_CHARS_BASE ( ( PN_CHARS | DOT )* PN_CHARS )? )
			DebugEnterAlt(1);
			// ../Grammars/OslcSelect.g:105:7: PN_CHARS_BASE ( ( PN_CHARS | DOT )* PN_CHARS )?
			{
			DebugLocation(105, 7);
			mPN_CHARS_BASE(); 
			DebugLocation(105, 21);
			// ../Grammars/OslcSelect.g:105:21: ( ( PN_CHARS | DOT )* PN_CHARS )?
			int alt4=2;
			try { DebugEnterSubRule(4);
			try { DebugEnterDecision(4, false);
			int LA4_1 = input.LA(1);

			if (((LA4_1>='-' && LA4_1<='.')||(LA4_1>='0' && LA4_1<='9')||(LA4_1>='A' && LA4_1<='Z')||LA4_1=='_'||(LA4_1>='a' && LA4_1<='z')||LA4_1=='\u00B7'||(LA4_1>='\u00C0' && LA4_1<='\u00D6')||(LA4_1>='\u00D8' && LA4_1<='\u00F6')||(LA4_1>='\u00F8' && LA4_1<='\u037D')||(LA4_1>='\u037F' && LA4_1<='\u1FFF')||(LA4_1>='\u200C' && LA4_1<='\u200D')||(LA4_1>='\u203F' && LA4_1<='\u2040')||(LA4_1>='\u2070' && LA4_1<='\u218F')||(LA4_1>='\u2C00' && LA4_1<='\u2FEF')||(LA4_1>='\u3001' && LA4_1<='\uD7FF')||(LA4_1>='\uF900' && LA4_1<='\uFDCF')||(LA4_1>='\uFDF0' && LA4_1<='\uFFFD')))
			{
				alt4 = 1;
			}
			} finally { DebugExitDecision(4); }
			switch (alt4)
			{
			case 1:
				DebugEnterAlt(1);
				// ../Grammars/OslcSelect.g:105:22: ( PN_CHARS | DOT )* PN_CHARS
				{
				DebugLocation(105, 22);
				// ../Grammars/OslcSelect.g:105:22: ( PN_CHARS | DOT )*
				try { DebugEnterSubRule(3);
				while (true)
				{
					int alt3=2;
					try { DebugEnterDecision(3, false);
					int LA3_1 = input.LA(1);

					if ((LA3_1=='-'||(LA3_1>='0' && LA3_1<='9')||(LA3_1>='A' && LA3_1<='Z')||LA3_1=='_'||(LA3_1>='a' && LA3_1<='z')||LA3_1=='\u00B7'||(LA3_1>='\u00C0' && LA3_1<='\u00D6')||(LA3_1>='\u00D8' && LA3_1<='\u00F6')||(LA3_1>='\u00F8' && LA3_1<='\u037D')||(LA3_1>='\u037F' && LA3_1<='\u1FFF')||(LA3_1>='\u200C' && LA3_1<='\u200D')||(LA3_1>='\u203F' && LA3_1<='\u2040')||(LA3_1>='\u2070' && LA3_1<='\u218F')||(LA3_1>='\u2C00' && LA3_1<='\u2FEF')||(LA3_1>='\u3001' && LA3_1<='\uD7FF')||(LA3_1>='\uF900' && LA3_1<='\uFDCF')||(LA3_1>='\uFDF0' && LA3_1<='\uFFFD')))
					{
						int LA3_2 = input.LA(2);

						if (((LA3_2>='-' && LA3_2<='.')||(LA3_2>='0' && LA3_2<='9')||(LA3_2>='A' && LA3_2<='Z')||LA3_2=='_'||(LA3_2>='a' && LA3_2<='z')||LA3_2=='\u00B7'||(LA3_2>='\u00C0' && LA3_2<='\u00D6')||(LA3_2>='\u00D8' && LA3_2<='\u00F6')||(LA3_2>='\u00F8' && LA3_2<='\u037D')||(LA3_2>='\u037F' && LA3_2<='\u1FFF')||(LA3_2>='\u200C' && LA3_2<='\u200D')||(LA3_2>='\u203F' && LA3_2<='\u2040')||(LA3_2>='\u2070' && LA3_2<='\u218F')||(LA3_2>='\u2C00' && LA3_2<='\u2FEF')||(LA3_2>='\u3001' && LA3_2<='\uD7FF')||(LA3_2>='\uF900' && LA3_2<='\uFDCF')||(LA3_2>='\uFDF0' && LA3_2<='\uFFFD')))
						{
							alt3 = 1;
						}


					}
					else if ((LA3_1=='.'))
					{
						alt3 = 1;
					}


					} finally { DebugExitDecision(3); }
					switch ( alt3 )
					{
					case 1:
						DebugEnterAlt(1);
						// ../Grammars/OslcSelect.g:
						{
						DebugLocation(105, 22);
						input.Consume();


						}
						break;

					default:
						goto loop3;
					}
				}

				loop3:
					;

				} finally { DebugExitSubRule(3); }

				DebugLocation(105, 38);
				mPN_CHARS(); 

				}
				break;

			}
			} finally { DebugExitSubRule(4); }


			}

		}
		finally
		{
			TraceOut("PN_PREFIX", 11);
			LeaveRule("PN_PREFIX", 11);
			LeaveRule_PN_PREFIX();
		}
	}
	// $ANTLR end "PN_PREFIX"

	partial void EnterRule_PN_LOCAL();
	partial void LeaveRule_PN_LOCAL();

	// $ANTLR start "PN_LOCAL"
	[GrammarRule("PN_LOCAL")]
	private void mPN_LOCAL()
	{
		EnterRule_PN_LOCAL();
		EnterRule("PN_LOCAL", 12);
		TraceIn("PN_LOCAL", 12);
		try
		{
			// ../Grammars/OslcSelect.g:110:5: ( ( PN_CHARS_U | DIGIT ) ( ( PN_CHARS | DOT )* PN_CHARS )? )
			DebugEnterAlt(1);
			// ../Grammars/OslcSelect.g:110:7: ( PN_CHARS_U | DIGIT ) ( ( PN_CHARS | DOT )* PN_CHARS )?
			{
			DebugLocation(110, 7);
			if ((input.LA(1)>='0' && input.LA(1)<='9')||(input.LA(1)>='A' && input.LA(1)<='Z')||input.LA(1)=='_'||(input.LA(1)>='a' && input.LA(1)<='z')||(input.LA(1)>='\u00C0' && input.LA(1)<='\u00D6')||(input.LA(1)>='\u00D8' && input.LA(1)<='\u00F6')||(input.LA(1)>='\u00F8' && input.LA(1)<='\u02FF')||(input.LA(1)>='\u0370' && input.LA(1)<='\u037D')||(input.LA(1)>='\u037F' && input.LA(1)<='\u1FFF')||(input.LA(1)>='\u200C' && input.LA(1)<='\u200D')||(input.LA(1)>='\u2070' && input.LA(1)<='\u218F')||(input.LA(1)>='\u2C00' && input.LA(1)<='\u2FEF')||(input.LA(1)>='\u3001' && input.LA(1)<='\uD7FF')||(input.LA(1)>='\uF900' && input.LA(1)<='\uFDCF')||(input.LA(1)>='\uFDF0' && input.LA(1)<='\uFFFD'))
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(110, 30);
			// ../Grammars/OslcSelect.g:110:30: ( ( PN_CHARS | DOT )* PN_CHARS )?
			int alt6=2;
			try { DebugEnterSubRule(6);
			try { DebugEnterDecision(6, false);
			int LA6_1 = input.LA(1);

			if (((LA6_1>='-' && LA6_1<='.')||(LA6_1>='0' && LA6_1<='9')||(LA6_1>='A' && LA6_1<='Z')||LA6_1=='_'||(LA6_1>='a' && LA6_1<='z')||LA6_1=='\u00B7'||(LA6_1>='\u00C0' && LA6_1<='\u00D6')||(LA6_1>='\u00D8' && LA6_1<='\u00F6')||(LA6_1>='\u00F8' && LA6_1<='\u037D')||(LA6_1>='\u037F' && LA6_1<='\u1FFF')||(LA6_1>='\u200C' && LA6_1<='\u200D')||(LA6_1>='\u203F' && LA6_1<='\u2040')||(LA6_1>='\u2070' && LA6_1<='\u218F')||(LA6_1>='\u2C00' && LA6_1<='\u2FEF')||(LA6_1>='\u3001' && LA6_1<='\uD7FF')||(LA6_1>='\uF900' && LA6_1<='\uFDCF')||(LA6_1>='\uFDF0' && LA6_1<='\uFFFD')))
			{
				alt6 = 1;
			}
			} finally { DebugExitDecision(6); }
			switch (alt6)
			{
			case 1:
				DebugEnterAlt(1);
				// ../Grammars/OslcSelect.g:110:31: ( PN_CHARS | DOT )* PN_CHARS
				{
				DebugLocation(110, 31);
				// ../Grammars/OslcSelect.g:110:31: ( PN_CHARS | DOT )*
				try { DebugEnterSubRule(5);
				while (true)
				{
					int alt5=2;
					try { DebugEnterDecision(5, false);
					int LA5_1 = input.LA(1);

					if ((LA5_1=='-'||(LA5_1>='0' && LA5_1<='9')||(LA5_1>='A' && LA5_1<='Z')||LA5_1=='_'||(LA5_1>='a' && LA5_1<='z')||LA5_1=='\u00B7'||(LA5_1>='\u00C0' && LA5_1<='\u00D6')||(LA5_1>='\u00D8' && LA5_1<='\u00F6')||(LA5_1>='\u00F8' && LA5_1<='\u037D')||(LA5_1>='\u037F' && LA5_1<='\u1FFF')||(LA5_1>='\u200C' && LA5_1<='\u200D')||(LA5_1>='\u203F' && LA5_1<='\u2040')||(LA5_1>='\u2070' && LA5_1<='\u218F')||(LA5_1>='\u2C00' && LA5_1<='\u2FEF')||(LA5_1>='\u3001' && LA5_1<='\uD7FF')||(LA5_1>='\uF900' && LA5_1<='\uFDCF')||(LA5_1>='\uFDF0' && LA5_1<='\uFFFD')))
					{
						int LA5_2 = input.LA(2);

						if (((LA5_2>='-' && LA5_2<='.')||(LA5_2>='0' && LA5_2<='9')||(LA5_2>='A' && LA5_2<='Z')||LA5_2=='_'||(LA5_2>='a' && LA5_2<='z')||LA5_2=='\u00B7'||(LA5_2>='\u00C0' && LA5_2<='\u00D6')||(LA5_2>='\u00D8' && LA5_2<='\u00F6')||(LA5_2>='\u00F8' && LA5_2<='\u037D')||(LA5_2>='\u037F' && LA5_2<='\u1FFF')||(LA5_2>='\u200C' && LA5_2<='\u200D')||(LA5_2>='\u203F' && LA5_2<='\u2040')||(LA5_2>='\u2070' && LA5_2<='\u218F')||(LA5_2>='\u2C00' && LA5_2<='\u2FEF')||(LA5_2>='\u3001' && LA5_2<='\uD7FF')||(LA5_2>='\uF900' && LA5_2<='\uFDCF')||(LA5_2>='\uFDF0' && LA5_2<='\uFFFD')))
						{
							alt5 = 1;
						}


					}
					else if ((LA5_1=='.'))
					{
						alt5 = 1;
					}


					} finally { DebugExitDecision(5); }
					switch ( alt5 )
					{
					case 1:
						DebugEnterAlt(1);
						// ../Grammars/OslcSelect.g:
						{
						DebugLocation(110, 31);
						input.Consume();


						}
						break;

					default:
						goto loop5;
					}
				}

				loop5:
					;

				} finally { DebugExitSubRule(5); }

				DebugLocation(110, 47);
				mPN_CHARS(); 

				}
				break;

			}
			} finally { DebugExitSubRule(6); }


			}

		}
		finally
		{
			TraceOut("PN_LOCAL", 12);
			LeaveRule("PN_LOCAL", 12);
			LeaveRule_PN_LOCAL();
		}
	}
	// $ANTLR end "PN_LOCAL"

	partial void EnterRule_PN_CHARS_BASE();
	partial void LeaveRule_PN_CHARS_BASE();

	// $ANTLR start "PN_CHARS_BASE"
	[GrammarRule("PN_CHARS_BASE")]
	private void mPN_CHARS_BASE()
	{
		EnterRule_PN_CHARS_BASE();
		EnterRule("PN_CHARS_BASE", 13);
		TraceIn("PN_CHARS_BASE", 13);
		try
		{
			// ../Grammars/OslcSelect.g:115:5: ( 'A' .. 'Z' | 'a' .. 'z' | '\\u00C0' .. '\\u00D6' | '\\u00D8' .. '\\u00F6' | '\\u00F8' .. '\\u02FF' | '\\u0370' .. '\\u037D' | '\\u037F' .. '\\u1FFF' | '\\u200C' .. '\\u200D' | '\\u2070' .. '\\u218F' | '\\u2C00' .. '\\u2FEF' | '\\u3001' .. '\\uD7FF' | '\\uF900' .. '\\uFDCF' | '\\uFDF0' .. '\\uFFFD' )
			DebugEnterAlt(1);
			// ../Grammars/OslcSelect.g:
			{
			DebugLocation(115, 5);
			if ((input.LA(1)>='A' && input.LA(1)<='Z')||(input.LA(1)>='a' && input.LA(1)<='z')||(input.LA(1)>='\u00C0' && input.LA(1)<='\u00D6')||(input.LA(1)>='\u00D8' && input.LA(1)<='\u00F6')||(input.LA(1)>='\u00F8' && input.LA(1)<='\u02FF')||(input.LA(1)>='\u0370' && input.LA(1)<='\u037D')||(input.LA(1)>='\u037F' && input.LA(1)<='\u1FFF')||(input.LA(1)>='\u200C' && input.LA(1)<='\u200D')||(input.LA(1)>='\u2070' && input.LA(1)<='\u218F')||(input.LA(1)>='\u2C00' && input.LA(1)<='\u2FEF')||(input.LA(1)>='\u3001' && input.LA(1)<='\uD7FF')||(input.LA(1)>='\uF900' && input.LA(1)<='\uFDCF')||(input.LA(1)>='\uFDF0' && input.LA(1)<='\uFFFD'))
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}


			}

		}
		finally
		{
			TraceOut("PN_CHARS_BASE", 13);
			LeaveRule("PN_CHARS_BASE", 13);
			LeaveRule_PN_CHARS_BASE();
		}
	}
	// $ANTLR end "PN_CHARS_BASE"

	partial void EnterRule_DIGIT();
	partial void LeaveRule_DIGIT();

	// $ANTLR start "DIGIT"
	[GrammarRule("DIGIT")]
	private void mDIGIT()
	{
		EnterRule_DIGIT();
		EnterRule("DIGIT", 14);
		TraceIn("DIGIT", 14);
		try
		{
			// ../Grammars/OslcSelect.g:132:5: ( '0' .. '9' )
			DebugEnterAlt(1);
			// ../Grammars/OslcSelect.g:
			{
			DebugLocation(132, 5);
			if ((input.LA(1)>='0' && input.LA(1)<='9'))
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}


			}

		}
		finally
		{
			TraceOut("DIGIT", 14);
			LeaveRule("DIGIT", 14);
			LeaveRule_DIGIT();
		}
	}
	// $ANTLR end "DIGIT"

	partial void EnterRule_EOL();
	partial void LeaveRule_EOL();

	// $ANTLR start "EOL"
	[GrammarRule("EOL")]
	private void mEOL()
	{
		EnterRule_EOL();
		EnterRule("EOL", 15);
		TraceIn("EOL", 15);
		try
		{
			// ../Grammars/OslcSelect.g:137:5: ( '\\n' | '\\r' )
			DebugEnterAlt(1);
			// ../Grammars/OslcSelect.g:
			{
			DebugLocation(137, 5);
			if (input.LA(1)=='\n'||input.LA(1)=='\r')
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}


			}

		}
		finally
		{
			TraceOut("EOL", 15);
			LeaveRule("EOL", 15);
			LeaveRule_EOL();
		}
	}
	// $ANTLR end "EOL"

	partial void EnterRule_OPEN_CURLY_BRACE();
	partial void LeaveRule_OPEN_CURLY_BRACE();

	// $ANTLR start "OPEN_CURLY_BRACE"
	[GrammarRule("OPEN_CURLY_BRACE")]
	private void mOPEN_CURLY_BRACE()
	{
		EnterRule_OPEN_CURLY_BRACE();
		EnterRule("OPEN_CURLY_BRACE", 16);
		TraceIn("OPEN_CURLY_BRACE", 16);
		try
		{
			int _type = OPEN_CURLY_BRACE;
			int _channel = DefaultTokenChannel;
			// ../Grammars/OslcSelect.g:140:5: ( '{' )
			DebugEnterAlt(1);
			// ../Grammars/OslcSelect.g:140:7: '{'
			{
			DebugLocation(140, 7);
			Match('{'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("OPEN_CURLY_BRACE", 16);
			LeaveRule("OPEN_CURLY_BRACE", 16);
			LeaveRule_OPEN_CURLY_BRACE();
		}
	}
	// $ANTLR end "OPEN_CURLY_BRACE"

	partial void EnterRule_CLOSE_CURLY_BRACE();
	partial void LeaveRule_CLOSE_CURLY_BRACE();

	// $ANTLR start "CLOSE_CURLY_BRACE"
	[GrammarRule("CLOSE_CURLY_BRACE")]
	private void mCLOSE_CURLY_BRACE()
	{
		EnterRule_CLOSE_CURLY_BRACE();
		EnterRule("CLOSE_CURLY_BRACE", 17);
		TraceIn("CLOSE_CURLY_BRACE", 17);
		try
		{
			int _type = CLOSE_CURLY_BRACE;
			int _channel = DefaultTokenChannel;
			// ../Grammars/OslcSelect.g:144:5: ( '}' )
			DebugEnterAlt(1);
			// ../Grammars/OslcSelect.g:144:7: '}'
			{
			DebugLocation(144, 7);
			Match('}'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("CLOSE_CURLY_BRACE", 17);
			LeaveRule("CLOSE_CURLY_BRACE", 17);
			LeaveRule_CLOSE_CURLY_BRACE();
		}
	}
	// $ANTLR end "CLOSE_CURLY_BRACE"

	partial void EnterRule_DOT();
	partial void LeaveRule_DOT();

	// $ANTLR start "DOT"
	[GrammarRule("DOT")]
	private void mDOT()
	{
		EnterRule_DOT();
		EnterRule("DOT", 18);
		TraceIn("DOT", 18);
		try
		{
			int _type = DOT;
			int _channel = DefaultTokenChannel;
			// ../Grammars/OslcSelect.g:148:5: ( '.' )
			DebugEnterAlt(1);
			// ../Grammars/OslcSelect.g:148:7: '.'
			{
			DebugLocation(148, 7);
			Match('.'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("DOT", 18);
			LeaveRule("DOT", 18);
			LeaveRule_DOT();
		}
	}
	// $ANTLR end "DOT"

	partial void EnterRule_PLUS();
	partial void LeaveRule_PLUS();

	// $ANTLR start "PLUS"
	[GrammarRule("PLUS")]
	private void mPLUS()
	{
		EnterRule_PLUS();
		EnterRule("PLUS", 19);
		TraceIn("PLUS", 19);
		try
		{
			int _type = PLUS;
			int _channel = DefaultTokenChannel;
			// ../Grammars/OslcSelect.g:152:5: ( '+' )
			DebugEnterAlt(1);
			// ../Grammars/OslcSelect.g:152:7: '+'
			{
			DebugLocation(152, 7);
			Match('+'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("PLUS", 19);
			LeaveRule("PLUS", 19);
			LeaveRule_PLUS();
		}
	}
	// $ANTLR end "PLUS"

	partial void EnterRule_MINUS();
	partial void LeaveRule_MINUS();

	// $ANTLR start "MINUS"
	[GrammarRule("MINUS")]
	private void mMINUS()
	{
		EnterRule_MINUS();
		EnterRule("MINUS", 20);
		TraceIn("MINUS", 20);
		try
		{
			int _type = MINUS;
			int _channel = DefaultTokenChannel;
			// ../Grammars/OslcSelect.g:156:5: ( '-' )
			DebugEnterAlt(1);
			// ../Grammars/OslcSelect.g:156:7: '-'
			{
			DebugLocation(156, 7);
			Match('-'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("MINUS", 20);
			LeaveRule("MINUS", 20);
			LeaveRule_MINUS();
		}
	}
	// $ANTLR end "MINUS"

	partial void EnterRule_ASTERISK();
	partial void LeaveRule_ASTERISK();

	// $ANTLR start "ASTERISK"
	[GrammarRule("ASTERISK")]
	private void mASTERISK()
	{
		EnterRule_ASTERISK();
		EnterRule("ASTERISK", 21);
		TraceIn("ASTERISK", 21);
		try
		{
			int _type = ASTERISK;
			int _channel = DefaultTokenChannel;
			// ../Grammars/OslcSelect.g:160:5: ( '*' )
			DebugEnterAlt(1);
			// ../Grammars/OslcSelect.g:160:7: '*'
			{
			DebugLocation(160, 7);
			Match('*'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("ASTERISK", 21);
			LeaveRule("ASTERISK", 21);
			LeaveRule_ASTERISK();
		}
	}
	// $ANTLR end "ASTERISK"

	partial void EnterRule_COMMA();
	partial void LeaveRule_COMMA();

	// $ANTLR start "COMMA"
	[GrammarRule("COMMA")]
	private void mCOMMA()
	{
		EnterRule_COMMA();
		EnterRule("COMMA", 22);
		TraceIn("COMMA", 22);
		try
		{
			int _type = COMMA;
			int _channel = DefaultTokenChannel;
			// ../Grammars/OslcSelect.g:164:5: ( ',' )
			DebugEnterAlt(1);
			// ../Grammars/OslcSelect.g:164:7: ','
			{
			DebugLocation(164, 7);
			Match(','); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("COMMA", 22);
			LeaveRule("COMMA", 22);
			LeaveRule_COMMA();
		}
	}
	// $ANTLR end "COMMA"

	partial void EnterRule_NOT();
	partial void LeaveRule_NOT();

	// $ANTLR start "NOT"
	[GrammarRule("NOT")]
	private void mNOT()
	{
		EnterRule_NOT();
		EnterRule("NOT", 23);
		TraceIn("NOT", 23);
		try
		{
			int _type = NOT;
			int _channel = DefaultTokenChannel;
			// ../Grammars/OslcSelect.g:168:5: ( '!' )
			DebugEnterAlt(1);
			// ../Grammars/OslcSelect.g:168:7: '!'
			{
			DebugLocation(168, 7);
			Match('!'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("NOT", 23);
			LeaveRule("NOT", 23);
			LeaveRule_NOT();
		}
	}
	// $ANTLR end "NOT"

	public override void mTokens()
	{
		// ../Grammars/OslcSelect.g:1:8: ( NESTED_PROPERTIES | PREFIXED_NAME | PROPERTIES | WILDCARD | WS | PNAME_NS | PNAME_LN | OPEN_CURLY_BRACE | CLOSE_CURLY_BRACE | DOT | PLUS | MINUS | ASTERISK | COMMA | NOT )
		int alt7=15;
		try { DebugEnterDecision(7, false);
		try
		{
			alt7 = dfa7.Predict(input);
		}
		catch (NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
			throw;
		}
		} finally { DebugExitDecision(7); }
		switch (alt7)
		{
		case 1:
			DebugEnterAlt(1);
			// ../Grammars/OslcSelect.g:1:10: NESTED_PROPERTIES
			{
			DebugLocation(1, 10);
			mNESTED_PROPERTIES(); 

			}
			break;
		case 2:
			DebugEnterAlt(2);
			// ../Grammars/OslcSelect.g:1:28: PREFIXED_NAME
			{
			DebugLocation(1, 28);
			mPREFIXED_NAME(); 

			}
			break;
		case 3:
			DebugEnterAlt(3);
			// ../Grammars/OslcSelect.g:1:42: PROPERTIES
			{
			DebugLocation(1, 42);
			mPROPERTIES(); 

			}
			break;
		case 4:
			DebugEnterAlt(4);
			// ../Grammars/OslcSelect.g:1:53: WILDCARD
			{
			DebugLocation(1, 53);
			mWILDCARD(); 

			}
			break;
		case 5:
			DebugEnterAlt(5);
			// ../Grammars/OslcSelect.g:1:62: WS
			{
			DebugLocation(1, 62);
			mWS(); 

			}
			break;
		case 6:
			DebugEnterAlt(6);
			// ../Grammars/OslcSelect.g:1:65: PNAME_NS
			{
			DebugLocation(1, 65);
			mPNAME_NS(); 

			}
			break;
		case 7:
			DebugEnterAlt(7);
			// ../Grammars/OslcSelect.g:1:74: PNAME_LN
			{
			DebugLocation(1, 74);
			mPNAME_LN(); 

			}
			break;
		case 8:
			DebugEnterAlt(8);
			// ../Grammars/OslcSelect.g:1:83: OPEN_CURLY_BRACE
			{
			DebugLocation(1, 83);
			mOPEN_CURLY_BRACE(); 

			}
			break;
		case 9:
			DebugEnterAlt(9);
			// ../Grammars/OslcSelect.g:1:100: CLOSE_CURLY_BRACE
			{
			DebugLocation(1, 100);
			mCLOSE_CURLY_BRACE(); 

			}
			break;
		case 10:
			DebugEnterAlt(10);
			// ../Grammars/OslcSelect.g:1:118: DOT
			{
			DebugLocation(1, 118);
			mDOT(); 

			}
			break;
		case 11:
			DebugEnterAlt(11);
			// ../Grammars/OslcSelect.g:1:122: PLUS
			{
			DebugLocation(1, 122);
			mPLUS(); 

			}
			break;
		case 12:
			DebugEnterAlt(12);
			// ../Grammars/OslcSelect.g:1:127: MINUS
			{
			DebugLocation(1, 127);
			mMINUS(); 

			}
			break;
		case 13:
			DebugEnterAlt(13);
			// ../Grammars/OslcSelect.g:1:133: ASTERISK
			{
			DebugLocation(1, 133);
			mASTERISK(); 

			}
			break;
		case 14:
			DebugEnterAlt(14);
			// ../Grammars/OslcSelect.g:1:142: COMMA
			{
			DebugLocation(1, 142);
			mCOMMA(); 

			}
			break;
		case 15:
			DebugEnterAlt(15);
			// ../Grammars/OslcSelect.g:1:148: NOT
			{
			DebugLocation(1, 148);
			mNOT(); 

			}
			break;

		}

	}


	#region DFA
	DFA7 dfa7;

	protected override void InitDFAs()
	{
		base.InitDFAs();
		dfa7 = new DFA7(this);
	}

	private class DFA7 : DFA
	{
		private const string DFA7_eotS =
			"\x6\xFFFF\x1\x14\x26\xFFFF\x1\x31\x6\xFFFF\x1\x37\x6\xFFFF\x1\x3D\x2"+
			"\xFFFF\x1\x3F\x1\xFFFF";
		private const string DFA7_eofS =
			"\x40\xFFFF";
		private const string DFA7_minS =
			"\x1\x9\x3\x2D\x1\xFFFF\x1\x2D\x1\x30\x8\xFFFF\x5\x2D\x2\xFFFF\x1B\x2D"+
			"\x1\xFFFF\x5\x2D\x1\xFFFF\x5\x2D\x1\xFFFF\x1\x2D\x1\xFFFF";
		private const string DFA7_maxS =
			"\x4\xFFFD\x1\xFFFF\x2\xFFFD\x8\xFFFF\x5\xFFFD\x2\xFFFF\x1B\xFFFD\x1\xFFFF"+
			"\x5\xFFFD\x1\xFFFF\x5\xFFFD\x1\xFFFF\x1\xFFFD\x1\xFFFF";
		private const string DFA7_acceptS =
			"\x4\xFFFF\x1\x5\x2\xFFFF\x1\x8\x1\x9\x1\xA\x1\xB\x1\xC\x1\xD\x1\xE\x1"+
			"\xF\x5\xFFFF\x1\x6\x1\x7\x1B\xFFFF\x1\x4\x5\xFFFF\x1\x3\x5\xFFFF\x1\x2"+
			"\x1\xFFFF\x1\x1";
		private const string DFA7_specialS =
			"\x40\xFFFF}>";
		private static readonly string[] DFA7_transitionS =
			{
				"\x2\x4\x2\xFFFF\x1\x4\x12\xFFFF\x1\x4\x1\xE\x8\xFFFF\x1\xC\x1\xA\x1"+
				"\xD\x1\xB\x1\x9\xB\xFFFF\x1\x6\x6\xFFFF\x1A\x5\x6\xFFFF\xD\x5\x1\x1"+
				"\x1\x5\x1\x2\x6\x5\x1\x3\x3\x5\x1\x7\x1\xFFFF\x1\x8\x42\xFFFF\x17\x5"+
				"\x1\xFFFF\x1F\x5\x1\xFFFF\x208\x5\x70\xFFFF\xE\x5\x1\xFFFF\x1C81\x5"+
				"\xC\xFFFF\x2\x5\x62\xFFFF\x120\x5\xA70\xFFFF\x3F0\x5\x11\xFFFF\xA7FF"+
				"\x5\x2100\xFFFF\x4D0\x5\x20\xFFFF\x20E\x5",
				"\x1\x10\x1\x11\x1\xFFFF\xA\x10\x1\x6\x6\xFFFF\x1A\x10\x4\xFFFF\x1\x10"+
				"\x1\xFFFF\x4\x10\x1\xF\x15\x10\x3C\xFFFF\x1\x10\x8\xFFFF\x17\x10\x1"+
				"\xFFFF\x1F\x10\x1\xFFFF\x286\x10\x1\xFFFF\x1C81\x10\xC\xFFFF\x2\x10"+
				"\x31\xFFFF\x2\x10\x2F\xFFFF\x120\x10\xA70\xFFFF\x3F0\x10\x11\xFFFF\xA7FF"+
				"\x10\x2100\xFFFF\x4D0\x10\x20\xFFFF\x20E\x10",
				"\x1\x10\x1\x11\x1\xFFFF\xA\x10\x1\x6\x6\xFFFF\x1A\x10\x4\xFFFF\x1\x10"+
				"\x1\xFFFF\x11\x10\x1\x12\x8\x10\x3C\xFFFF\x1\x10\x8\xFFFF\x17\x10\x1"+
				"\xFFFF\x1F\x10\x1\xFFFF\x286\x10\x1\xFFFF\x1C81\x10\xC\xFFFF\x2\x10"+
				"\x31\xFFFF\x2\x10\x2F\xFFFF\x120\x10\xA70\xFFFF\x3F0\x10\x11\xFFFF\xA7FF"+
				"\x10\x2100\xFFFF\x4D0\x10\x20\xFFFF\x20E\x10",
				"\x1\x10\x1\x11\x1\xFFFF\xA\x10\x1\x6\x6\xFFFF\x1A\x10\x4\xFFFF\x1\x10"+
				"\x1\xFFFF\x8\x10\x1\x13\x11\x10\x3C\xFFFF\x1\x10\x8\xFFFF\x17\x10\x1"+
				"\xFFFF\x1F\x10\x1\xFFFF\x286\x10\x1\xFFFF\x1C81\x10\xC\xFFFF\x2\x10"+
				"\x31\xFFFF\x2\x10\x2F\xFFFF\x120\x10\xA70\xFFFF\x3F0\x10\x11\xFFFF\xA7FF"+
				"\x10\x2100\xFFFF\x4D0\x10\x20\xFFFF\x20E\x10",
				"",
				"\x1\x10\x1\x11\x1\xFFFF\xA\x10\x1\x6\x6\xFFFF\x1A\x10\x4\xFFFF\x1\x10"+
				"\x1\xFFFF\x1A\x10\x3C\xFFFF\x1\x10\x8\xFFFF\x17\x10\x1\xFFFF\x1F\x10"+
				"\x1\xFFFF\x286\x10\x1\xFFFF\x1C81\x10\xC\xFFFF\x2\x10\x31\xFFFF\x2\x10"+
				"\x2F\xFFFF\x120\x10\xA70\xFFFF\x3F0\x10\x11\xFFFF\xA7FF\x10\x2100\xFFFF"+
				"\x4D0\x10\x20\xFFFF\x20E\x10",
				"\xA\x15\x7\xFFFF\x1A\x15\x4\xFFFF\x1\x15\x1\xFFFF\x1A\x15\x45\xFFFF"+
				"\x17\x15\x1\xFFFF\x1F\x15\x1\xFFFF\x208\x15\x70\xFFFF\xE\x15\x1\xFFFF"+
				"\x1C81\x15\xC\xFFFF\x2\x15\x62\xFFFF\x120\x15\xA70\xFFFF\x3F0\x15\x11"+
				"\xFFFF\xA7FF\x15\x2100\xFFFF\x4D0\x15\x20\xFFFF\x20E\x15",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\x10\x1\x11\x1\xFFFF\xA\x10\x1\x6\x6\xFFFF\x1A\x10\x4\xFFFF\x1\x10"+
				"\x1\xFFFF\x12\x10\x1\x16\x7\x10\x3C\xFFFF\x1\x10\x8\xFFFF\x17\x10\x1"+
				"\xFFFF\x1F\x10\x1\xFFFF\x286\x10\x1\xFFFF\x1C81\x10\xC\xFFFF\x2\x10"+
				"\x31\xFFFF\x2\x10\x2F\xFFFF\x120\x10\xA70\xFFFF\x3F0\x10\x11\xFFFF\xA7FF"+
				"\x10\x2100\xFFFF\x4D0\x10\x20\xFFFF\x20E\x10",
				"\x1\x10\x1\x11\x1\xFFFF\xA\x10\x1\x6\x6\xFFFF\x1A\x10\x4\xFFFF\x1\x10"+
				"\x1\xFFFF\x1A\x10\x3C\xFFFF\x1\x10\x8\xFFFF\x17\x10\x1\xFFFF\x1F\x10"+
				"\x1\xFFFF\x286\x10\x1\xFFFF\x1C81\x10\xC\xFFFF\x2\x10\x31\xFFFF\x2\x10"+
				"\x2F\xFFFF\x120\x10\xA70\xFFFF\x3F0\x10\x11\xFFFF\xA7FF\x10\x2100\xFFFF"+
				"\x4D0\x10\x20\xFFFF\x20E\x10",
				"\x1\x10\x1\x11\x1\xFFFF\xA\x10\x7\xFFFF\x1A\x10\x4\xFFFF\x1\x10\x1"+
				"\xFFFF\x1A\x10\x3C\xFFFF\x1\x10\x8\xFFFF\x17\x10\x1\xFFFF\x1F\x10\x1"+
				"\xFFFF\x286\x10\x1\xFFFF\x1C81\x10\xC\xFFFF\x2\x10\x31\xFFFF\x2\x10"+
				"\x2F\xFFFF\x120\x10\xA70\xFFFF\x3F0\x10\x11\xFFFF\xA7FF\x10\x2100\xFFFF"+
				"\x4D0\x10\x20\xFFFF\x20E\x10",
				"\x1\x10\x1\x11\x1\xFFFF\xA\x10\x1\x6\x6\xFFFF\x1A\x10\x4\xFFFF\x1\x10"+
				"\x1\xFFFF\x4\x10\x1\x17\x9\x10\x1\x18\xB\x10\x3C\xFFFF\x1\x10\x8\xFFFF"+
				"\x17\x10\x1\xFFFF\x1F\x10\x1\xFFFF\x286\x10\x1\xFFFF\x1C81\x10\xC\xFFFF"+
				"\x2\x10\x31\xFFFF\x2\x10\x2F\xFFFF\x120\x10\xA70\xFFFF\x3F0\x10\x11"+
				"\xFFFF\xA7FF\x10\x2100\xFFFF\x4D0\x10\x20\xFFFF\x20E\x10",
				"\x1\x10\x1\x11\x1\xFFFF\xA\x10\x1\x6\x6\xFFFF\x1A\x10\x4\xFFFF\x1\x10"+
				"\x1\xFFFF\xB\x10\x1\x19\xE\x10\x3C\xFFFF\x1\x10\x8\xFFFF\x17\x10\x1"+
				"\xFFFF\x1F\x10\x1\xFFFF\x286\x10\x1\xFFFF\x1C81\x10\xC\xFFFF\x2\x10"+
				"\x31\xFFFF\x2\x10\x2F\xFFFF\x120\x10\xA70\xFFFF\x3F0\x10\x11\xFFFF\xA7FF"+
				"\x10\x2100\xFFFF\x4D0\x10\x20\xFFFF\x20E\x10",
				"",
				"",
				"\x1\x10\x1\x11\x1\xFFFF\xA\x10\x1\x6\x6\xFFFF\x1A\x10\x4\xFFFF\x1\x10"+
				"\x1\xFFFF\x13\x10\x1\x1A\x6\x10\x3C\xFFFF\x1\x10\x8\xFFFF\x17\x10\x1"+
				"\xFFFF\x1F\x10\x1\xFFFF\x286\x10\x1\xFFFF\x1C81\x10\xC\xFFFF\x2\x10"+
				"\x31\xFFFF\x2\x10\x2F\xFFFF\x120\x10\xA70\xFFFF\x3F0\x10\x11\xFFFF\xA7FF"+
				"\x10\x2100\xFFFF\x4D0\x10\x20\xFFFF\x20E\x10",
				"\x1\x10\x1\x11\x1\xFFFF\xA\x10\x1\x6\x6\xFFFF\x1A\x10\x4\xFFFF\x1\x10"+
				"\x1\xFFFF\x5\x10\x1\x1B\x14\x10\x3C\xFFFF\x1\x10\x8\xFFFF\x17\x10\x1"+
				"\xFFFF\x1F\x10\x1\xFFFF\x286\x10\x1\xFFFF\x1C81\x10\xC\xFFFF\x2\x10"+
				"\x31\xFFFF\x2\x10\x2F\xFFFF\x120\x10\xA70\xFFFF\x3F0\x10\x11\xFFFF\xA7FF"+
				"\x10\x2100\xFFFF\x4D0\x10\x20\xFFFF\x20E\x10",
				"\x1\x10\x1\x11\x1\xFFFF\xA\x10\x1\x6\x6\xFFFF\x1A\x10\x4\xFFFF\x1\x10"+
				"\x1\xFFFF\xF\x10\x1\x1C\xA\x10\x3C\xFFFF\x1\x10\x8\xFFFF\x17\x10\x1"+
				"\xFFFF\x1F\x10\x1\xFFFF\x286\x10\x1\xFFFF\x1C81\x10\xC\xFFFF\x2\x10"+
				"\x31\xFFFF\x2\x10\x2F\xFFFF\x120\x10\xA70\xFFFF\x3F0\x10\x11\xFFFF\xA7FF"+
				"\x10\x2100\xFFFF\x4D0\x10\x20\xFFFF\x20E\x10",
				"\x1\x10\x1\x11\x1\xFFFF\xA\x10\x1\x6\x6\xFFFF\x1A\x10\x4\xFFFF\x1\x10"+
				"\x1\xFFFF\x3\x10\x1\x1D\x16\x10\x3C\xFFFF\x1\x10\x8\xFFFF\x17\x10\x1"+
				"\xFFFF\x1F\x10\x1\xFFFF\x286\x10\x1\xFFFF\x1C81\x10\xC\xFFFF\x2\x10"+
				"\x31\xFFFF\x2\x10\x2F\xFFFF\x120\x10\xA70\xFFFF\x3F0\x10\x11\xFFFF\xA7FF"+
				"\x10\x2100\xFFFF\x4D0\x10\x20\xFFFF\x20E\x10",
				"\x1\x10\x1\x11\x1\xFFFF\xA\x10\x1\x6\x6\xFFFF\x1A\x10\x4\xFFFF\x1\x10"+
				"\x1\xFFFF\x4\x10\x1\x1E\x15\x10\x3C\xFFFF\x1\x10\x8\xFFFF\x17\x10\x1"+
				"\xFFFF\x1F\x10\x1\xFFFF\x286\x10\x1\xFFFF\x1C81\x10\xC\xFFFF\x2\x10"+
				"\x31\xFFFF\x2\x10\x2F\xFFFF\x120\x10\xA70\xFFFF\x3F0\x10\x11\xFFFF\xA7FF"+
				"\x10\x2100\xFFFF\x4D0\x10\x20\xFFFF\x20E\x10",
				"\x1\x10\x1\x11\x1\xFFFF\xA\x10\x1\x6\x6\xFFFF\x1A\x10\x4\xFFFF\x1\x10"+
				"\x1\xFFFF\x8\x10\x1\x1F\x11\x10\x3C\xFFFF\x1\x10\x8\xFFFF\x17\x10\x1"+
				"\xFFFF\x1F\x10\x1\xFFFF\x286\x10\x1\xFFFF\x1C81\x10\xC\xFFFF\x2\x10"+
				"\x31\xFFFF\x2\x10\x2F\xFFFF\x120\x10\xA70\xFFFF\x3F0\x10\x11\xFFFF\xA7FF"+
				"\x10\x2100\xFFFF\x4D0\x10\x20\xFFFF\x20E\x10",
				"\x1\x10\x1\x11\x1\xFFFF\xA\x10\x1\x6\x6\xFFFF\x1A\x10\x4\xFFFF\x1\x10"+
				"\x1\xFFFF\x4\x10\x1\x20\x15\x10\x3C\xFFFF\x1\x10\x8\xFFFF\x17\x10\x1"+
				"\xFFFF\x1F\x10\x1\xFFFF\x286\x10\x1\xFFFF\x1C81\x10\xC\xFFFF\x2\x10"+
				"\x31\xFFFF\x2\x10\x2F\xFFFF\x120\x10\xA70\xFFFF\x3F0\x10\x11\xFFFF\xA7FF"+
				"\x10\x2100\xFFFF\x4D0\x10\x20\xFFFF\x20E\x10",
				"\x1\x10\x1\x11\x1\xFFFF\xA\x10\x1\x6\x6\xFFFF\x1A\x10\x4\xFFFF\x1\x10"+
				"\x1\xFFFF\x2\x10\x1\x21\x17\x10\x3C\xFFFF\x1\x10\x8\xFFFF\x17\x10\x1"+
				"\xFFFF\x1F\x10\x1\xFFFF\x286\x10\x1\xFFFF\x1C81\x10\xC\xFFFF\x2\x10"+
				"\x31\xFFFF\x2\x10\x2F\xFFFF\x120\x10\xA70\xFFFF\x3F0\x10\x11\xFFFF\xA7FF"+
				"\x10\x2100\xFFFF\x4D0\x10\x20\xFFFF\x20E\x10",
				"\x1\x10\x1\x11\x1\xFFFF\xA\x10\x1\x6\x6\xFFFF\x1A\x10\x4\xFFFF\x1\x10"+
				"\x1\xFFFF\x3\x10\x1\x22\x16\x10\x3C\xFFFF\x1\x10\x8\xFFFF\x17\x10\x1"+
				"\xFFFF\x1F\x10\x1\xFFFF\x286\x10\x1\xFFFF\x1C81\x10\xC\xFFFF\x2\x10"+
				"\x31\xFFFF\x2\x10\x2F\xFFFF\x120\x10\xA70\xFFFF\x3F0\x10\x11\xFFFF\xA7FF"+
				"\x10\x2100\xFFFF\x4D0\x10\x20\xFFFF\x20E\x10",
				"\x1\x10\x1\x11\x1\xFFFF\xA\x10\x1\x6\x6\xFFFF\x1A\x10\x4\xFFFF\x1\x10"+
				"\x1\xFFFF\x17\x10\x1\x23\x2\x10\x3C\xFFFF\x1\x10\x8\xFFFF\x17\x10\x1"+
				"\xFFFF\x1F\x10\x1\xFFFF\x286\x10\x1\xFFFF\x1C81\x10\xC\xFFFF\x2\x10"+
				"\x31\xFFFF\x2\x10\x2F\xFFFF\x120\x10\xA70\xFFFF\x3F0\x10\x11\xFFFF\xA7FF"+
				"\x10\x2100\xFFFF\x4D0\x10\x20\xFFFF\x20E\x10",
				"\x1\x10\x1\x11\x1\xFFFF\xA\x10\x1\x6\x6\xFFFF\x1A\x10\x4\xFFFF\x1\x10"+
				"\x1\xFFFF\x11\x10\x1\x24\x8\x10\x3C\xFFFF\x1\x10\x8\xFFFF\x17\x10\x1"+
				"\xFFFF\x1F\x10\x1\xFFFF\x286\x10\x1\xFFFF\x1C81\x10\xC\xFFFF\x2\x10"+
				"\x31\xFFFF\x2\x10\x2F\xFFFF\x120\x10\xA70\xFFFF\x3F0\x10\x11\xFFFF\xA7FF"+
				"\x10\x2100\xFFFF\x4D0\x10\x20\xFFFF\x20E\x10",
				"\x1\x10\x1\x11\x1\xFFFF\xA\x10\x1\x6\x6\xFFFF\x1A\x10\x4\xFFFF\x1\x10"+
				"\x1\xFFFF\x1\x25\x19\x10\x3C\xFFFF\x1\x10\x8\xFFFF\x17\x10\x1\xFFFF"+
				"\x1F\x10\x1\xFFFF\x286\x10\x1\xFFFF\x1C81\x10\xC\xFFFF\x2\x10\x31\xFFFF"+
				"\x2\x10\x2F\xFFFF\x120\x10\xA70\xFFFF\x3F0\x10\x11\xFFFF\xA7FF\x10\x2100"+
				"\xFFFF\x4D0\x10\x20\xFFFF\x20E\x10",
				"\x1\x10\x1\x11\x1\xFFFF\xA\x10\x1\x6\x6\xFFFF\x1A\x10\x4\xFFFF\x1\x26"+
				"\x1\xFFFF\x1A\x10\x3C\xFFFF\x1\x10\x8\xFFFF\x17\x10\x1\xFFFF\x1F\x10"+
				"\x1\xFFFF\x286\x10\x1\xFFFF\x1C81\x10\xC\xFFFF\x2\x10\x31\xFFFF\x2\x10"+
				"\x2F\xFFFF\x120\x10\xA70\xFFFF\x3F0\x10\x11\xFFFF\xA7FF\x10\x2100\xFFFF"+
				"\x4D0\x10\x20\xFFFF\x20E\x10",
				"\x1\x10\x1\x11\x1\xFFFF\xA\x10\x1\x6\x6\xFFFF\x1A\x10\x4\xFFFF\x1\x10"+
				"\x1\xFFFF\x4\x10\x1\x27\x15\x10\x3C\xFFFF\x1\x10\x8\xFFFF\x17\x10\x1"+
				"\xFFFF\x1F\x10\x1\xFFFF\x286\x10\x1\xFFFF\x1C81\x10\xC\xFFFF\x2\x10"+
				"\x31\xFFFF\x2\x10\x2F\xFFFF\x120\x10\xA70\xFFFF\x3F0\x10\x11\xFFFF\xA7FF"+
				"\x10\x2100\xFFFF\x4D0\x10\x20\xFFFF\x20E\x10",
				"\x1\x10\x1\x11\x1\xFFFF\xA\x10\x1\x6\x6\xFFFF\x1A\x10\x4\xFFFF\x1\x10"+
				"\x1\xFFFF\x13\x10\x1\x28\x6\x10\x3C\xFFFF\x1\x10\x8\xFFFF\x17\x10\x1"+
				"\xFFFF\x1F\x10\x1\xFFFF\x286\x10\x1\xFFFF\x1C81\x10\xC\xFFFF\x2\x10"+
				"\x31\xFFFF\x2\x10\x2F\xFFFF\x120\x10\xA70\xFFFF\x3F0\x10\x11\xFFFF\xA7FF"+
				"\x10\x2100\xFFFF\x4D0\x10\x20\xFFFF\x20E\x10",
				"\x1\x10\x1\x11\x1\xFFFF\xA\x10\x1\x6\x6\xFFFF\x1A\x10\x4\xFFFF\x1\x10"+
				"\x1\xFFFF\x11\x10\x1\x29\x8\x10\x3C\xFFFF\x1\x10\x8\xFFFF\x17\x10\x1"+
				"\xFFFF\x1F\x10\x1\xFFFF\x286\x10\x1\xFFFF\x1C81\x10\xC\xFFFF\x2\x10"+
				"\x31\xFFFF\x2\x10\x2F\xFFFF\x120\x10\xA70\xFFFF\x3F0\x10\x11\xFFFF\xA7FF"+
				"\x10\x2100\xFFFF\x4D0\x10\x20\xFFFF\x20E\x10",
				"\x1\x10\x1\x11\x1\xFFFF\xA\x10\x1\x6\x6\xFFFF\x1A\x10\x4\xFFFF\x1\x10"+
				"\x1\xFFFF\xF\x10\x1\x2A\xA\x10\x3C\xFFFF\x1\x10\x8\xFFFF\x17\x10\x1"+
				"\xFFFF\x1F\x10\x1\xFFFF\x286\x10\x1\xFFFF\x1C81\x10\xC\xFFFF\x2\x10"+
				"\x31\xFFFF\x2\x10\x2F\xFFFF\x120\x10\xA70\xFFFF\x3F0\x10\x11\xFFFF\xA7FF"+
				"\x10\x2100\xFFFF\x4D0\x10\x20\xFFFF\x20E\x10",
				"\x1\x10\x1\x11\x1\xFFFF\xA\x10\x1\x6\x6\xFFFF\x1A\x10\x4\xFFFF\x1\x10"+
				"\x1\xFFFF\x3\x10\x1\x2B\x16\x10\x3C\xFFFF\x1\x10\x8\xFFFF\x17\x10\x1"+
				"\xFFFF\x1F\x10\x1\xFFFF\x286\x10\x1\xFFFF\x1C81\x10\xC\xFFFF\x2\x10"+
				"\x31\xFFFF\x2\x10\x2F\xFFFF\x120\x10\xA70\xFFFF\x3F0\x10\x11\xFFFF\xA7FF"+
				"\x10\x2100\xFFFF\x4D0\x10\x20\xFFFF\x20E\x10",
				"\x1\x10\x1\x11\x1\xFFFF\xA\x10\x1\x6\x6\xFFFF\x1A\x10\x4\xFFFF\x1\x10"+
				"\x1\xFFFF\x8\x10\x1\x2C\x11\x10\x3C\xFFFF\x1\x10\x8\xFFFF\x17\x10\x1"+
				"\xFFFF\x1F\x10\x1\xFFFF\x286\x10\x1\xFFFF\x1C81\x10\xC\xFFFF\x2\x10"+
				"\x31\xFFFF\x2\x10\x2F\xFFFF\x120\x10\xA70\xFFFF\x3F0\x10\x11\xFFFF\xA7FF"+
				"\x10\x2100\xFFFF\x4D0\x10\x20\xFFFF\x20E\x10",
				"\x1\x10\x1\x11\x1\xFFFF\xA\x10\x1\x6\x6\xFFFF\x1A\x10\x4\xFFFF\x1\x10"+
				"\x1\xFFFF\x3\x10\x1\x2D\x16\x10\x3C\xFFFF\x1\x10\x8\xFFFF\x17\x10\x1"+
				"\xFFFF\x1F\x10\x1\xFFFF\x286\x10\x1\xFFFF\x1C81\x10\xC\xFFFF\x2\x10"+
				"\x31\xFFFF\x2\x10\x2F\xFFFF\x120\x10\xA70\xFFFF\x3F0\x10\x11\xFFFF\xA7FF"+
				"\x10\x2100\xFFFF\x4D0\x10\x20\xFFFF\x20E\x10",
				"\x1\x10\x1\x11\x1\xFFFF\xA\x10\x1\x6\x6\xFFFF\x1A\x10\x4\xFFFF\x1\x10"+
				"\x1\xFFFF\x11\x10\x1\x2E\x8\x10\x3C\xFFFF\x1\x10\x8\xFFFF\x17\x10\x1"+
				"\xFFFF\x1F\x10\x1\xFFFF\x286\x10\x1\xFFFF\x1C81\x10\xC\xFFFF\x2\x10"+
				"\x31\xFFFF\x2\x10\x2F\xFFFF\x120\x10\xA70\xFFFF\x3F0\x10\x11\xFFFF\xA7FF"+
				"\x10\x2100\xFFFF\x4D0\x10\x20\xFFFF\x20E\x10",
				"\x1\x10\x1\x11\x1\xFFFF\xA\x10\x1\x6\x6\xFFFF\x1A\x10\x4\xFFFF\x1\x2F"+
				"\x1\xFFFF\x1A\x10\x3C\xFFFF\x1\x10\x8\xFFFF\x17\x10\x1\xFFFF\x1F\x10"+
				"\x1\xFFFF\x286\x10\x1\xFFFF\x1C81\x10\xC\xFFFF\x2\x10\x31\xFFFF\x2\x10"+
				"\x2F\xFFFF\x120\x10\xA70\xFFFF\x3F0\x10\x11\xFFFF\xA7FF\x10\x2100\xFFFF"+
				"\x4D0\x10\x20\xFFFF\x20E\x10",
				"\x1\x10\x1\x11\x1\xFFFF\xA\x10\x1\x6\x6\xFFFF\x1A\x10\x4\xFFFF\x1\x10"+
				"\x1\xFFFF\x4\x10\x1\x30\x15\x10\x3C\xFFFF\x1\x10\x8\xFFFF\x17\x10\x1"+
				"\xFFFF\x1F\x10\x1\xFFFF\x286\x10\x1\xFFFF\x1C81\x10\xC\xFFFF\x2\x10"+
				"\x31\xFFFF\x2\x10\x2F\xFFFF\x120\x10\xA70\xFFFF\x3F0\x10\x11\xFFFF\xA7FF"+
				"\x10\x2100\xFFFF\x4D0\x10\x20\xFFFF\x20E\x10",
				"\x1\x10\x1\x11\x1\xFFFF\xA\x10\x1\x6\x6\xFFFF\x1A\x10\x4\xFFFF\x1\x10"+
				"\x1\xFFFF\x1A\x10\x3C\xFFFF\x1\x10\x8\xFFFF\x17\x10\x1\xFFFF\x1F\x10"+
				"\x1\xFFFF\x286\x10\x1\xFFFF\x1C81\x10\xC\xFFFF\x2\x10\x31\xFFFF\x2\x10"+
				"\x2F\xFFFF\x120\x10\xA70\xFFFF\x3F0\x10\x11\xFFFF\xA7FF\x10\x2100\xFFFF"+
				"\x4D0\x10\x20\xFFFF\x20E\x10",
				"\x1\x10\x1\x11\x1\xFFFF\xA\x10\x1\x6\x6\xFFFF\x1A\x10\x4\xFFFF\x1\x10"+
				"\x1\xFFFF\xE\x10\x1\x32\xB\x10\x3C\xFFFF\x1\x10\x8\xFFFF\x17\x10\x1"+
				"\xFFFF\x1F\x10\x1\xFFFF\x286\x10\x1\xFFFF\x1C81\x10\xC\xFFFF\x2\x10"+
				"\x31\xFFFF\x2\x10\x2F\xFFFF\x120\x10\xA70\xFFFF\x3F0\x10\x11\xFFFF\xA7FF"+
				"\x10\x2100\xFFFF\x4D0\x10\x20\xFFFF\x20E\x10",
				"\x1\x10\x1\x11\x1\xFFFF\xA\x10\x1\x6\x6\xFFFF\x1A\x10\x4\xFFFF\x1\x10"+
				"\x1\xFFFF\xD\x10\x1\x33\xC\x10\x3C\xFFFF\x1\x10\x8\xFFFF\x17\x10\x1"+
				"\xFFFF\x1F\x10\x1\xFFFF\x286\x10\x1\xFFFF\x1C81\x10\xC\xFFFF\x2\x10"+
				"\x31\xFFFF\x2\x10\x2F\xFFFF\x120\x10\xA70\xFFFF\x3F0\x10\x11\xFFFF\xA7FF"+
				"\x10\x2100\xFFFF\x4D0\x10\x20\xFFFF\x20E\x10",
				"\x1\x10\x1\x11\x1\xFFFF\xA\x10\x1\x6\x6\xFFFF\x1A\x10\x4\xFFFF\x1\x10"+
				"\x1\xFFFF\x12\x10\x1\x34\x7\x10\x3C\xFFFF\x1\x10\x8\xFFFF\x17\x10\x1"+
				"\xFFFF\x1F\x10\x1\xFFFF\x286\x10\x1\xFFFF\x1C81\x10\xC\xFFFF\x2\x10"+
				"\x31\xFFFF\x2\x10\x2F\xFFFF\x120\x10\xA70\xFFFF\x3F0\x10\x11\xFFFF\xA7FF"+
				"\x10\x2100\xFFFF\x4D0\x10\x20\xFFFF\x20E\x10",
				"",
				"\x1\x10\x1\x11\x1\xFFFF\xA\x10\x1\x6\x6\xFFFF\x1A\x10\x4\xFFFF\x1\x10"+
				"\x1\xFFFF\xF\x10\x1\x35\xA\x10\x3C\xFFFF\x1\x10\x8\xFFFF\x17\x10\x1"+
				"\xFFFF\x1F\x10\x1\xFFFF\x286\x10\x1\xFFFF\x1C81\x10\xC\xFFFF\x2\x10"+
				"\x31\xFFFF\x2\x10\x2F\xFFFF\x120\x10\xA70\xFFFF\x3F0\x10\x11\xFFFF\xA7FF"+
				"\x10\x2100\xFFFF\x4D0\x10\x20\xFFFF\x20E\x10",
				"\x1\x10\x1\x11\x1\xFFFF\xA\x10\x1\x6\x6\xFFFF\x1A\x10\x4\xFFFF\x1\x10"+
				"\x1\xFFFF\x1\x36\x19\x10\x3C\xFFFF\x1\x10\x8\xFFFF\x17\x10\x1\xFFFF"+
				"\x1F\x10\x1\xFFFF\x286\x10\x1\xFFFF\x1C81\x10\xC\xFFFF\x2\x10\x31\xFFFF"+
				"\x2\x10\x2F\xFFFF\x120\x10\xA70\xFFFF\x3F0\x10\x11\xFFFF\xA7FF\x10\x2100"+
				"\xFFFF\x4D0\x10\x20\xFFFF\x20E\x10",
				"\x1\x10\x1\x11\x1\xFFFF\xA\x10\x1\x6\x6\xFFFF\x1A\x10\x4\xFFFF\x1\x10"+
				"\x1\xFFFF\x1A\x10\x3C\xFFFF\x1\x10\x8\xFFFF\x17\x10\x1\xFFFF\x1F\x10"+
				"\x1\xFFFF\x286\x10\x1\xFFFF\x1C81\x10\xC\xFFFF\x2\x10\x31\xFFFF\x2\x10"+
				"\x2F\xFFFF\x120\x10\xA70\xFFFF\x3F0\x10\x11\xFFFF\xA7FF\x10\x2100\xFFFF"+
				"\x4D0\x10\x20\xFFFF\x20E\x10",
				"\x1\x10\x1\x11\x1\xFFFF\xA\x10\x1\x6\x6\xFFFF\x1A\x10\x4\xFFFF\x1\x10"+
				"\x1\xFFFF\x4\x10\x1\x38\x15\x10\x3C\xFFFF\x1\x10\x8\xFFFF\x17\x10\x1"+
				"\xFFFF\x1F\x10\x1\xFFFF\x286\x10\x1\xFFFF\x1C81\x10\xC\xFFFF\x2\x10"+
				"\x31\xFFFF\x2\x10\x2F\xFFFF\x120\x10\xA70\xFFFF\x3F0\x10\x11\xFFFF\xA7FF"+
				"\x10\x2100\xFFFF\x4D0\x10\x20\xFFFF\x20E\x10",
				"\x1\x10\x1\x11\x1\xFFFF\xA\x10\x1\x6\x6\xFFFF\x1A\x10\x4\xFFFF\x1\x10"+
				"\x1\xFFFF\xC\x10\x1\x39\xD\x10\x3C\xFFFF\x1\x10\x8\xFFFF\x17\x10\x1"+
				"\xFFFF\x1F\x10\x1\xFFFF\x286\x10\x1\xFFFF\x1C81\x10\xC\xFFFF\x2\x10"+
				"\x31\xFFFF\x2\x10\x2F\xFFFF\x120\x10\xA70\xFFFF\x3F0\x10\x11\xFFFF\xA7FF"+
				"\x10\x2100\xFFFF\x4D0\x10\x20\xFFFF\x20E\x10",
				"",
				"\x1\x10\x1\x11\x1\xFFFF\xA\x10\x1\x6\x6\xFFFF\x1A\x10\x4\xFFFF\x1\x10"+
				"\x1\xFFFF\x11\x10\x1\x3A\x8\x10\x3C\xFFFF\x1\x10\x8\xFFFF\x17\x10\x1"+
				"\xFFFF\x1F\x10\x1\xFFFF\x286\x10\x1\xFFFF\x1C81\x10\xC\xFFFF\x2\x10"+
				"\x31\xFFFF\x2\x10\x2F\xFFFF\x120\x10\xA70\xFFFF\x3F0\x10\x11\xFFFF\xA7FF"+
				"\x10\x2100\xFFFF\x4D0\x10\x20\xFFFF\x20E\x10",
				"\x1\x10\x1\x11\x1\xFFFF\xA\x10\x1\x6\x6\xFFFF\x1A\x10\x4\xFFFF\x1\x10"+
				"\x1\xFFFF\x4\x10\x1\x3B\x15\x10\x3C\xFFFF\x1\x10\x8\xFFFF\x17\x10\x1"+
				"\xFFFF\x1F\x10\x1\xFFFF\x286\x10\x1\xFFFF\x1C81\x10\xC\xFFFF\x2\x10"+
				"\x31\xFFFF\x2\x10\x2F\xFFFF\x120\x10\xA70\xFFFF\x3F0\x10\x11\xFFFF\xA7FF"+
				"\x10\x2100\xFFFF\x4D0\x10\x20\xFFFF\x20E\x10",
				"\x1\x10\x1\x11\x1\xFFFF\xA\x10\x1\x6\x6\xFFFF\x1A\x10\x4\xFFFF\x1\x10"+
				"\x1\xFFFF\x13\x10\x1\x3C\x6\x10\x3C\xFFFF\x1\x10\x8\xFFFF\x17\x10\x1"+
				"\xFFFF\x1F\x10\x1\xFFFF\x286\x10\x1\xFFFF\x1C81\x10\xC\xFFFF\x2\x10"+
				"\x31\xFFFF\x2\x10\x2F\xFFFF\x120\x10\xA70\xFFFF\x3F0\x10\x11\xFFFF\xA7FF"+
				"\x10\x2100\xFFFF\x4D0\x10\x20\xFFFF\x20E\x10",
				"\x1\x10\x1\x11\x1\xFFFF\xA\x10\x1\x6\x6\xFFFF\x1A\x10\x4\xFFFF\x1\x10"+
				"\x1\xFFFF\x1A\x10\x3C\xFFFF\x1\x10\x8\xFFFF\x17\x10\x1\xFFFF\x1F\x10"+
				"\x1\xFFFF\x286\x10\x1\xFFFF\x1C81\x10\xC\xFFFF\x2\x10\x31\xFFFF\x2\x10"+
				"\x2F\xFFFF\x120\x10\xA70\xFFFF\x3F0\x10\x11\xFFFF\xA7FF\x10\x2100\xFFFF"+
				"\x4D0\x10\x20\xFFFF\x20E\x10",
				"\x1\x10\x1\x11\x1\xFFFF\xA\x10\x1\x6\x6\xFFFF\x1A\x10\x4\xFFFF\x1\x10"+
				"\x1\xFFFF\x18\x10\x1\x3E\x1\x10\x3C\xFFFF\x1\x10\x8\xFFFF\x17\x10\x1"+
				"\xFFFF\x1F\x10\x1\xFFFF\x286\x10\x1\xFFFF\x1C81\x10\xC\xFFFF\x2\x10"+
				"\x31\xFFFF\x2\x10\x2F\xFFFF\x120\x10\xA70\xFFFF\x3F0\x10\x11\xFFFF\xA7FF"+
				"\x10\x2100\xFFFF\x4D0\x10\x20\xFFFF\x20E\x10",
				"",
				"\x1\x10\x1\x11\x1\xFFFF\xA\x10\x1\x6\x6\xFFFF\x1A\x10\x4\xFFFF\x1\x10"+
				"\x1\xFFFF\x1A\x10\x3C\xFFFF\x1\x10\x8\xFFFF\x17\x10\x1\xFFFF\x1F\x10"+
				"\x1\xFFFF\x286\x10\x1\xFFFF\x1C81\x10\xC\xFFFF\x2\x10\x31\xFFFF\x2\x10"+
				"\x2F\xFFFF\x120\x10\xA70\xFFFF\x3F0\x10\x11\xFFFF\xA7FF\x10\x2100\xFFFF"+
				"\x4D0\x10\x20\xFFFF\x20E\x10",
				""
			};

		private static readonly short[] DFA7_eot = DFA.UnpackEncodedString(DFA7_eotS);
		private static readonly short[] DFA7_eof = DFA.UnpackEncodedString(DFA7_eofS);
		private static readonly char[] DFA7_min = DFA.UnpackEncodedStringToUnsignedChars(DFA7_minS);
		private static readonly char[] DFA7_max = DFA.UnpackEncodedStringToUnsignedChars(DFA7_maxS);
		private static readonly short[] DFA7_accept = DFA.UnpackEncodedString(DFA7_acceptS);
		private static readonly short[] DFA7_special = DFA.UnpackEncodedString(DFA7_specialS);
		private static readonly short[][] DFA7_transition;

		static DFA7()
		{
			int numStates = DFA7_transitionS.Length;
			DFA7_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA7_transition[i] = DFA.UnpackEncodedString(DFA7_transitionS[i]);
			}
		}

		public DFA7( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 7;
			this.eot = DFA7_eot;
			this.eof = DFA7_eof;
			this.min = DFA7_min;
			this.max = DFA7_max;
			this.accept = DFA7_accept;
			this.special = DFA7_special;
			this.transition = DFA7_transition;
		}

		public override string Description { get { return "1:1: Tokens : ( NESTED_PROPERTIES | PREFIXED_NAME | PROPERTIES | WILDCARD | WS | PNAME_NS | PNAME_LN | OPEN_CURLY_BRACE | CLOSE_CURLY_BRACE | DOT | PLUS | MINUS | ASTERISK | COMMA | NOT );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

 
	#endregion

}
