//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 3.5
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// $ANTLR 3.5 ../Grammars/OslcWhere.g 2013-06-26 18:03:03

// The variable 'variable' is assigned but its value is never used.
#pragma warning disable 219
// Unreachable code detected.
#pragma warning disable 162
// Missing XML comment for publicly visible type or member 'Type_or_Member'
#pragma warning disable 1591
// CLS compliance checking will not be performed on 'type' because it is not visible from outside this assembly.
#pragma warning disable 3019


using System.Collections.Generic;
using Antlr.Runtime;
using Antlr.Runtime.Misc;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "3.5")]
[System.CLSCompliant(false)]
public partial class OslcWhereLexer : Antlr.Runtime.Lexer
{
	public const int EOF=-1;
	public const int T__50=50;
	public const int T__51=51;
	public const int T__52=52;
	public const int ALPHA_CHARS=4;
	public const int AND=5;
	public const int ASTERISK=6;
	public const int BOOLEAN=7;
	public const int CLOSE_BRACE=8;
	public const int CLOSE_CURLY_BRACE=9;
	public const int CLOSE_SQUARE_BRACE=10;
	public const int COMMA=11;
	public const int COMPOUND_TERM=12;
	public const int DECIMAL=13;
	public const int DIGIT=14;
	public const int DOT=15;
	public const int ECHAR=16;
	public const int EOL=17;
	public const int EQUAL=18;
	public const int GREATER=19;
	public const int GREATER_EQUAL=20;
	public const int IN_TERM=21;
	public const int IN_VALUES=22;
	public const int IRI_REF=23;
	public const int LANGED_VALUE=24;
	public const int LANGTAG=25;
	public const int LESS=26;
	public const int LESS_EQUAL=27;
	public const int MINUS=28;
	public const int NOT=29;
	public const int NOT_EQUAL=30;
	public const int OPEN_BRACE=31;
	public const int OPEN_CURLY_BRACE=32;
	public const int OPEN_SQUARE_BRACE=33;
	public const int OR=34;
	public const int PLUS=35;
	public const int PNAME_LN=36;
	public const int PNAME_NS=37;
	public const int PN_CHARS=38;
	public const int PN_CHARS_BASE=39;
	public const int PN_CHARS_U=40;
	public const int PN_LOCAL=41;
	public const int PN_PREFIX=42;
	public const int REFERENCE=43;
	public const int SEMICOLON=44;
	public const int SIMPLE_TERM=45;
	public const int STRING_LITERAL=46;
	public const int TERMS=47;
	public const int TYPED_VALUE=48;
	public const int WS=49;

    // delegates
    // delegators

	public OslcWhereLexer()
	{
		OnCreated();
	}

	public OslcWhereLexer(ICharStream input )
		: this(input, new RecognizerSharedState())
	{
	}

	public OslcWhereLexer(ICharStream input, RecognizerSharedState state)
		: base(input, state)
	{

		OnCreated();
	}
	public override string GrammarFileName { get { return "../Grammars/OslcWhere.g"; } }


	partial void OnCreated();
	partial void EnterRule(string ruleName, int ruleIndex);
	partial void LeaveRule(string ruleName, int ruleIndex);

	partial void EnterRule_COMPOUND_TERM();
	partial void LeaveRule_COMPOUND_TERM();

	// $ANTLR start "COMPOUND_TERM"
	[GrammarRule("COMPOUND_TERM")]
	private void mCOMPOUND_TERM()
	{
		EnterRule_COMPOUND_TERM();
		EnterRule("COMPOUND_TERM", 1);
		TraceIn("COMPOUND_TERM", 1);
		try
		{
			int _type = COMPOUND_TERM;
			int _channel = DefaultTokenChannel;
			// ../Grammars/OslcWhere.g:7:15: ( 'compound_term' )
			DebugEnterAlt(1);
			// ../Grammars/OslcWhere.g:7:17: 'compound_term'
			{
			DebugLocation(7, 17);
			Match("compound_term"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("COMPOUND_TERM", 1);
			LeaveRule("COMPOUND_TERM", 1);
			LeaveRule_COMPOUND_TERM();
		}
	}
	// $ANTLR end "COMPOUND_TERM"

	partial void EnterRule_IN_TERM();
	partial void LeaveRule_IN_TERM();

	// $ANTLR start "IN_TERM"
	[GrammarRule("IN_TERM")]
	private void mIN_TERM()
	{
		EnterRule_IN_TERM();
		EnterRule("IN_TERM", 2);
		TraceIn("IN_TERM", 2);
		try
		{
			int _type = IN_TERM;
			int _channel = DefaultTokenChannel;
			// ../Grammars/OslcWhere.g:8:9: ( 'in_term' )
			DebugEnterAlt(1);
			// ../Grammars/OslcWhere.g:8:11: 'in_term'
			{
			DebugLocation(8, 11);
			Match("in_term"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("IN_TERM", 2);
			LeaveRule("IN_TERM", 2);
			LeaveRule_IN_TERM();
		}
	}
	// $ANTLR end "IN_TERM"

	partial void EnterRule_IN_VALUES();
	partial void LeaveRule_IN_VALUES();

	// $ANTLR start "IN_VALUES"
	[GrammarRule("IN_VALUES")]
	private void mIN_VALUES()
	{
		EnterRule_IN_VALUES();
		EnterRule("IN_VALUES", 3);
		TraceIn("IN_VALUES", 3);
		try
		{
			int _type = IN_VALUES;
			int _channel = DefaultTokenChannel;
			// ../Grammars/OslcWhere.g:9:11: ( 'in_values' )
			DebugEnterAlt(1);
			// ../Grammars/OslcWhere.g:9:13: 'in_values'
			{
			DebugLocation(9, 13);
			Match("in_values"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("IN_VALUES", 3);
			LeaveRule("IN_VALUES", 3);
			LeaveRule_IN_VALUES();
		}
	}
	// $ANTLR end "IN_VALUES"

	partial void EnterRule_LANGED_VALUE();
	partial void LeaveRule_LANGED_VALUE();

	// $ANTLR start "LANGED_VALUE"
	[GrammarRule("LANGED_VALUE")]
	private void mLANGED_VALUE()
	{
		EnterRule_LANGED_VALUE();
		EnterRule("LANGED_VALUE", 4);
		TraceIn("LANGED_VALUE", 4);
		try
		{
			int _type = LANGED_VALUE;
			int _channel = DefaultTokenChannel;
			// ../Grammars/OslcWhere.g:10:14: ( 'langed_value' )
			DebugEnterAlt(1);
			// ../Grammars/OslcWhere.g:10:16: 'langed_value'
			{
			DebugLocation(10, 16);
			Match("langed_value"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("LANGED_VALUE", 4);
			LeaveRule("LANGED_VALUE", 4);
			LeaveRule_LANGED_VALUE();
		}
	}
	// $ANTLR end "LANGED_VALUE"

	partial void EnterRule_SIMPLE_TERM();
	partial void LeaveRule_SIMPLE_TERM();

	// $ANTLR start "SIMPLE_TERM"
	[GrammarRule("SIMPLE_TERM")]
	private void mSIMPLE_TERM()
	{
		EnterRule_SIMPLE_TERM();
		EnterRule("SIMPLE_TERM", 5);
		TraceIn("SIMPLE_TERM", 5);
		try
		{
			int _type = SIMPLE_TERM;
			int _channel = DefaultTokenChannel;
			// ../Grammars/OslcWhere.g:11:13: ( 'simple_term' )
			DebugEnterAlt(1);
			// ../Grammars/OslcWhere.g:11:15: 'simple_term'
			{
			DebugLocation(11, 15);
			Match("simple_term"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("SIMPLE_TERM", 5);
			LeaveRule("SIMPLE_TERM", 5);
			LeaveRule_SIMPLE_TERM();
		}
	}
	// $ANTLR end "SIMPLE_TERM"

	partial void EnterRule_TERMS();
	partial void LeaveRule_TERMS();

	// $ANTLR start "TERMS"
	[GrammarRule("TERMS")]
	private void mTERMS()
	{
		EnterRule_TERMS();
		EnterRule("TERMS", 6);
		TraceIn("TERMS", 6);
		try
		{
			int _type = TERMS;
			int _channel = DefaultTokenChannel;
			// ../Grammars/OslcWhere.g:12:7: ( 'terms' )
			DebugEnterAlt(1);
			// ../Grammars/OslcWhere.g:12:9: 'terms'
			{
			DebugLocation(12, 9);
			Match("terms"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("TERMS", 6);
			LeaveRule("TERMS", 6);
			LeaveRule_TERMS();
		}
	}
	// $ANTLR end "TERMS"

	partial void EnterRule_TYPED_VALUE();
	partial void LeaveRule_TYPED_VALUE();

	// $ANTLR start "TYPED_VALUE"
	[GrammarRule("TYPED_VALUE")]
	private void mTYPED_VALUE()
	{
		EnterRule_TYPED_VALUE();
		EnterRule("TYPED_VALUE", 7);
		TraceIn("TYPED_VALUE", 7);
		try
		{
			int _type = TYPED_VALUE;
			int _channel = DefaultTokenChannel;
			// ../Grammars/OslcWhere.g:13:13: ( 'typed_value' )
			DebugEnterAlt(1);
			// ../Grammars/OslcWhere.g:13:15: 'typed_value'
			{
			DebugLocation(13, 15);
			Match("typed_value"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("TYPED_VALUE", 7);
			LeaveRule("TYPED_VALUE", 7);
			LeaveRule_TYPED_VALUE();
		}
	}
	// $ANTLR end "TYPED_VALUE"

	partial void EnterRule_T__50();
	partial void LeaveRule_T__50();

	// $ANTLR start "T__50"
	[GrammarRule("T__50")]
	private void mT__50()
	{
		EnterRule_T__50();
		EnterRule("T__50", 8);
		TraceIn("T__50", 8);
		try
		{
			int _type = T__50;
			int _channel = DefaultTokenChannel;
			// ../Grammars/OslcWhere.g:14:7: ( ' ' )
			DebugEnterAlt(1);
			// ../Grammars/OslcWhere.g:14:9: ' '
			{
			DebugLocation(14, 9);
			Match(' '); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__50", 8);
			LeaveRule("T__50", 8);
			LeaveRule_T__50();
		}
	}
	// $ANTLR end "T__50"

	partial void EnterRule_T__51();
	partial void LeaveRule_T__51();

	// $ANTLR start "T__51"
	[GrammarRule("T__51")]
	private void mT__51()
	{
		EnterRule_T__51();
		EnterRule("T__51", 9);
		TraceIn("T__51", 9);
		try
		{
			int _type = T__51;
			int _channel = DefaultTokenChannel;
			// ../Grammars/OslcWhere.g:15:7: ( ' and ' )
			DebugEnterAlt(1);
			// ../Grammars/OslcWhere.g:15:9: ' and '
			{
			DebugLocation(15, 9);
			Match(" and "); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__51", 9);
			LeaveRule("T__51", 9);
			LeaveRule_T__51();
		}
	}
	// $ANTLR end "T__51"

	partial void EnterRule_T__52();
	partial void LeaveRule_T__52();

	// $ANTLR start "T__52"
	[GrammarRule("T__52")]
	private void mT__52()
	{
		EnterRule_T__52();
		EnterRule("T__52", 10);
		TraceIn("T__52", 10);
		try
		{
			int _type = T__52;
			int _channel = DefaultTokenChannel;
			// ../Grammars/OslcWhere.g:16:7: ( ' in' )
			DebugEnterAlt(1);
			// ../Grammars/OslcWhere.g:16:9: ' in'
			{
			DebugLocation(16, 9);
			Match(" in"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("T__52", 10);
			LeaveRule("T__52", 10);
			LeaveRule_T__52();
		}
	}
	// $ANTLR end "T__52"

	partial void EnterRule_WS();
	partial void LeaveRule_WS();

	// $ANTLR start "WS"
	[GrammarRule("WS")]
	private void mWS()
	{
		EnterRule_WS();
		EnterRule("WS", 11);
		TraceIn("WS", 11);
		try
		{
			int _type = WS;
			int _channel = DefaultTokenChannel;
			// ../Grammars/OslcWhere.g:135:5: ( ( ' ' | '\\t' | EOL )+ )
			DebugEnterAlt(1);
			// ../Grammars/OslcWhere.g:135:7: ( ' ' | '\\t' | EOL )+
			{
			DebugLocation(135, 7);
			// ../Grammars/OslcWhere.g:135:7: ( ' ' | '\\t' | EOL )+
			int cnt1=0;
			try { DebugEnterSubRule(1);
			while (true)
			{
				int alt1=2;
				try { DebugEnterDecision(1, false);
				int LA1_1 = input.LA(1);

				if (((LA1_1>='\t' && LA1_1<='\n')||LA1_1=='\r'||LA1_1==' '))
				{
					alt1 = 1;
				}


				} finally { DebugExitDecision(1); }
				switch (alt1)
				{
				case 1:
					DebugEnterAlt(1);
					// ../Grammars/OslcWhere.g:
					{
					DebugLocation(135, 7);
					input.Consume();


					}
					break;

				default:
					if (cnt1 >= 1)
						goto loop1;

					EarlyExitException eee1 = new EarlyExitException( 1, input );
					DebugRecognitionException(eee1);
					throw eee1;
				}
				cnt1++;
			}
			loop1:
				;

			} finally { DebugExitSubRule(1); }

			DebugLocation(135, 25);
			 _channel=Hidden; 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("WS", 11);
			LeaveRule("WS", 11);
			LeaveRule_WS();
		}
	}
	// $ANTLR end "WS"

	partial void EnterRule_PNAME_NS();
	partial void LeaveRule_PNAME_NS();

	// $ANTLR start "PNAME_NS"
	[GrammarRule("PNAME_NS")]
	private void mPNAME_NS()
	{
		EnterRule_PNAME_NS();
		EnterRule("PNAME_NS", 12);
		TraceIn("PNAME_NS", 12);
		try
		{
			int _type = PNAME_NS;
			int _channel = DefaultTokenChannel;
			CommonToken p = default(CommonToken);

			// ../Grammars/OslcWhere.g:139:5: ( (p= PN_PREFIX )? ':' )
			DebugEnterAlt(1);
			// ../Grammars/OslcWhere.g:139:7: (p= PN_PREFIX )? ':'
			{
			DebugLocation(139, 8);
			// ../Grammars/OslcWhere.g:139:8: (p= PN_PREFIX )?
			int alt2=2;
			try { DebugEnterSubRule(2);
			try { DebugEnterDecision(2, false);
			int LA2_1 = input.LA(1);

			if (((LA2_1>='A' && LA2_1<='Z')||(LA2_1>='a' && LA2_1<='z')||(LA2_1>='\u00C0' && LA2_1<='\u00D6')||(LA2_1>='\u00D8' && LA2_1<='\u00F6')||(LA2_1>='\u00F8' && LA2_1<='\u02FF')||(LA2_1>='\u0370' && LA2_1<='\u037D')||(LA2_1>='\u037F' && LA2_1<='\u1FFF')||(LA2_1>='\u200C' && LA2_1<='\u200D')||(LA2_1>='\u2070' && LA2_1<='\u218F')||(LA2_1>='\u2C00' && LA2_1<='\u2FEF')||(LA2_1>='\u3001' && LA2_1<='\uD7FF')||(LA2_1>='\uF900' && LA2_1<='\uFDCF')||(LA2_1>='\uFDF0' && LA2_1<='\uFFFD')))
			{
				alt2 = 1;
			}
			} finally { DebugExitDecision(2); }
			switch (alt2)
			{
			case 1:
				DebugEnterAlt(1);
				// ../Grammars/OslcWhere.g:139:8: p= PN_PREFIX
				{
				DebugLocation(139, 8);
				int pStart139 = CharIndex;
				int pStartLine139 = Line;
				int pStartCharPos139 = CharPositionInLine;
				mPN_PREFIX(); 
				p = new CommonToken(input, TokenTypes.Invalid, TokenChannels.Default, pStart139, CharIndex-1);
				p.Line = pStartLine139;
				p.CharPositionInLine = pStartCharPos139;

				}
				break;

			}
			} finally { DebugExitSubRule(2); }

			DebugLocation(139, 20);
			Match(':'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("PNAME_NS", 12);
			LeaveRule("PNAME_NS", 12);
			LeaveRule_PNAME_NS();
		}
	}
	// $ANTLR end "PNAME_NS"

	partial void EnterRule_PNAME_LN();
	partial void LeaveRule_PNAME_LN();

	// $ANTLR start "PNAME_LN"
	[GrammarRule("PNAME_LN")]
	private void mPNAME_LN()
	{
		EnterRule_PNAME_LN();
		EnterRule("PNAME_LN", 13);
		TraceIn("PNAME_LN", 13);
		try
		{
			int _type = PNAME_LN;
			int _channel = DefaultTokenChannel;
			// ../Grammars/OslcWhere.g:143:5: ( PNAME_NS PN_LOCAL )
			DebugEnterAlt(1);
			// ../Grammars/OslcWhere.g:143:7: PNAME_NS PN_LOCAL
			{
			DebugLocation(143, 7);
			mPNAME_NS(); 
			DebugLocation(143, 16);
			mPN_LOCAL(); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("PNAME_LN", 13);
			LeaveRule("PNAME_LN", 13);
			LeaveRule_PNAME_LN();
		}
	}
	// $ANTLR end "PNAME_LN"

	partial void EnterRule_IRI_REF();
	partial void LeaveRule_IRI_REF();

	// $ANTLR start "IRI_REF"
	[GrammarRule("IRI_REF")]
	private void mIRI_REF()
	{
		EnterRule_IRI_REF();
		EnterRule("IRI_REF", 14);
		TraceIn("IRI_REF", 14);
		try
		{
			int _type = IRI_REF;
			int _channel = DefaultTokenChannel;
			// ../Grammars/OslcWhere.g:148:5: ( LESS ( options {greedy=false; } :~ ( LESS | GREATER | '\"' | OPEN_CURLY_BRACE | CLOSE_CURLY_BRACE | '|' | '^' | '\\\\' | '`' | ( '\\u0000' .. '\\u0020' ) ) )* GREATER )
			DebugEnterAlt(1);
			// ../Grammars/OslcWhere.g:148:7: LESS ( options {greedy=false; } :~ ( LESS | GREATER | '\"' | OPEN_CURLY_BRACE | CLOSE_CURLY_BRACE | '|' | '^' | '\\\\' | '`' | ( '\\u0000' .. '\\u0020' ) ) )* GREATER
			{
			DebugLocation(148, 7);
			mLESS(); 
			DebugLocation(148, 12);
			// ../Grammars/OslcWhere.g:148:12: ( options {greedy=false; } :~ ( LESS | GREATER | '\"' | OPEN_CURLY_BRACE | CLOSE_CURLY_BRACE | '|' | '^' | '\\\\' | '`' | ( '\\u0000' .. '\\u0020' ) ) )*
			try { DebugEnterSubRule(3);
			while (true)
			{
				int alt3=2;
				try { DebugEnterDecision(3, false);
				int LA3_1 = input.LA(1);

				if ((LA3_1=='!'||(LA3_1>='#' && LA3_1<=';')||LA3_1=='='||(LA3_1>='?' && LA3_1<='[')||LA3_1==']'||LA3_1=='_'||(LA3_1>='a' && LA3_1<='z')||(LA3_1>='~' && LA3_1<='\uFFFF')))
				{
					alt3 = 1;
				}
				else if ((LA3_1=='>'))
				{
					alt3 = 2;
				}


				} finally { DebugExitDecision(3); }
				switch ( alt3 )
				{
				case 1:
					DebugEnterAlt(1);
					// ../Grammars/OslcWhere.g:148:40: ~ ( LESS | GREATER | '\"' | OPEN_CURLY_BRACE | CLOSE_CURLY_BRACE | '|' | '^' | '\\\\' | '`' | ( '\\u0000' .. '\\u0020' ) )
					{
					DebugLocation(148, 40);
					input.Consume();


					}
					break;

				default:
					goto loop3;
				}
			}

			loop3:
				;

			} finally { DebugExitSubRule(3); }

			DebugLocation(148, 154);
			mGREATER(); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("IRI_REF", 14);
			LeaveRule("IRI_REF", 14);
			LeaveRule_IRI_REF();
		}
	}
	// $ANTLR end "IRI_REF"

	partial void EnterRule_LANGTAG();
	partial void LeaveRule_LANGTAG();

	// $ANTLR start "LANGTAG"
	[GrammarRule("LANGTAG")]
	private void mLANGTAG()
	{
		EnterRule_LANGTAG();
		EnterRule("LANGTAG", 15);
		TraceIn("LANGTAG", 15);
		try
		{
			int _type = LANGTAG;
			int _channel = DefaultTokenChannel;
			// ../Grammars/OslcWhere.g:153:5: ( '@' ( ALPHA_CHARS )+ ( MINUS ( DIGIT | ALPHA_CHARS )+ )* )
			DebugEnterAlt(1);
			// ../Grammars/OslcWhere.g:153:7: '@' ( ALPHA_CHARS )+ ( MINUS ( DIGIT | ALPHA_CHARS )+ )*
			{
			DebugLocation(153, 7);
			Match('@'); 
			DebugLocation(153, 11);
			// ../Grammars/OslcWhere.g:153:11: ( ALPHA_CHARS )+
			int cnt4=0;
			try { DebugEnterSubRule(4);
			while (true)
			{
				int alt4=2;
				try { DebugEnterDecision(4, false);
				int LA4_1 = input.LA(1);

				if (((LA4_1>='A' && LA4_1<='Z')||(LA4_1>='a' && LA4_1<='z')))
				{
					alt4 = 1;
				}


				} finally { DebugExitDecision(4); }
				switch (alt4)
				{
				case 1:
					DebugEnterAlt(1);
					// ../Grammars/OslcWhere.g:
					{
					DebugLocation(153, 11);
					input.Consume();


					}
					break;

				default:
					if (cnt4 >= 1)
						goto loop4;

					EarlyExitException eee4 = new EarlyExitException( 4, input );
					DebugRecognitionException(eee4);
					throw eee4;
				}
				cnt4++;
			}
			loop4:
				;

			} finally { DebugExitSubRule(4); }

			DebugLocation(153, 24);
			// ../Grammars/OslcWhere.g:153:24: ( MINUS ( DIGIT | ALPHA_CHARS )+ )*
			try { DebugEnterSubRule(6);
			while (true)
			{
				int alt6=2;
				try { DebugEnterDecision(6, false);
				int LA6_1 = input.LA(1);

				if ((LA6_1=='-'))
				{
					alt6 = 1;
				}


				} finally { DebugExitDecision(6); }
				switch ( alt6 )
				{
				case 1:
					DebugEnterAlt(1);
					// ../Grammars/OslcWhere.g:153:25: MINUS ( DIGIT | ALPHA_CHARS )+
					{
					DebugLocation(153, 25);
					mMINUS(); 
					DebugLocation(153, 31);
					// ../Grammars/OslcWhere.g:153:31: ( DIGIT | ALPHA_CHARS )+
					int cnt5=0;
					try { DebugEnterSubRule(5);
					while (true)
					{
						int alt5=2;
						try { DebugEnterDecision(5, false);
						int LA5_1 = input.LA(1);

						if (((LA5_1>='0' && LA5_1<='9')||(LA5_1>='A' && LA5_1<='Z')||(LA5_1>='a' && LA5_1<='z')))
						{
							alt5 = 1;
						}


						} finally { DebugExitDecision(5); }
						switch (alt5)
						{
						case 1:
							DebugEnterAlt(1);
							// ../Grammars/OslcWhere.g:
							{
							DebugLocation(153, 31);
							input.Consume();


							}
							break;

						default:
							if (cnt5 >= 1)
								goto loop5;

							EarlyExitException eee5 = new EarlyExitException( 5, input );
							DebugRecognitionException(eee5);
							throw eee5;
						}
						cnt5++;
					}
					loop5:
						;

					} finally { DebugExitSubRule(5); }


					}
					break;

				default:
					goto loop6;
				}
			}

			loop6:
				;

			} finally { DebugExitSubRule(6); }


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("LANGTAG", 15);
			LeaveRule("LANGTAG", 15);
			LeaveRule_LANGTAG();
		}
	}
	// $ANTLR end "LANGTAG"

	partial void EnterRule_ALPHA_CHARS();
	partial void LeaveRule_ALPHA_CHARS();

	// $ANTLR start "ALPHA_CHARS"
	[GrammarRule("ALPHA_CHARS")]
	private void mALPHA_CHARS()
	{
		EnterRule_ALPHA_CHARS();
		EnterRule("ALPHA_CHARS", 16);
		TraceIn("ALPHA_CHARS", 16);
		try
		{
			// ../Grammars/OslcWhere.g:159:5: ( 'a' .. 'z' | 'A' .. 'Z' )
			DebugEnterAlt(1);
			// ../Grammars/OslcWhere.g:
			{
			DebugLocation(159, 5);
			if ((input.LA(1)>='A' && input.LA(1)<='Z')||(input.LA(1)>='a' && input.LA(1)<='z'))
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}


			}

		}
		finally
		{
			TraceOut("ALPHA_CHARS", 16);
			LeaveRule("ALPHA_CHARS", 16);
			LeaveRule_ALPHA_CHARS();
		}
	}
	// $ANTLR end "ALPHA_CHARS"

	partial void EnterRule_BOOLEAN();
	partial void LeaveRule_BOOLEAN();

	// $ANTLR start "BOOLEAN"
	[GrammarRule("BOOLEAN")]
	private void mBOOLEAN()
	{
		EnterRule_BOOLEAN();
		EnterRule("BOOLEAN", 17);
		TraceIn("BOOLEAN", 17);
		try
		{
			int _type = BOOLEAN;
			int _channel = DefaultTokenChannel;
			// ../Grammars/OslcWhere.g:163:5: ( 'true' | 'false' )
			int alt7=2;
			try { DebugEnterDecision(7, false);
			int LA7_1 = input.LA(1);

			if ((LA7_1=='t'))
			{
				alt7 = 1;
			}
			else if ((LA7_1=='f'))
			{
				alt7 = 2;
			}
			else
			{
				NoViableAltException nvae = new NoViableAltException("", 7, 0, input, 1);
				DebugRecognitionException(nvae);
				throw nvae;
			}
			} finally { DebugExitDecision(7); }
			switch (alt7)
			{
			case 1:
				DebugEnterAlt(1);
				// ../Grammars/OslcWhere.g:163:7: 'true'
				{
				DebugLocation(163, 7);
				Match("true"); 


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ../Grammars/OslcWhere.g:164:7: 'false'
				{
				DebugLocation(164, 7);
				Match("false"); 


				}
				break;

			}
			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("BOOLEAN", 17);
			LeaveRule("BOOLEAN", 17);
			LeaveRule_BOOLEAN();
		}
	}
	// $ANTLR end "BOOLEAN"

	partial void EnterRule_DECIMAL();
	partial void LeaveRule_DECIMAL();

	// $ANTLR start "DECIMAL"
	[GrammarRule("DECIMAL")]
	private void mDECIMAL()
	{
		EnterRule_DECIMAL();
		EnterRule("DECIMAL", 18);
		TraceIn("DECIMAL", 18);
		try
		{
			int _type = DECIMAL;
			int _channel = DefaultTokenChannel;
			// ../Grammars/OslcWhere.g:168:5: ( ( MINUS | PLUS )? ( DIGIT )+ DOT ( DIGIT )* | ( MINUS | PLUS )? DOT ( DIGIT )+ | ( MINUS | PLUS )? ( DIGIT )+ )
			int alt15=3;
			try { DebugEnterDecision(15, false);
			try
			{
				alt15 = dfa15.Predict(input);
			}
			catch (NoViableAltException nvae)
			{
				DebugRecognitionException(nvae);
				throw;
			}
			} finally { DebugExitDecision(15); }
			switch (alt15)
			{
			case 1:
				DebugEnterAlt(1);
				// ../Grammars/OslcWhere.g:168:7: ( MINUS | PLUS )? ( DIGIT )+ DOT ( DIGIT )*
				{
				DebugLocation(168, 7);
				// ../Grammars/OslcWhere.g:168:7: ( MINUS | PLUS )?
				int alt8=2;
				try { DebugEnterSubRule(8);
				try { DebugEnterDecision(8, false);
				int LA8_1 = input.LA(1);

				if ((LA8_1=='+'||LA8_1=='-'))
				{
					alt8 = 1;
				}
				} finally { DebugExitDecision(8); }
				switch (alt8)
				{
				case 1:
					DebugEnterAlt(1);
					// ../Grammars/OslcWhere.g:
					{
					DebugLocation(168, 7);
					input.Consume();


					}
					break;

				}
				} finally { DebugExitSubRule(8); }

				DebugLocation(168, 23);
				// ../Grammars/OslcWhere.g:168:23: ( DIGIT )+
				int cnt9=0;
				try { DebugEnterSubRule(9);
				while (true)
				{
					int alt9=2;
					try { DebugEnterDecision(9, false);
					int LA9_1 = input.LA(1);

					if (((LA9_1>='0' && LA9_1<='9')))
					{
						alt9 = 1;
					}


					} finally { DebugExitDecision(9); }
					switch (alt9)
					{
					case 1:
						DebugEnterAlt(1);
						// ../Grammars/OslcWhere.g:
						{
						DebugLocation(168, 23);
						input.Consume();


						}
						break;

					default:
						if (cnt9 >= 1)
							goto loop9;

						EarlyExitException eee9 = new EarlyExitException( 9, input );
						DebugRecognitionException(eee9);
						throw eee9;
					}
					cnt9++;
				}
				loop9:
					;

				} finally { DebugExitSubRule(9); }

				DebugLocation(168, 30);
				mDOT(); 
				DebugLocation(168, 34);
				// ../Grammars/OslcWhere.g:168:34: ( DIGIT )*
				try { DebugEnterSubRule(10);
				while (true)
				{
					int alt10=2;
					try { DebugEnterDecision(10, false);
					int LA10_1 = input.LA(1);

					if (((LA10_1>='0' && LA10_1<='9')))
					{
						alt10 = 1;
					}


					} finally { DebugExitDecision(10); }
					switch ( alt10 )
					{
					case 1:
						DebugEnterAlt(1);
						// ../Grammars/OslcWhere.g:
						{
						DebugLocation(168, 34);
						input.Consume();


						}
						break;

					default:
						goto loop10;
					}
				}

				loop10:
					;

				} finally { DebugExitSubRule(10); }


				}
				break;
			case 2:
				DebugEnterAlt(2);
				// ../Grammars/OslcWhere.g:169:7: ( MINUS | PLUS )? DOT ( DIGIT )+
				{
				DebugLocation(169, 7);
				// ../Grammars/OslcWhere.g:169:7: ( MINUS | PLUS )?
				int alt11=2;
				try { DebugEnterSubRule(11);
				try { DebugEnterDecision(11, false);
				int LA11_1 = input.LA(1);

				if ((LA11_1=='+'||LA11_1=='-'))
				{
					alt11 = 1;
				}
				} finally { DebugExitDecision(11); }
				switch (alt11)
				{
				case 1:
					DebugEnterAlt(1);
					// ../Grammars/OslcWhere.g:
					{
					DebugLocation(169, 7);
					input.Consume();


					}
					break;

				}
				} finally { DebugExitSubRule(11); }

				DebugLocation(169, 23);
				mDOT(); 
				DebugLocation(169, 27);
				// ../Grammars/OslcWhere.g:169:27: ( DIGIT )+
				int cnt12=0;
				try { DebugEnterSubRule(12);
				while (true)
				{
					int alt12=2;
					try { DebugEnterDecision(12, false);
					int LA12_1 = input.LA(1);

					if (((LA12_1>='0' && LA12_1<='9')))
					{
						alt12 = 1;
					}


					} finally { DebugExitDecision(12); }
					switch (alt12)
					{
					case 1:
						DebugEnterAlt(1);
						// ../Grammars/OslcWhere.g:
						{
						DebugLocation(169, 27);
						input.Consume();


						}
						break;

					default:
						if (cnt12 >= 1)
							goto loop12;

						EarlyExitException eee12 = new EarlyExitException( 12, input );
						DebugRecognitionException(eee12);
						throw eee12;
					}
					cnt12++;
				}
				loop12:
					;

				} finally { DebugExitSubRule(12); }


				}
				break;
			case 3:
				DebugEnterAlt(3);
				// ../Grammars/OslcWhere.g:170:7: ( MINUS | PLUS )? ( DIGIT )+
				{
				DebugLocation(170, 7);
				// ../Grammars/OslcWhere.g:170:7: ( MINUS | PLUS )?
				int alt13=2;
				try { DebugEnterSubRule(13);
				try { DebugEnterDecision(13, false);
				int LA13_1 = input.LA(1);

				if ((LA13_1=='+'||LA13_1=='-'))
				{
					alt13 = 1;
				}
				} finally { DebugExitDecision(13); }
				switch (alt13)
				{
				case 1:
					DebugEnterAlt(1);
					// ../Grammars/OslcWhere.g:
					{
					DebugLocation(170, 7);
					input.Consume();


					}
					break;

				}
				} finally { DebugExitSubRule(13); }

				DebugLocation(170, 23);
				// ../Grammars/OslcWhere.g:170:23: ( DIGIT )+
				int cnt14=0;
				try { DebugEnterSubRule(14);
				while (true)
				{
					int alt14=2;
					try { DebugEnterDecision(14, false);
					int LA14_1 = input.LA(1);

					if (((LA14_1>='0' && LA14_1<='9')))
					{
						alt14 = 1;
					}


					} finally { DebugExitDecision(14); }
					switch (alt14)
					{
					case 1:
						DebugEnterAlt(1);
						// ../Grammars/OslcWhere.g:
						{
						DebugLocation(170, 23);
						input.Consume();


						}
						break;

					default:
						if (cnt14 >= 1)
							goto loop14;

						EarlyExitException eee14 = new EarlyExitException( 14, input );
						DebugRecognitionException(eee14);
						throw eee14;
					}
					cnt14++;
				}
				loop14:
					;

				} finally { DebugExitSubRule(14); }


				}
				break;

			}
			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("DECIMAL", 18);
			LeaveRule("DECIMAL", 18);
			LeaveRule_DECIMAL();
		}
	}
	// $ANTLR end "DECIMAL"

	partial void EnterRule_STRING_LITERAL();
	partial void LeaveRule_STRING_LITERAL();

	// $ANTLR start "STRING_LITERAL"
	[GrammarRule("STRING_LITERAL")]
	private void mSTRING_LITERAL()
	{
		EnterRule_STRING_LITERAL();
		EnterRule("STRING_LITERAL", 19);
		TraceIn("STRING_LITERAL", 19);
		try
		{
			int _type = STRING_LITERAL;
			int _channel = DefaultTokenChannel;
			// ../Grammars/OslcWhere.g:174:5: ( '\"' ( options {greedy=false; } :~ ( '\\u0022' | '\\u005C' | '\\u000A' | '\\u000D' ) | ECHAR )* '\"' )
			DebugEnterAlt(1);
			// ../Grammars/OslcWhere.g:174:7: '\"' ( options {greedy=false; } :~ ( '\\u0022' | '\\u005C' | '\\u000A' | '\\u000D' ) | ECHAR )* '\"'
			{
			DebugLocation(174, 7);
			Match('\"'); 
			DebugLocation(174, 12);
			// ../Grammars/OslcWhere.g:174:12: ( options {greedy=false; } :~ ( '\\u0022' | '\\u005C' | '\\u000A' | '\\u000D' ) | ECHAR )*
			try { DebugEnterSubRule(16);
			while (true)
			{
				int alt16=3;
				try { DebugEnterDecision(16, false);
				int LA16_1 = input.LA(1);

				if (((LA16_1>='\u0000' && LA16_1<='\t')||(LA16_1>='\u000B' && LA16_1<='\f')||(LA16_1>='\u000E' && LA16_1<='!')||(LA16_1>='#' && LA16_1<='[')||(LA16_1>=']' && LA16_1<='\uFFFF')))
				{
					alt16 = 1;
				}
				else if ((LA16_1=='\\'))
				{
					alt16 = 2;
				}
				else if ((LA16_1=='\"'))
				{
					alt16 = 3;
				}


				} finally { DebugExitDecision(16); }
				switch ( alt16 )
				{
				case 1:
					DebugEnterAlt(1);
					// ../Grammars/OslcWhere.g:174:40: ~ ( '\\u0022' | '\\u005C' | '\\u000A' | '\\u000D' )
					{
					DebugLocation(174, 40);
					input.Consume();


					}
					break;
				case 2:
					DebugEnterAlt(2);
					// ../Grammars/OslcWhere.g:174:87: ECHAR
					{
					DebugLocation(174, 87);
					mECHAR(); 

					}
					break;

				default:
					goto loop16;
				}
			}

			loop16:
				;

			} finally { DebugExitSubRule(16); }

			DebugLocation(174, 96);
			Match('\"'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("STRING_LITERAL", 19);
			LeaveRule("STRING_LITERAL", 19);
			LeaveRule_STRING_LITERAL();
		}
	}
	// $ANTLR end "STRING_LITERAL"

	partial void EnterRule_ECHAR();
	partial void LeaveRule_ECHAR();

	// $ANTLR start "ECHAR"
	[GrammarRule("ECHAR")]
	private void mECHAR()
	{
		EnterRule_ECHAR();
		EnterRule("ECHAR", 20);
		TraceIn("ECHAR", 20);
		try
		{
			// ../Grammars/OslcWhere.g:180:5: ( '\\\\' ( 't' | 'b' | 'n' | 'r' | 'f' | '\\\\' | '\"' | '\\'' ) )
			DebugEnterAlt(1);
			// ../Grammars/OslcWhere.g:180:7: '\\\\' ( 't' | 'b' | 'n' | 'r' | 'f' | '\\\\' | '\"' | '\\'' )
			{
			DebugLocation(180, 7);
			Match('\\'); 
			DebugLocation(180, 12);
			if (input.LA(1)=='\"'||input.LA(1)=='\''||input.LA(1)=='\\'||input.LA(1)=='b'||input.LA(1)=='f'||input.LA(1)=='n'||input.LA(1)=='r'||input.LA(1)=='t')
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}


			}

		}
		finally
		{
			TraceOut("ECHAR", 20);
			LeaveRule("ECHAR", 20);
			LeaveRule_ECHAR();
		}
	}
	// $ANTLR end "ECHAR"

	partial void EnterRule_PN_CHARS_U();
	partial void LeaveRule_PN_CHARS_U();

	// $ANTLR start "PN_CHARS_U"
	[GrammarRule("PN_CHARS_U")]
	private void mPN_CHARS_U()
	{
		EnterRule_PN_CHARS_U();
		EnterRule("PN_CHARS_U", 21);
		TraceIn("PN_CHARS_U", 21);
		try
		{
			// ../Grammars/OslcWhere.g:185:5: ( PN_CHARS_BASE | '_' )
			DebugEnterAlt(1);
			// ../Grammars/OslcWhere.g:
			{
			DebugLocation(185, 5);
			if ((input.LA(1)>='A' && input.LA(1)<='Z')||input.LA(1)=='_'||(input.LA(1)>='a' && input.LA(1)<='z')||(input.LA(1)>='\u00C0' && input.LA(1)<='\u00D6')||(input.LA(1)>='\u00D8' && input.LA(1)<='\u00F6')||(input.LA(1)>='\u00F8' && input.LA(1)<='\u02FF')||(input.LA(1)>='\u0370' && input.LA(1)<='\u037D')||(input.LA(1)>='\u037F' && input.LA(1)<='\u1FFF')||(input.LA(1)>='\u200C' && input.LA(1)<='\u200D')||(input.LA(1)>='\u2070' && input.LA(1)<='\u218F')||(input.LA(1)>='\u2C00' && input.LA(1)<='\u2FEF')||(input.LA(1)>='\u3001' && input.LA(1)<='\uD7FF')||(input.LA(1)>='\uF900' && input.LA(1)<='\uFDCF')||(input.LA(1)>='\uFDF0' && input.LA(1)<='\uFFFD'))
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}


			}

		}
		finally
		{
			TraceOut("PN_CHARS_U", 21);
			LeaveRule("PN_CHARS_U", 21);
			LeaveRule_PN_CHARS_U();
		}
	}
	// $ANTLR end "PN_CHARS_U"

	partial void EnterRule_PN_CHARS();
	partial void LeaveRule_PN_CHARS();

	// $ANTLR start "PN_CHARS"
	[GrammarRule("PN_CHARS")]
	private void mPN_CHARS()
	{
		EnterRule_PN_CHARS();
		EnterRule("PN_CHARS", 22);
		TraceIn("PN_CHARS", 22);
		try
		{
			// ../Grammars/OslcWhere.g:190:5: ( PN_CHARS_U | MINUS | DIGIT | '\\u00B7' | '\\u0300' .. '\\u036F' | '\\u203F' .. '\\u2040' )
			DebugEnterAlt(1);
			// ../Grammars/OslcWhere.g:
			{
			DebugLocation(190, 5);
			if (input.LA(1)=='-'||(input.LA(1)>='0' && input.LA(1)<='9')||(input.LA(1)>='A' && input.LA(1)<='Z')||input.LA(1)=='_'||(input.LA(1)>='a' && input.LA(1)<='z')||input.LA(1)=='\u00B7'||(input.LA(1)>='\u00C0' && input.LA(1)<='\u00D6')||(input.LA(1)>='\u00D8' && input.LA(1)<='\u00F6')||(input.LA(1)>='\u00F8' && input.LA(1)<='\u037D')||(input.LA(1)>='\u037F' && input.LA(1)<='\u1FFF')||(input.LA(1)>='\u200C' && input.LA(1)<='\u200D')||(input.LA(1)>='\u203F' && input.LA(1)<='\u2040')||(input.LA(1)>='\u2070' && input.LA(1)<='\u218F')||(input.LA(1)>='\u2C00' && input.LA(1)<='\u2FEF')||(input.LA(1)>='\u3001' && input.LA(1)<='\uD7FF')||(input.LA(1)>='\uF900' && input.LA(1)<='\uFDCF')||(input.LA(1)>='\uFDF0' && input.LA(1)<='\uFFFD'))
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}


			}

		}
		finally
		{
			TraceOut("PN_CHARS", 22);
			LeaveRule("PN_CHARS", 22);
			LeaveRule_PN_CHARS();
		}
	}
	// $ANTLR end "PN_CHARS"

	partial void EnterRule_PN_PREFIX();
	partial void LeaveRule_PN_PREFIX();

	// $ANTLR start "PN_PREFIX"
	[GrammarRule("PN_PREFIX")]
	private void mPN_PREFIX()
	{
		EnterRule_PN_PREFIX();
		EnterRule("PN_PREFIX", 23);
		TraceIn("PN_PREFIX", 23);
		try
		{
			// ../Grammars/OslcWhere.g:200:5: ( PN_CHARS_BASE ( ( PN_CHARS | DOT )* PN_CHARS )? )
			DebugEnterAlt(1);
			// ../Grammars/OslcWhere.g:200:7: PN_CHARS_BASE ( ( PN_CHARS | DOT )* PN_CHARS )?
			{
			DebugLocation(200, 7);
			mPN_CHARS_BASE(); 
			DebugLocation(200, 21);
			// ../Grammars/OslcWhere.g:200:21: ( ( PN_CHARS | DOT )* PN_CHARS )?
			int alt18=2;
			try { DebugEnterSubRule(18);
			try { DebugEnterDecision(18, false);
			int LA18_1 = input.LA(1);

			if (((LA18_1>='-' && LA18_1<='.')||(LA18_1>='0' && LA18_1<='9')||(LA18_1>='A' && LA18_1<='Z')||LA18_1=='_'||(LA18_1>='a' && LA18_1<='z')||LA18_1=='\u00B7'||(LA18_1>='\u00C0' && LA18_1<='\u00D6')||(LA18_1>='\u00D8' && LA18_1<='\u00F6')||(LA18_1>='\u00F8' && LA18_1<='\u037D')||(LA18_1>='\u037F' && LA18_1<='\u1FFF')||(LA18_1>='\u200C' && LA18_1<='\u200D')||(LA18_1>='\u203F' && LA18_1<='\u2040')||(LA18_1>='\u2070' && LA18_1<='\u218F')||(LA18_1>='\u2C00' && LA18_1<='\u2FEF')||(LA18_1>='\u3001' && LA18_1<='\uD7FF')||(LA18_1>='\uF900' && LA18_1<='\uFDCF')||(LA18_1>='\uFDF0' && LA18_1<='\uFFFD')))
			{
				alt18 = 1;
			}
			} finally { DebugExitDecision(18); }
			switch (alt18)
			{
			case 1:
				DebugEnterAlt(1);
				// ../Grammars/OslcWhere.g:200:22: ( PN_CHARS | DOT )* PN_CHARS
				{
				DebugLocation(200, 22);
				// ../Grammars/OslcWhere.g:200:22: ( PN_CHARS | DOT )*
				try { DebugEnterSubRule(17);
				while (true)
				{
					int alt17=2;
					try { DebugEnterDecision(17, false);
					int LA17_1 = input.LA(1);

					if ((LA17_1=='-'||(LA17_1>='0' && LA17_1<='9')||(LA17_1>='A' && LA17_1<='Z')||LA17_1=='_'||(LA17_1>='a' && LA17_1<='z')||LA17_1=='\u00B7'||(LA17_1>='\u00C0' && LA17_1<='\u00D6')||(LA17_1>='\u00D8' && LA17_1<='\u00F6')||(LA17_1>='\u00F8' && LA17_1<='\u037D')||(LA17_1>='\u037F' && LA17_1<='\u1FFF')||(LA17_1>='\u200C' && LA17_1<='\u200D')||(LA17_1>='\u203F' && LA17_1<='\u2040')||(LA17_1>='\u2070' && LA17_1<='\u218F')||(LA17_1>='\u2C00' && LA17_1<='\u2FEF')||(LA17_1>='\u3001' && LA17_1<='\uD7FF')||(LA17_1>='\uF900' && LA17_1<='\uFDCF')||(LA17_1>='\uFDF0' && LA17_1<='\uFFFD')))
					{
						int LA17_2 = input.LA(2);

						if (((LA17_2>='-' && LA17_2<='.')||(LA17_2>='0' && LA17_2<='9')||(LA17_2>='A' && LA17_2<='Z')||LA17_2=='_'||(LA17_2>='a' && LA17_2<='z')||LA17_2=='\u00B7'||(LA17_2>='\u00C0' && LA17_2<='\u00D6')||(LA17_2>='\u00D8' && LA17_2<='\u00F6')||(LA17_2>='\u00F8' && LA17_2<='\u037D')||(LA17_2>='\u037F' && LA17_2<='\u1FFF')||(LA17_2>='\u200C' && LA17_2<='\u200D')||(LA17_2>='\u203F' && LA17_2<='\u2040')||(LA17_2>='\u2070' && LA17_2<='\u218F')||(LA17_2>='\u2C00' && LA17_2<='\u2FEF')||(LA17_2>='\u3001' && LA17_2<='\uD7FF')||(LA17_2>='\uF900' && LA17_2<='\uFDCF')||(LA17_2>='\uFDF0' && LA17_2<='\uFFFD')))
						{
							alt17 = 1;
						}


					}
					else if ((LA17_1=='.'))
					{
						alt17 = 1;
					}


					} finally { DebugExitDecision(17); }
					switch ( alt17 )
					{
					case 1:
						DebugEnterAlt(1);
						// ../Grammars/OslcWhere.g:
						{
						DebugLocation(200, 22);
						input.Consume();


						}
						break;

					default:
						goto loop17;
					}
				}

				loop17:
					;

				} finally { DebugExitSubRule(17); }

				DebugLocation(200, 38);
				mPN_CHARS(); 

				}
				break;

			}
			} finally { DebugExitSubRule(18); }


			}

		}
		finally
		{
			TraceOut("PN_PREFIX", 23);
			LeaveRule("PN_PREFIX", 23);
			LeaveRule_PN_PREFIX();
		}
	}
	// $ANTLR end "PN_PREFIX"

	partial void EnterRule_PN_LOCAL();
	partial void LeaveRule_PN_LOCAL();

	// $ANTLR start "PN_LOCAL"
	[GrammarRule("PN_LOCAL")]
	private void mPN_LOCAL()
	{
		EnterRule_PN_LOCAL();
		EnterRule("PN_LOCAL", 24);
		TraceIn("PN_LOCAL", 24);
		try
		{
			// ../Grammars/OslcWhere.g:205:5: ( ( PN_CHARS_U | DIGIT ) ( ( PN_CHARS | DOT )* PN_CHARS )? )
			DebugEnterAlt(1);
			// ../Grammars/OslcWhere.g:205:7: ( PN_CHARS_U | DIGIT ) ( ( PN_CHARS | DOT )* PN_CHARS )?
			{
			DebugLocation(205, 7);
			if ((input.LA(1)>='0' && input.LA(1)<='9')||(input.LA(1)>='A' && input.LA(1)<='Z')||input.LA(1)=='_'||(input.LA(1)>='a' && input.LA(1)<='z')||(input.LA(1)>='\u00C0' && input.LA(1)<='\u00D6')||(input.LA(1)>='\u00D8' && input.LA(1)<='\u00F6')||(input.LA(1)>='\u00F8' && input.LA(1)<='\u02FF')||(input.LA(1)>='\u0370' && input.LA(1)<='\u037D')||(input.LA(1)>='\u037F' && input.LA(1)<='\u1FFF')||(input.LA(1)>='\u200C' && input.LA(1)<='\u200D')||(input.LA(1)>='\u2070' && input.LA(1)<='\u218F')||(input.LA(1)>='\u2C00' && input.LA(1)<='\u2FEF')||(input.LA(1)>='\u3001' && input.LA(1)<='\uD7FF')||(input.LA(1)>='\uF900' && input.LA(1)<='\uFDCF')||(input.LA(1)>='\uFDF0' && input.LA(1)<='\uFFFD'))
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}

			DebugLocation(205, 30);
			// ../Grammars/OslcWhere.g:205:30: ( ( PN_CHARS | DOT )* PN_CHARS )?
			int alt20=2;
			try { DebugEnterSubRule(20);
			try { DebugEnterDecision(20, false);
			int LA20_1 = input.LA(1);

			if (((LA20_1>='-' && LA20_1<='.')||(LA20_1>='0' && LA20_1<='9')||(LA20_1>='A' && LA20_1<='Z')||LA20_1=='_'||(LA20_1>='a' && LA20_1<='z')||LA20_1=='\u00B7'||(LA20_1>='\u00C0' && LA20_1<='\u00D6')||(LA20_1>='\u00D8' && LA20_1<='\u00F6')||(LA20_1>='\u00F8' && LA20_1<='\u037D')||(LA20_1>='\u037F' && LA20_1<='\u1FFF')||(LA20_1>='\u200C' && LA20_1<='\u200D')||(LA20_1>='\u203F' && LA20_1<='\u2040')||(LA20_1>='\u2070' && LA20_1<='\u218F')||(LA20_1>='\u2C00' && LA20_1<='\u2FEF')||(LA20_1>='\u3001' && LA20_1<='\uD7FF')||(LA20_1>='\uF900' && LA20_1<='\uFDCF')||(LA20_1>='\uFDF0' && LA20_1<='\uFFFD')))
			{
				alt20 = 1;
			}
			} finally { DebugExitDecision(20); }
			switch (alt20)
			{
			case 1:
				DebugEnterAlt(1);
				// ../Grammars/OslcWhere.g:205:31: ( PN_CHARS | DOT )* PN_CHARS
				{
				DebugLocation(205, 31);
				// ../Grammars/OslcWhere.g:205:31: ( PN_CHARS | DOT )*
				try { DebugEnterSubRule(19);
				while (true)
				{
					int alt19=2;
					try { DebugEnterDecision(19, false);
					int LA19_1 = input.LA(1);

					if ((LA19_1=='-'||(LA19_1>='0' && LA19_1<='9')||(LA19_1>='A' && LA19_1<='Z')||LA19_1=='_'||(LA19_1>='a' && LA19_1<='z')||LA19_1=='\u00B7'||(LA19_1>='\u00C0' && LA19_1<='\u00D6')||(LA19_1>='\u00D8' && LA19_1<='\u00F6')||(LA19_1>='\u00F8' && LA19_1<='\u037D')||(LA19_1>='\u037F' && LA19_1<='\u1FFF')||(LA19_1>='\u200C' && LA19_1<='\u200D')||(LA19_1>='\u203F' && LA19_1<='\u2040')||(LA19_1>='\u2070' && LA19_1<='\u218F')||(LA19_1>='\u2C00' && LA19_1<='\u2FEF')||(LA19_1>='\u3001' && LA19_1<='\uD7FF')||(LA19_1>='\uF900' && LA19_1<='\uFDCF')||(LA19_1>='\uFDF0' && LA19_1<='\uFFFD')))
					{
						int LA19_2 = input.LA(2);

						if (((LA19_2>='-' && LA19_2<='.')||(LA19_2>='0' && LA19_2<='9')||(LA19_2>='A' && LA19_2<='Z')||LA19_2=='_'||(LA19_2>='a' && LA19_2<='z')||LA19_2=='\u00B7'||(LA19_2>='\u00C0' && LA19_2<='\u00D6')||(LA19_2>='\u00D8' && LA19_2<='\u00F6')||(LA19_2>='\u00F8' && LA19_2<='\u037D')||(LA19_2>='\u037F' && LA19_2<='\u1FFF')||(LA19_2>='\u200C' && LA19_2<='\u200D')||(LA19_2>='\u203F' && LA19_2<='\u2040')||(LA19_2>='\u2070' && LA19_2<='\u218F')||(LA19_2>='\u2C00' && LA19_2<='\u2FEF')||(LA19_2>='\u3001' && LA19_2<='\uD7FF')||(LA19_2>='\uF900' && LA19_2<='\uFDCF')||(LA19_2>='\uFDF0' && LA19_2<='\uFFFD')))
						{
							alt19 = 1;
						}


					}
					else if ((LA19_1=='.'))
					{
						alt19 = 1;
					}


					} finally { DebugExitDecision(19); }
					switch ( alt19 )
					{
					case 1:
						DebugEnterAlt(1);
						// ../Grammars/OslcWhere.g:
						{
						DebugLocation(205, 31);
						input.Consume();


						}
						break;

					default:
						goto loop19;
					}
				}

				loop19:
					;

				} finally { DebugExitSubRule(19); }

				DebugLocation(205, 47);
				mPN_CHARS(); 

				}
				break;

			}
			} finally { DebugExitSubRule(20); }


			}

		}
		finally
		{
			TraceOut("PN_LOCAL", 24);
			LeaveRule("PN_LOCAL", 24);
			LeaveRule_PN_LOCAL();
		}
	}
	// $ANTLR end "PN_LOCAL"

	partial void EnterRule_PN_CHARS_BASE();
	partial void LeaveRule_PN_CHARS_BASE();

	// $ANTLR start "PN_CHARS_BASE"
	[GrammarRule("PN_CHARS_BASE")]
	private void mPN_CHARS_BASE()
	{
		EnterRule_PN_CHARS_BASE();
		EnterRule("PN_CHARS_BASE", 25);
		TraceIn("PN_CHARS_BASE", 25);
		try
		{
			// ../Grammars/OslcWhere.g:210:5: ( 'A' .. 'Z' | 'a' .. 'z' | '\\u00C0' .. '\\u00D6' | '\\u00D8' .. '\\u00F6' | '\\u00F8' .. '\\u02FF' | '\\u0370' .. '\\u037D' | '\\u037F' .. '\\u1FFF' | '\\u200C' .. '\\u200D' | '\\u2070' .. '\\u218F' | '\\u2C00' .. '\\u2FEF' | '\\u3001' .. '\\uD7FF' | '\\uF900' .. '\\uFDCF' | '\\uFDF0' .. '\\uFFFD' )
			DebugEnterAlt(1);
			// ../Grammars/OslcWhere.g:
			{
			DebugLocation(210, 5);
			if ((input.LA(1)>='A' && input.LA(1)<='Z')||(input.LA(1)>='a' && input.LA(1)<='z')||(input.LA(1)>='\u00C0' && input.LA(1)<='\u00D6')||(input.LA(1)>='\u00D8' && input.LA(1)<='\u00F6')||(input.LA(1)>='\u00F8' && input.LA(1)<='\u02FF')||(input.LA(1)>='\u0370' && input.LA(1)<='\u037D')||(input.LA(1)>='\u037F' && input.LA(1)<='\u1FFF')||(input.LA(1)>='\u200C' && input.LA(1)<='\u200D')||(input.LA(1)>='\u2070' && input.LA(1)<='\u218F')||(input.LA(1)>='\u2C00' && input.LA(1)<='\u2FEF')||(input.LA(1)>='\u3001' && input.LA(1)<='\uD7FF')||(input.LA(1)>='\uF900' && input.LA(1)<='\uFDCF')||(input.LA(1)>='\uFDF0' && input.LA(1)<='\uFFFD'))
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}


			}

		}
		finally
		{
			TraceOut("PN_CHARS_BASE", 25);
			LeaveRule("PN_CHARS_BASE", 25);
			LeaveRule_PN_CHARS_BASE();
		}
	}
	// $ANTLR end "PN_CHARS_BASE"

	partial void EnterRule_DIGIT();
	partial void LeaveRule_DIGIT();

	// $ANTLR start "DIGIT"
	[GrammarRule("DIGIT")]
	private void mDIGIT()
	{
		EnterRule_DIGIT();
		EnterRule("DIGIT", 26);
		TraceIn("DIGIT", 26);
		try
		{
			// ../Grammars/OslcWhere.g:227:5: ( '0' .. '9' )
			DebugEnterAlt(1);
			// ../Grammars/OslcWhere.g:
			{
			DebugLocation(227, 5);
			if ((input.LA(1)>='0' && input.LA(1)<='9'))
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}


			}

		}
		finally
		{
			TraceOut("DIGIT", 26);
			LeaveRule("DIGIT", 26);
			LeaveRule_DIGIT();
		}
	}
	// $ANTLR end "DIGIT"

	partial void EnterRule_EOL();
	partial void LeaveRule_EOL();

	// $ANTLR start "EOL"
	[GrammarRule("EOL")]
	private void mEOL()
	{
		EnterRule_EOL();
		EnterRule("EOL", 27);
		TraceIn("EOL", 27);
		try
		{
			// ../Grammars/OslcWhere.g:232:5: ( '\\n' | '\\r' )
			DebugEnterAlt(1);
			// ../Grammars/OslcWhere.g:
			{
			DebugLocation(232, 5);
			if (input.LA(1)=='\n'||input.LA(1)=='\r')
			{
				input.Consume();
			}
			else
			{
				MismatchedSetException mse = new MismatchedSetException(null,input);
				DebugRecognitionException(mse);
				Recover(mse);
				throw mse;
			}


			}

		}
		finally
		{
			TraceOut("EOL", 27);
			LeaveRule("EOL", 27);
			LeaveRule_EOL();
		}
	}
	// $ANTLR end "EOL"

	partial void EnterRule_REFERENCE();
	partial void LeaveRule_REFERENCE();

	// $ANTLR start "REFERENCE"
	[GrammarRule("REFERENCE")]
	private void mREFERENCE()
	{
		EnterRule_REFERENCE();
		EnterRule("REFERENCE", 28);
		TraceIn("REFERENCE", 28);
		try
		{
			int _type = REFERENCE;
			int _channel = DefaultTokenChannel;
			// ../Grammars/OslcWhere.g:235:5: ( '^^' )
			DebugEnterAlt(1);
			// ../Grammars/OslcWhere.g:235:7: '^^'
			{
			DebugLocation(235, 7);
			Match("^^"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("REFERENCE", 28);
			LeaveRule("REFERENCE", 28);
			LeaveRule_REFERENCE();
		}
	}
	// $ANTLR end "REFERENCE"

	partial void EnterRule_LESS_EQUAL();
	partial void LeaveRule_LESS_EQUAL();

	// $ANTLR start "LESS_EQUAL"
	[GrammarRule("LESS_EQUAL")]
	private void mLESS_EQUAL()
	{
		EnterRule_LESS_EQUAL();
		EnterRule("LESS_EQUAL", 29);
		TraceIn("LESS_EQUAL", 29);
		try
		{
			int _type = LESS_EQUAL;
			int _channel = DefaultTokenChannel;
			// ../Grammars/OslcWhere.g:239:5: ( '<=' )
			DebugEnterAlt(1);
			// ../Grammars/OslcWhere.g:239:7: '<='
			{
			DebugLocation(239, 7);
			Match("<="); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("LESS_EQUAL", 29);
			LeaveRule("LESS_EQUAL", 29);
			LeaveRule_LESS_EQUAL();
		}
	}
	// $ANTLR end "LESS_EQUAL"

	partial void EnterRule_GREATER_EQUAL();
	partial void LeaveRule_GREATER_EQUAL();

	// $ANTLR start "GREATER_EQUAL"
	[GrammarRule("GREATER_EQUAL")]
	private void mGREATER_EQUAL()
	{
		EnterRule_GREATER_EQUAL();
		EnterRule("GREATER_EQUAL", 30);
		TraceIn("GREATER_EQUAL", 30);
		try
		{
			int _type = GREATER_EQUAL;
			int _channel = DefaultTokenChannel;
			// ../Grammars/OslcWhere.g:243:5: ( '>=' )
			DebugEnterAlt(1);
			// ../Grammars/OslcWhere.g:243:7: '>='
			{
			DebugLocation(243, 7);
			Match(">="); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("GREATER_EQUAL", 30);
			LeaveRule("GREATER_EQUAL", 30);
			LeaveRule_GREATER_EQUAL();
		}
	}
	// $ANTLR end "GREATER_EQUAL"

	partial void EnterRule_NOT_EQUAL();
	partial void LeaveRule_NOT_EQUAL();

	// $ANTLR start "NOT_EQUAL"
	[GrammarRule("NOT_EQUAL")]
	private void mNOT_EQUAL()
	{
		EnterRule_NOT_EQUAL();
		EnterRule("NOT_EQUAL", 31);
		TraceIn("NOT_EQUAL", 31);
		try
		{
			int _type = NOT_EQUAL;
			int _channel = DefaultTokenChannel;
			// ../Grammars/OslcWhere.g:247:5: ( '!=' )
			DebugEnterAlt(1);
			// ../Grammars/OslcWhere.g:247:7: '!='
			{
			DebugLocation(247, 7);
			Match("!="); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("NOT_EQUAL", 31);
			LeaveRule("NOT_EQUAL", 31);
			LeaveRule_NOT_EQUAL();
		}
	}
	// $ANTLR end "NOT_EQUAL"

	partial void EnterRule_AND();
	partial void LeaveRule_AND();

	// $ANTLR start "AND"
	[GrammarRule("AND")]
	private void mAND()
	{
		EnterRule_AND();
		EnterRule("AND", 32);
		TraceIn("AND", 32);
		try
		{
			int _type = AND;
			int _channel = DefaultTokenChannel;
			// ../Grammars/OslcWhere.g:251:5: ( '&&' )
			DebugEnterAlt(1);
			// ../Grammars/OslcWhere.g:251:7: '&&'
			{
			DebugLocation(251, 7);
			Match("&&"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("AND", 32);
			LeaveRule("AND", 32);
			LeaveRule_AND();
		}
	}
	// $ANTLR end "AND"

	partial void EnterRule_OR();
	partial void LeaveRule_OR();

	// $ANTLR start "OR"
	[GrammarRule("OR")]
	private void mOR()
	{
		EnterRule_OR();
		EnterRule("OR", 33);
		TraceIn("OR", 33);
		try
		{
			int _type = OR;
			int _channel = DefaultTokenChannel;
			// ../Grammars/OslcWhere.g:255:5: ( '||' )
			DebugEnterAlt(1);
			// ../Grammars/OslcWhere.g:255:7: '||'
			{
			DebugLocation(255, 7);
			Match("||"); 


			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("OR", 33);
			LeaveRule("OR", 33);
			LeaveRule_OR();
		}
	}
	// $ANTLR end "OR"

	partial void EnterRule_OPEN_BRACE();
	partial void LeaveRule_OPEN_BRACE();

	// $ANTLR start "OPEN_BRACE"
	[GrammarRule("OPEN_BRACE")]
	private void mOPEN_BRACE()
	{
		EnterRule_OPEN_BRACE();
		EnterRule("OPEN_BRACE", 34);
		TraceIn("OPEN_BRACE", 34);
		try
		{
			int _type = OPEN_BRACE;
			int _channel = DefaultTokenChannel;
			// ../Grammars/OslcWhere.g:259:5: ( '(' )
			DebugEnterAlt(1);
			// ../Grammars/OslcWhere.g:259:7: '('
			{
			DebugLocation(259, 7);
			Match('('); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("OPEN_BRACE", 34);
			LeaveRule("OPEN_BRACE", 34);
			LeaveRule_OPEN_BRACE();
		}
	}
	// $ANTLR end "OPEN_BRACE"

	partial void EnterRule_CLOSE_BRACE();
	partial void LeaveRule_CLOSE_BRACE();

	// $ANTLR start "CLOSE_BRACE"
	[GrammarRule("CLOSE_BRACE")]
	private void mCLOSE_BRACE()
	{
		EnterRule_CLOSE_BRACE();
		EnterRule("CLOSE_BRACE", 35);
		TraceIn("CLOSE_BRACE", 35);
		try
		{
			int _type = CLOSE_BRACE;
			int _channel = DefaultTokenChannel;
			// ../Grammars/OslcWhere.g:263:5: ( ')' )
			DebugEnterAlt(1);
			// ../Grammars/OslcWhere.g:263:7: ')'
			{
			DebugLocation(263, 7);
			Match(')'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("CLOSE_BRACE", 35);
			LeaveRule("CLOSE_BRACE", 35);
			LeaveRule_CLOSE_BRACE();
		}
	}
	// $ANTLR end "CLOSE_BRACE"

	partial void EnterRule_OPEN_CURLY_BRACE();
	partial void LeaveRule_OPEN_CURLY_BRACE();

	// $ANTLR start "OPEN_CURLY_BRACE"
	[GrammarRule("OPEN_CURLY_BRACE")]
	private void mOPEN_CURLY_BRACE()
	{
		EnterRule_OPEN_CURLY_BRACE();
		EnterRule("OPEN_CURLY_BRACE", 36);
		TraceIn("OPEN_CURLY_BRACE", 36);
		try
		{
			int _type = OPEN_CURLY_BRACE;
			int _channel = DefaultTokenChannel;
			// ../Grammars/OslcWhere.g:267:5: ( '{' )
			DebugEnterAlt(1);
			// ../Grammars/OslcWhere.g:267:7: '{'
			{
			DebugLocation(267, 7);
			Match('{'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("OPEN_CURLY_BRACE", 36);
			LeaveRule("OPEN_CURLY_BRACE", 36);
			LeaveRule_OPEN_CURLY_BRACE();
		}
	}
	// $ANTLR end "OPEN_CURLY_BRACE"

	partial void EnterRule_CLOSE_CURLY_BRACE();
	partial void LeaveRule_CLOSE_CURLY_BRACE();

	// $ANTLR start "CLOSE_CURLY_BRACE"
	[GrammarRule("CLOSE_CURLY_BRACE")]
	private void mCLOSE_CURLY_BRACE()
	{
		EnterRule_CLOSE_CURLY_BRACE();
		EnterRule("CLOSE_CURLY_BRACE", 37);
		TraceIn("CLOSE_CURLY_BRACE", 37);
		try
		{
			int _type = CLOSE_CURLY_BRACE;
			int _channel = DefaultTokenChannel;
			// ../Grammars/OslcWhere.g:271:5: ( '}' )
			DebugEnterAlt(1);
			// ../Grammars/OslcWhere.g:271:7: '}'
			{
			DebugLocation(271, 7);
			Match('}'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("CLOSE_CURLY_BRACE", 37);
			LeaveRule("CLOSE_CURLY_BRACE", 37);
			LeaveRule_CLOSE_CURLY_BRACE();
		}
	}
	// $ANTLR end "CLOSE_CURLY_BRACE"

	partial void EnterRule_OPEN_SQUARE_BRACE();
	partial void LeaveRule_OPEN_SQUARE_BRACE();

	// $ANTLR start "OPEN_SQUARE_BRACE"
	[GrammarRule("OPEN_SQUARE_BRACE")]
	private void mOPEN_SQUARE_BRACE()
	{
		EnterRule_OPEN_SQUARE_BRACE();
		EnterRule("OPEN_SQUARE_BRACE", 38);
		TraceIn("OPEN_SQUARE_BRACE", 38);
		try
		{
			int _type = OPEN_SQUARE_BRACE;
			int _channel = DefaultTokenChannel;
			// ../Grammars/OslcWhere.g:275:5: ( '[' )
			DebugEnterAlt(1);
			// ../Grammars/OslcWhere.g:275:7: '['
			{
			DebugLocation(275, 7);
			Match('['); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("OPEN_SQUARE_BRACE", 38);
			LeaveRule("OPEN_SQUARE_BRACE", 38);
			LeaveRule_OPEN_SQUARE_BRACE();
		}
	}
	// $ANTLR end "OPEN_SQUARE_BRACE"

	partial void EnterRule_CLOSE_SQUARE_BRACE();
	partial void LeaveRule_CLOSE_SQUARE_BRACE();

	// $ANTLR start "CLOSE_SQUARE_BRACE"
	[GrammarRule("CLOSE_SQUARE_BRACE")]
	private void mCLOSE_SQUARE_BRACE()
	{
		EnterRule_CLOSE_SQUARE_BRACE();
		EnterRule("CLOSE_SQUARE_BRACE", 39);
		TraceIn("CLOSE_SQUARE_BRACE", 39);
		try
		{
			int _type = CLOSE_SQUARE_BRACE;
			int _channel = DefaultTokenChannel;
			// ../Grammars/OslcWhere.g:279:5: ( ']' )
			DebugEnterAlt(1);
			// ../Grammars/OslcWhere.g:279:7: ']'
			{
			DebugLocation(279, 7);
			Match(']'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("CLOSE_SQUARE_BRACE", 39);
			LeaveRule("CLOSE_SQUARE_BRACE", 39);
			LeaveRule_CLOSE_SQUARE_BRACE();
		}
	}
	// $ANTLR end "CLOSE_SQUARE_BRACE"

	partial void EnterRule_SEMICOLON();
	partial void LeaveRule_SEMICOLON();

	// $ANTLR start "SEMICOLON"
	[GrammarRule("SEMICOLON")]
	private void mSEMICOLON()
	{
		EnterRule_SEMICOLON();
		EnterRule("SEMICOLON", 40);
		TraceIn("SEMICOLON", 40);
		try
		{
			int _type = SEMICOLON;
			int _channel = DefaultTokenChannel;
			// ../Grammars/OslcWhere.g:283:5: ( ';' )
			DebugEnterAlt(1);
			// ../Grammars/OslcWhere.g:283:7: ';'
			{
			DebugLocation(283, 7);
			Match(';'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("SEMICOLON", 40);
			LeaveRule("SEMICOLON", 40);
			LeaveRule_SEMICOLON();
		}
	}
	// $ANTLR end "SEMICOLON"

	partial void EnterRule_DOT();
	partial void LeaveRule_DOT();

	// $ANTLR start "DOT"
	[GrammarRule("DOT")]
	private void mDOT()
	{
		EnterRule_DOT();
		EnterRule("DOT", 41);
		TraceIn("DOT", 41);
		try
		{
			int _type = DOT;
			int _channel = DefaultTokenChannel;
			// ../Grammars/OslcWhere.g:287:5: ( '.' )
			DebugEnterAlt(1);
			// ../Grammars/OslcWhere.g:287:7: '.'
			{
			DebugLocation(287, 7);
			Match('.'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("DOT", 41);
			LeaveRule("DOT", 41);
			LeaveRule_DOT();
		}
	}
	// $ANTLR end "DOT"

	partial void EnterRule_PLUS();
	partial void LeaveRule_PLUS();

	// $ANTLR start "PLUS"
	[GrammarRule("PLUS")]
	private void mPLUS()
	{
		EnterRule_PLUS();
		EnterRule("PLUS", 42);
		TraceIn("PLUS", 42);
		try
		{
			int _type = PLUS;
			int _channel = DefaultTokenChannel;
			// ../Grammars/OslcWhere.g:291:5: ( '+' )
			DebugEnterAlt(1);
			// ../Grammars/OslcWhere.g:291:7: '+'
			{
			DebugLocation(291, 7);
			Match('+'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("PLUS", 42);
			LeaveRule("PLUS", 42);
			LeaveRule_PLUS();
		}
	}
	// $ANTLR end "PLUS"

	partial void EnterRule_MINUS();
	partial void LeaveRule_MINUS();

	// $ANTLR start "MINUS"
	[GrammarRule("MINUS")]
	private void mMINUS()
	{
		EnterRule_MINUS();
		EnterRule("MINUS", 43);
		TraceIn("MINUS", 43);
		try
		{
			int _type = MINUS;
			int _channel = DefaultTokenChannel;
			// ../Grammars/OslcWhere.g:295:5: ( '-' )
			DebugEnterAlt(1);
			// ../Grammars/OslcWhere.g:295:7: '-'
			{
			DebugLocation(295, 7);
			Match('-'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("MINUS", 43);
			LeaveRule("MINUS", 43);
			LeaveRule_MINUS();
		}
	}
	// $ANTLR end "MINUS"

	partial void EnterRule_ASTERISK();
	partial void LeaveRule_ASTERISK();

	// $ANTLR start "ASTERISK"
	[GrammarRule("ASTERISK")]
	private void mASTERISK()
	{
		EnterRule_ASTERISK();
		EnterRule("ASTERISK", 44);
		TraceIn("ASTERISK", 44);
		try
		{
			int _type = ASTERISK;
			int _channel = DefaultTokenChannel;
			// ../Grammars/OslcWhere.g:299:5: ( '*' )
			DebugEnterAlt(1);
			// ../Grammars/OslcWhere.g:299:7: '*'
			{
			DebugLocation(299, 7);
			Match('*'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("ASTERISK", 44);
			LeaveRule("ASTERISK", 44);
			LeaveRule_ASTERISK();
		}
	}
	// $ANTLR end "ASTERISK"

	partial void EnterRule_COMMA();
	partial void LeaveRule_COMMA();

	// $ANTLR start "COMMA"
	[GrammarRule("COMMA")]
	private void mCOMMA()
	{
		EnterRule_COMMA();
		EnterRule("COMMA", 45);
		TraceIn("COMMA", 45);
		try
		{
			int _type = COMMA;
			int _channel = DefaultTokenChannel;
			// ../Grammars/OslcWhere.g:303:5: ( ',' )
			DebugEnterAlt(1);
			// ../Grammars/OslcWhere.g:303:7: ','
			{
			DebugLocation(303, 7);
			Match(','); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("COMMA", 45);
			LeaveRule("COMMA", 45);
			LeaveRule_COMMA();
		}
	}
	// $ANTLR end "COMMA"

	partial void EnterRule_NOT();
	partial void LeaveRule_NOT();

	// $ANTLR start "NOT"
	[GrammarRule("NOT")]
	private void mNOT()
	{
		EnterRule_NOT();
		EnterRule("NOT", 46);
		TraceIn("NOT", 46);
		try
		{
			int _type = NOT;
			int _channel = DefaultTokenChannel;
			// ../Grammars/OslcWhere.g:307:5: ( '!' )
			DebugEnterAlt(1);
			// ../Grammars/OslcWhere.g:307:7: '!'
			{
			DebugLocation(307, 7);
			Match('!'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("NOT", 46);
			LeaveRule("NOT", 46);
			LeaveRule_NOT();
		}
	}
	// $ANTLR end "NOT"

	partial void EnterRule_EQUAL();
	partial void LeaveRule_EQUAL();

	// $ANTLR start "EQUAL"
	[GrammarRule("EQUAL")]
	private void mEQUAL()
	{
		EnterRule_EQUAL();
		EnterRule("EQUAL", 47);
		TraceIn("EQUAL", 47);
		try
		{
			int _type = EQUAL;
			int _channel = DefaultTokenChannel;
			// ../Grammars/OslcWhere.g:311:5: ( '=' )
			DebugEnterAlt(1);
			// ../Grammars/OslcWhere.g:311:7: '='
			{
			DebugLocation(311, 7);
			Match('='); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("EQUAL", 47);
			LeaveRule("EQUAL", 47);
			LeaveRule_EQUAL();
		}
	}
	// $ANTLR end "EQUAL"

	partial void EnterRule_LESS();
	partial void LeaveRule_LESS();

	// $ANTLR start "LESS"
	[GrammarRule("LESS")]
	private void mLESS()
	{
		EnterRule_LESS();
		EnterRule("LESS", 48);
		TraceIn("LESS", 48);
		try
		{
			int _type = LESS;
			int _channel = DefaultTokenChannel;
			// ../Grammars/OslcWhere.g:315:5: ( '<' )
			DebugEnterAlt(1);
			// ../Grammars/OslcWhere.g:315:7: '<'
			{
			DebugLocation(315, 7);
			Match('<'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("LESS", 48);
			LeaveRule("LESS", 48);
			LeaveRule_LESS();
		}
	}
	// $ANTLR end "LESS"

	partial void EnterRule_GREATER();
	partial void LeaveRule_GREATER();

	// $ANTLR start "GREATER"
	[GrammarRule("GREATER")]
	private void mGREATER()
	{
		EnterRule_GREATER();
		EnterRule("GREATER", 49);
		TraceIn("GREATER", 49);
		try
		{
			int _type = GREATER;
			int _channel = DefaultTokenChannel;
			// ../Grammars/OslcWhere.g:319:5: ( '>' )
			DebugEnterAlt(1);
			// ../Grammars/OslcWhere.g:319:7: '>'
			{
			DebugLocation(319, 7);
			Match('>'); 

			}

			state.type = _type;
			state.channel = _channel;
		}
		finally
		{
			TraceOut("GREATER", 49);
			LeaveRule("GREATER", 49);
			LeaveRule_GREATER();
		}
	}
	// $ANTLR end "GREATER"

	public override void mTokens()
	{
		// ../Grammars/OslcWhere.g:1:8: ( COMPOUND_TERM | IN_TERM | IN_VALUES | LANGED_VALUE | SIMPLE_TERM | TERMS | TYPED_VALUE | T__50 | T__51 | T__52 | WS | PNAME_NS | PNAME_LN | IRI_REF | LANGTAG | BOOLEAN | DECIMAL | STRING_LITERAL | REFERENCE | LESS_EQUAL | GREATER_EQUAL | NOT_EQUAL | AND | OR | OPEN_BRACE | CLOSE_BRACE | OPEN_CURLY_BRACE | CLOSE_CURLY_BRACE | OPEN_SQUARE_BRACE | CLOSE_SQUARE_BRACE | SEMICOLON | DOT | PLUS | MINUS | ASTERISK | COMMA | NOT | EQUAL | LESS | GREATER )
		int alt21=40;
		try { DebugEnterDecision(21, false);
		try
		{
			alt21 = dfa21.Predict(input);
		}
		catch (NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
			throw;
		}
		} finally { DebugExitDecision(21); }
		switch (alt21)
		{
		case 1:
			DebugEnterAlt(1);
			// ../Grammars/OslcWhere.g:1:10: COMPOUND_TERM
			{
			DebugLocation(1, 10);
			mCOMPOUND_TERM(); 

			}
			break;
		case 2:
			DebugEnterAlt(2);
			// ../Grammars/OslcWhere.g:1:24: IN_TERM
			{
			DebugLocation(1, 24);
			mIN_TERM(); 

			}
			break;
		case 3:
			DebugEnterAlt(3);
			// ../Grammars/OslcWhere.g:1:32: IN_VALUES
			{
			DebugLocation(1, 32);
			mIN_VALUES(); 

			}
			break;
		case 4:
			DebugEnterAlt(4);
			// ../Grammars/OslcWhere.g:1:42: LANGED_VALUE
			{
			DebugLocation(1, 42);
			mLANGED_VALUE(); 

			}
			break;
		case 5:
			DebugEnterAlt(5);
			// ../Grammars/OslcWhere.g:1:55: SIMPLE_TERM
			{
			DebugLocation(1, 55);
			mSIMPLE_TERM(); 

			}
			break;
		case 6:
			DebugEnterAlt(6);
			// ../Grammars/OslcWhere.g:1:67: TERMS
			{
			DebugLocation(1, 67);
			mTERMS(); 

			}
			break;
		case 7:
			DebugEnterAlt(7);
			// ../Grammars/OslcWhere.g:1:73: TYPED_VALUE
			{
			DebugLocation(1, 73);
			mTYPED_VALUE(); 

			}
			break;
		case 8:
			DebugEnterAlt(8);
			// ../Grammars/OslcWhere.g:1:85: T__50
			{
			DebugLocation(1, 85);
			mT__50(); 

			}
			break;
		case 9:
			DebugEnterAlt(9);
			// ../Grammars/OslcWhere.g:1:91: T__51
			{
			DebugLocation(1, 91);
			mT__51(); 

			}
			break;
		case 10:
			DebugEnterAlt(10);
			// ../Grammars/OslcWhere.g:1:97: T__52
			{
			DebugLocation(1, 97);
			mT__52(); 

			}
			break;
		case 11:
			DebugEnterAlt(11);
			// ../Grammars/OslcWhere.g:1:103: WS
			{
			DebugLocation(1, 103);
			mWS(); 

			}
			break;
		case 12:
			DebugEnterAlt(12);
			// ../Grammars/OslcWhere.g:1:106: PNAME_NS
			{
			DebugLocation(1, 106);
			mPNAME_NS(); 

			}
			break;
		case 13:
			DebugEnterAlt(13);
			// ../Grammars/OslcWhere.g:1:115: PNAME_LN
			{
			DebugLocation(1, 115);
			mPNAME_LN(); 

			}
			break;
		case 14:
			DebugEnterAlt(14);
			// ../Grammars/OslcWhere.g:1:124: IRI_REF
			{
			DebugLocation(1, 124);
			mIRI_REF(); 

			}
			break;
		case 15:
			DebugEnterAlt(15);
			// ../Grammars/OslcWhere.g:1:132: LANGTAG
			{
			DebugLocation(1, 132);
			mLANGTAG(); 

			}
			break;
		case 16:
			DebugEnterAlt(16);
			// ../Grammars/OslcWhere.g:1:140: BOOLEAN
			{
			DebugLocation(1, 140);
			mBOOLEAN(); 

			}
			break;
		case 17:
			DebugEnterAlt(17);
			// ../Grammars/OslcWhere.g:1:148: DECIMAL
			{
			DebugLocation(1, 148);
			mDECIMAL(); 

			}
			break;
		case 18:
			DebugEnterAlt(18);
			// ../Grammars/OslcWhere.g:1:156: STRING_LITERAL
			{
			DebugLocation(1, 156);
			mSTRING_LITERAL(); 

			}
			break;
		case 19:
			DebugEnterAlt(19);
			// ../Grammars/OslcWhere.g:1:171: REFERENCE
			{
			DebugLocation(1, 171);
			mREFERENCE(); 

			}
			break;
		case 20:
			DebugEnterAlt(20);
			// ../Grammars/OslcWhere.g:1:181: LESS_EQUAL
			{
			DebugLocation(1, 181);
			mLESS_EQUAL(); 

			}
			break;
		case 21:
			DebugEnterAlt(21);
			// ../Grammars/OslcWhere.g:1:192: GREATER_EQUAL
			{
			DebugLocation(1, 192);
			mGREATER_EQUAL(); 

			}
			break;
		case 22:
			DebugEnterAlt(22);
			// ../Grammars/OslcWhere.g:1:206: NOT_EQUAL
			{
			DebugLocation(1, 206);
			mNOT_EQUAL(); 

			}
			break;
		case 23:
			DebugEnterAlt(23);
			// ../Grammars/OslcWhere.g:1:216: AND
			{
			DebugLocation(1, 216);
			mAND(); 

			}
			break;
		case 24:
			DebugEnterAlt(24);
			// ../Grammars/OslcWhere.g:1:220: OR
			{
			DebugLocation(1, 220);
			mOR(); 

			}
			break;
		case 25:
			DebugEnterAlt(25);
			// ../Grammars/OslcWhere.g:1:223: OPEN_BRACE
			{
			DebugLocation(1, 223);
			mOPEN_BRACE(); 

			}
			break;
		case 26:
			DebugEnterAlt(26);
			// ../Grammars/OslcWhere.g:1:234: CLOSE_BRACE
			{
			DebugLocation(1, 234);
			mCLOSE_BRACE(); 

			}
			break;
		case 27:
			DebugEnterAlt(27);
			// ../Grammars/OslcWhere.g:1:246: OPEN_CURLY_BRACE
			{
			DebugLocation(1, 246);
			mOPEN_CURLY_BRACE(); 

			}
			break;
		case 28:
			DebugEnterAlt(28);
			// ../Grammars/OslcWhere.g:1:263: CLOSE_CURLY_BRACE
			{
			DebugLocation(1, 263);
			mCLOSE_CURLY_BRACE(); 

			}
			break;
		case 29:
			DebugEnterAlt(29);
			// ../Grammars/OslcWhere.g:1:281: OPEN_SQUARE_BRACE
			{
			DebugLocation(1, 281);
			mOPEN_SQUARE_BRACE(); 

			}
			break;
		case 30:
			DebugEnterAlt(30);
			// ../Grammars/OslcWhere.g:1:299: CLOSE_SQUARE_BRACE
			{
			DebugLocation(1, 299);
			mCLOSE_SQUARE_BRACE(); 

			}
			break;
		case 31:
			DebugEnterAlt(31);
			// ../Grammars/OslcWhere.g:1:318: SEMICOLON
			{
			DebugLocation(1, 318);
			mSEMICOLON(); 

			}
			break;
		case 32:
			DebugEnterAlt(32);
			// ../Grammars/OslcWhere.g:1:328: DOT
			{
			DebugLocation(1, 328);
			mDOT(); 

			}
			break;
		case 33:
			DebugEnterAlt(33);
			// ../Grammars/OslcWhere.g:1:332: PLUS
			{
			DebugLocation(1, 332);
			mPLUS(); 

			}
			break;
		case 34:
			DebugEnterAlt(34);
			// ../Grammars/OslcWhere.g:1:337: MINUS
			{
			DebugLocation(1, 337);
			mMINUS(); 

			}
			break;
		case 35:
			DebugEnterAlt(35);
			// ../Grammars/OslcWhere.g:1:343: ASTERISK
			{
			DebugLocation(1, 343);
			mASTERISK(); 

			}
			break;
		case 36:
			DebugEnterAlt(36);
			// ../Grammars/OslcWhere.g:1:352: COMMA
			{
			DebugLocation(1, 352);
			mCOMMA(); 

			}
			break;
		case 37:
			DebugEnterAlt(37);
			// ../Grammars/OslcWhere.g:1:358: NOT
			{
			DebugLocation(1, 358);
			mNOT(); 

			}
			break;
		case 38:
			DebugEnterAlt(38);
			// ../Grammars/OslcWhere.g:1:362: EQUAL
			{
			DebugLocation(1, 362);
			mEQUAL(); 

			}
			break;
		case 39:
			DebugEnterAlt(39);
			// ../Grammars/OslcWhere.g:1:368: LESS
			{
			DebugLocation(1, 368);
			mLESS(); 

			}
			break;
		case 40:
			DebugEnterAlt(40);
			// ../Grammars/OslcWhere.g:1:373: GREATER
			{
			DebugLocation(1, 373);
			mGREATER(); 

			}
			break;

		}

	}


	#region DFA
	DFA15 dfa15;
	DFA21 dfa21;

	protected override void InitDFAs()
	{
		base.InitDFAs();
		dfa15 = new DFA15(this);
		dfa21 = new DFA21(this);
	}

	private class DFA15 : DFA
	{
		private const string DFA15_eotS =
			"\x2\xFFFF\x1\x5\x3\xFFFF";
		private const string DFA15_eofS =
			"\x6\xFFFF";
		private const string DFA15_minS =
			"\x1\x2B\x2\x2E\x3\xFFFF";
		private const string DFA15_maxS =
			"\x3\x39\x3\xFFFF";
		private const string DFA15_acceptS =
			"\x3\xFFFF\x1\x2\x1\x1\x1\x3";
		private const string DFA15_specialS =
			"\x6\xFFFF}>";
		private static readonly string[] DFA15_transitionS =
			{
				"\x1\x1\x1\xFFFF\x1\x1\x1\x3\x1\xFFFF\xA\x2",
				"\x1\x3\x1\xFFFF\xA\x2",
				"\x1\x4\x1\xFFFF\xA\x2",
				"",
				"",
				""
			};

		private static readonly short[] DFA15_eot = DFA.UnpackEncodedString(DFA15_eotS);
		private static readonly short[] DFA15_eof = DFA.UnpackEncodedString(DFA15_eofS);
		private static readonly char[] DFA15_min = DFA.UnpackEncodedStringToUnsignedChars(DFA15_minS);
		private static readonly char[] DFA15_max = DFA.UnpackEncodedStringToUnsignedChars(DFA15_maxS);
		private static readonly short[] DFA15_accept = DFA.UnpackEncodedString(DFA15_acceptS);
		private static readonly short[] DFA15_special = DFA.UnpackEncodedString(DFA15_specialS);
		private static readonly short[][] DFA15_transition;

		static DFA15()
		{
			int numStates = DFA15_transitionS.Length;
			DFA15_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA15_transition[i] = DFA.UnpackEncodedString(DFA15_transitionS[i]);
			}
		}

		public DFA15( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 15;
			this.eot = DFA15_eot;
			this.eof = DFA15_eof;
			this.min = DFA15_min;
			this.max = DFA15_max;
			this.accept = DFA15_accept;
			this.special = DFA15_special;
			this.transition = DFA15_transition;
		}

		public override string Description { get { return "167:1: DECIMAL : ( ( MINUS | PLUS )? ( DIGIT )+ DOT ( DIGIT )* | ( MINUS | PLUS )? DOT ( DIGIT )+ | ( MINUS | PLUS )? ( DIGIT )+ );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

	private class DFA21 : DFA
	{
		private const string DFA21_eotS =
			"\x6\xFFFF\x1\x2C\x2\xFFFF\x1\x2E\x1\x31\x2\xFFFF\x1\x33\x1\xFFFF\x1\x34"+
			"\x2\xFFFF\x1\x36\x1\x38\x9\xFFFF\x1\x39\x12\xFFFF\x1\x42\x19\xFFFF\x1"+
			"\x53\x6\xFFFF\x1\x5A\x2\xFFFF\x1\x53\x8\xFFFF\x1\x63\xB\xFFFF\x1\x6E"+
			"\xA\xFFFF\x1\x78\x1\x79\x1\xFFFF\x1\x7B\x2\xFFFF\x1\x7C\x2\xFFFF";
		private const string DFA21_eofS =
			"\x7D\xFFFF";
		private const string DFA21_minS =
			"\x1\x9\x5\x2D\x1\x9\x1\xFFFF\x1\x2D\x1\x30\x1\x21\x1\xFFFF\x1\x2D\x1"+
			"\x2E\x1\xFFFF\x1\x30\x2\xFFFF\x2\x3D\x9\xFFFF\x1\x2E\x3\xFFFF\x9\x2D"+
			"\x3\xFFFF\x1\x2D\x2\xFFFF\x1\x21\x9\xFFFF\x8\x2D\x1\xFFFF\x10\x2D\x1"+
			"\xFFFF\x6\x2D\x1\xFFFF\x8\x2D\x1\xFFFF\xA\x2D\x1\xFFFF\x9\x2D\x2\xFFFF"+
			"\x1\x2D\x2\xFFFF";
		private const string DFA21_maxS =
			"\x6\xFFFD\x1\x69\x1\xFFFF\x2\xFFFD\x1\xFFFF\x1\xFFFF\x1\xFFFD\x1\x39"+
			"\x1\xFFFF\x1\x39\x2\xFFFF\x2\x3D\x9\xFFFF\x1\x39\x3\xFFFF\x9\xFFFD\x3"+
			"\xFFFF\x1\xFFFD\x2\xFFFF\x1\xFFFF\x9\xFFFF\x8\xFFFD\x1\xFFFF\x10\xFFFD"+
			"\x1\xFFFF\x6\xFFFD\x1\xFFFF\x8\xFFFD\x1\xFFFF\xA\xFFFD\x1\xFFFF\x9\xFFFD"+
			"\x2\xFFFF\x1\xFFFD\x2\xFFFF";
		private const string DFA21_acceptS =
			"\x7\xFFFF\x1\xB\x3\xFFFF\x1\xF\x2\xFFFF\x1\x11\x1\xFFFF\x1\x12\x1\x13"+
			"\x2\xFFFF\x1\x17\x1\x18\x1\x19\x1\x1A\x1\x1B\x1\x1C\x1\x1D\x1\x1E\x1"+
			"\x1F\x1\xFFFF\x1\x23\x1\x24\x1\x26\x9\xFFFF\x1\x9\x1\xA\x1\x8\x1\xFFFF"+
			"\x1\xC\x1\xD\x1\xFFFF\x1\x27\x1\xE\x1\x21\x1\x20\x1\x15\x1\x28\x1\x16"+
			"\x1\x25\x1\x22\x8\xFFFF\x1\x14\x10\xFFFF\x1\x10\x6\xFFFF\x1\x6\x8\xFFFF"+
			"\x1\x2\xA\xFFFF\x1\x3\x9\xFFFF\x1\x5\x1\x7\x1\xFFFF\x1\x4\x1\x1";
		private const string DFA21_specialS =
			"\x7D\xFFFF}>";
		private static readonly string[] DFA21_transitionS =
			{
				"\x2\x7\x2\xFFFF\x1\x7\x12\xFFFF\x1\x6\x1\x13\x1\x10\x3\xFFFF\x1\x14"+
				"\x1\xFFFF\x1\x16\x1\x17\x1\x1E\x1\xD\x1\x1F\x1\x1D\x1\xF\x1\xFFFF\xA"+
				"\xE\x1\x9\x1\x1C\x1\xA\x1\x20\x1\x12\x1\xFFFF\x1\xB\x1A\xC\x1\x1A\x1"+
				"\xFFFF\x1\x1B\x1\x11\x2\xFFFF\x2\xC\x1\x1\x2\xC\x1\x8\x2\xC\x1\x2\x2"+
				"\xC\x1\x3\x6\xC\x1\x4\x1\x5\x6\xC\x1\x18\x1\x15\x1\x19\x42\xFFFF\x17"+
				"\xC\x1\xFFFF\x1F\xC\x1\xFFFF\x208\xC\x70\xFFFF\xE\xC\x1\xFFFF\x1C81"+
				"\xC\xC\xFFFF\x2\xC\x62\xFFFF\x120\xC\xA70\xFFFF\x3F0\xC\x11\xFFFF\xA7FF"+
				"\xC\x2100\xFFFF\x4D0\xC\x20\xFFFF\x20E\xC",
				"\x1\x22\x1\x23\x1\xFFFF\xA\x22\x1\x9\x6\xFFFF\x1A\x22\x4\xFFFF\x1\x22"+
				"\x1\xFFFF\xE\x22\x1\x21\xB\x22\x3C\xFFFF\x1\x22\x8\xFFFF\x17\x22\x1"+
				"\xFFFF\x1F\x22\x1\xFFFF\x286\x22\x1\xFFFF\x1C81\x22\xC\xFFFF\x2\x22"+
				"\x31\xFFFF\x2\x22\x2F\xFFFF\x120\x22\xA70\xFFFF\x3F0\x22\x11\xFFFF\xA7FF"+
				"\x22\x2100\xFFFF\x4D0\x22\x20\xFFFF\x20E\x22",
				"\x1\x22\x1\x23\x1\xFFFF\xA\x22\x1\x9\x6\xFFFF\x1A\x22\x4\xFFFF\x1\x22"+
				"\x1\xFFFF\xD\x22\x1\x24\xC\x22\x3C\xFFFF\x1\x22\x8\xFFFF\x17\x22\x1"+
				"\xFFFF\x1F\x22\x1\xFFFF\x286\x22\x1\xFFFF\x1C81\x22\xC\xFFFF\x2\x22"+
				"\x31\xFFFF\x2\x22\x2F\xFFFF\x120\x22\xA70\xFFFF\x3F0\x22\x11\xFFFF\xA7FF"+
				"\x22\x2100\xFFFF\x4D0\x22\x20\xFFFF\x20E\x22",
				"\x1\x22\x1\x23\x1\xFFFF\xA\x22\x1\x9\x6\xFFFF\x1A\x22\x4\xFFFF\x1\x22"+
				"\x1\xFFFF\x1\x25\x19\x22\x3C\xFFFF\x1\x22\x8\xFFFF\x17\x22\x1\xFFFF"+
				"\x1F\x22\x1\xFFFF\x286\x22\x1\xFFFF\x1C81\x22\xC\xFFFF\x2\x22\x31\xFFFF"+
				"\x2\x22\x2F\xFFFF\x120\x22\xA70\xFFFF\x3F0\x22\x11\xFFFF\xA7FF\x22\x2100"+
				"\xFFFF\x4D0\x22\x20\xFFFF\x20E\x22",
				"\x1\x22\x1\x23\x1\xFFFF\xA\x22\x1\x9\x6\xFFFF\x1A\x22\x4\xFFFF\x1\x22"+
				"\x1\xFFFF\x8\x22\x1\x26\x11\x22\x3C\xFFFF\x1\x22\x8\xFFFF\x17\x22\x1"+
				"\xFFFF\x1F\x22\x1\xFFFF\x286\x22\x1\xFFFF\x1C81\x22\xC\xFFFF\x2\x22"+
				"\x31\xFFFF\x2\x22\x2F\xFFFF\x120\x22\xA70\xFFFF\x3F0\x22\x11\xFFFF\xA7FF"+
				"\x22\x2100\xFFFF\x4D0\x22\x20\xFFFF\x20E\x22",
				"\x1\x22\x1\x23\x1\xFFFF\xA\x22\x1\x9\x6\xFFFF\x1A\x22\x4\xFFFF\x1\x22"+
				"\x1\xFFFF\x4\x22\x1\x27\xC\x22\x1\x29\x6\x22\x1\x28\x1\x22\x3C\xFFFF"+
				"\x1\x22\x8\xFFFF\x17\x22\x1\xFFFF\x1F\x22\x1\xFFFF\x286\x22\x1\xFFFF"+
				"\x1C81\x22\xC\xFFFF\x2\x22\x31\xFFFF\x2\x22\x2F\xFFFF\x120\x22\xA70"+
				"\xFFFF\x3F0\x22\x11\xFFFF\xA7FF\x22\x2100\xFFFF\x4D0\x22\x20\xFFFF\x20E"+
				"\x22",
				"\x2\x7\x2\xFFFF\x1\x7\x12\xFFFF\x1\x7\x40\xFFFF\x1\x2A\x7\xFFFF\x1"+
				"\x2B",
				"",
				"\x1\x22\x1\x23\x1\xFFFF\xA\x22\x1\x9\x6\xFFFF\x1A\x22\x4\xFFFF\x1\x22"+
				"\x1\xFFFF\x1\x2D\x19\x22\x3C\xFFFF\x1\x22\x8\xFFFF\x17\x22\x1\xFFFF"+
				"\x1F\x22\x1\xFFFF\x286\x22\x1\xFFFF\x1C81\x22\xC\xFFFF\x2\x22\x31\xFFFF"+
				"\x2\x22\x2F\xFFFF\x120\x22\xA70\xFFFF\x3F0\x22\x11\xFFFF\xA7FF\x22\x2100"+
				"\xFFFF\x4D0\x22\x20\xFFFF\x20E\x22",
				"\xA\x2F\x7\xFFFF\x1A\x2F\x4\xFFFF\x1\x2F\x1\xFFFF\x1A\x2F\x45\xFFFF"+
				"\x17\x2F\x1\xFFFF\x1F\x2F\x1\xFFFF\x208\x2F\x70\xFFFF\xE\x2F\x1\xFFFF"+
				"\x1C81\x2F\xC\xFFFF\x2\x2F\x62\xFFFF\x120\x2F\xA70\xFFFF\x3F0\x2F\x11"+
				"\xFFFF\xA7FF\x2F\x2100\xFFFF\x4D0\x2F\x20\xFFFF\x20E\x2F",
				"\x1\x32\x1\xFFFF\x19\x32\x1\xFFFF\x1\x30\x1E\x32\x1\xFFFF\x1\x32\x1"+
				"\xFFFF\x1\x32\x1\xFFFF\x1A\x32\x3\xFFFF\xFF82\x32",
				"",
				"\x1\x22\x1\x23\x1\xFFFF\xA\x22\x1\x9\x6\xFFFF\x1A\x22\x4\xFFFF\x1\x22"+
				"\x1\xFFFF\x1A\x22\x3C\xFFFF\x1\x22\x8\xFFFF\x17\x22\x1\xFFFF\x1F\x22"+
				"\x1\xFFFF\x286\x22\x1\xFFFF\x1C81\x22\xC\xFFFF\x2\x22\x31\xFFFF\x2\x22"+
				"\x2F\xFFFF\x120\x22\xA70\xFFFF\x3F0\x22\x11\xFFFF\xA7FF\x22\x2100\xFFFF"+
				"\x4D0\x22\x20\xFFFF\x20E\x22",
				"\x1\xE\x1\xFFFF\xA\xE",
				"",
				"\xA\xE",
				"",
				"",
				"\x1\x35",
				"\x1\x37",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\xE\x1\xFFFF\xA\xE",
				"",
				"",
				"",
				"\x1\x22\x1\x23\x1\xFFFF\xA\x22\x1\x9\x6\xFFFF\x1A\x22\x4\xFFFF\x1\x22"+
				"\x1\xFFFF\xC\x22\x1\x3A\xD\x22\x3C\xFFFF\x1\x22\x8\xFFFF\x17\x22\x1"+
				"\xFFFF\x1F\x22\x1\xFFFF\x286\x22\x1\xFFFF\x1C81\x22\xC\xFFFF\x2\x22"+
				"\x31\xFFFF\x2\x22\x2F\xFFFF\x120\x22\xA70\xFFFF\x3F0\x22\x11\xFFFF\xA7FF"+
				"\x22\x2100\xFFFF\x4D0\x22\x20\xFFFF\x20E\x22",
				"\x1\x22\x1\x23\x1\xFFFF\xA\x22\x1\x9\x6\xFFFF\x1A\x22\x4\xFFFF\x1\x22"+
				"\x1\xFFFF\x1A\x22\x3C\xFFFF\x1\x22\x8\xFFFF\x17\x22\x1\xFFFF\x1F\x22"+
				"\x1\xFFFF\x286\x22\x1\xFFFF\x1C81\x22\xC\xFFFF\x2\x22\x31\xFFFF\x2\x22"+
				"\x2F\xFFFF\x120\x22\xA70\xFFFF\x3F0\x22\x11\xFFFF\xA7FF\x22\x2100\xFFFF"+
				"\x4D0\x22\x20\xFFFF\x20E\x22",
				"\x1\x22\x1\x23\x1\xFFFF\xA\x22\x7\xFFFF\x1A\x22\x4\xFFFF\x1\x22\x1"+
				"\xFFFF\x1A\x22\x3C\xFFFF\x1\x22\x8\xFFFF\x17\x22\x1\xFFFF\x1F\x22\x1"+
				"\xFFFF\x286\x22\x1\xFFFF\x1C81\x22\xC\xFFFF\x2\x22\x31\xFFFF\x2\x22"+
				"\x2F\xFFFF\x120\x22\xA70\xFFFF\x3F0\x22\x11\xFFFF\xA7FF\x22\x2100\xFFFF"+
				"\x4D0\x22\x20\xFFFF\x20E\x22",
				"\x1\x22\x1\x23\x1\xFFFF\xA\x22\x1\x9\x6\xFFFF\x1A\x22\x4\xFFFF\x1\x3B"+
				"\x1\xFFFF\x1A\x22\x3C\xFFFF\x1\x22\x8\xFFFF\x17\x22\x1\xFFFF\x1F\x22"+
				"\x1\xFFFF\x286\x22\x1\xFFFF\x1C81\x22\xC\xFFFF\x2\x22\x31\xFFFF\x2\x22"+
				"\x2F\xFFFF\x120\x22\xA70\xFFFF\x3F0\x22\x11\xFFFF\xA7FF\x22\x2100\xFFFF"+
				"\x4D0\x22\x20\xFFFF\x20E\x22",
				"\x1\x22\x1\x23\x1\xFFFF\xA\x22\x1\x9\x6\xFFFF\x1A\x22\x4\xFFFF\x1\x22"+
				"\x1\xFFFF\xD\x22\x1\x3C\xC\x22\x3C\xFFFF\x1\x22\x8\xFFFF\x17\x22\x1"+
				"\xFFFF\x1F\x22\x1\xFFFF\x286\x22\x1\xFFFF\x1C81\x22\xC\xFFFF\x2\x22"+
				"\x31\xFFFF\x2\x22\x2F\xFFFF\x120\x22\xA70\xFFFF\x3F0\x22\x11\xFFFF\xA7FF"+
				"\x22\x2100\xFFFF\x4D0\x22\x20\xFFFF\x20E\x22",
				"\x1\x22\x1\x23\x1\xFFFF\xA\x22\x1\x9\x6\xFFFF\x1A\x22\x4\xFFFF\x1\x22"+
				"\x1\xFFFF\xC\x22\x1\x3D\xD\x22\x3C\xFFFF\x1\x22\x8\xFFFF\x17\x22\x1"+
				"\xFFFF\x1F\x22\x1\xFFFF\x286\x22\x1\xFFFF\x1C81\x22\xC\xFFFF\x2\x22"+
				"\x31\xFFFF\x2\x22\x2F\xFFFF\x120\x22\xA70\xFFFF\x3F0\x22\x11\xFFFF\xA7FF"+
				"\x22\x2100\xFFFF\x4D0\x22\x20\xFFFF\x20E\x22",
				"\x1\x22\x1\x23\x1\xFFFF\xA\x22\x1\x9\x6\xFFFF\x1A\x22\x4\xFFFF\x1\x22"+
				"\x1\xFFFF\x11\x22\x1\x3E\x8\x22\x3C\xFFFF\x1\x22\x8\xFFFF\x17\x22\x1"+
				"\xFFFF\x1F\x22\x1\xFFFF\x286\x22\x1\xFFFF\x1C81\x22\xC\xFFFF\x2\x22"+
				"\x31\xFFFF\x2\x22\x2F\xFFFF\x120\x22\xA70\xFFFF\x3F0\x22\x11\xFFFF\xA7FF"+
				"\x22\x2100\xFFFF\x4D0\x22\x20\xFFFF\x20E\x22",
				"\x1\x22\x1\x23\x1\xFFFF\xA\x22\x1\x9\x6\xFFFF\x1A\x22\x4\xFFFF\x1\x22"+
				"\x1\xFFFF\xF\x22\x1\x3F\xA\x22\x3C\xFFFF\x1\x22\x8\xFFFF\x17\x22\x1"+
				"\xFFFF\x1F\x22\x1\xFFFF\x286\x22\x1\xFFFF\x1C81\x22\xC\xFFFF\x2\x22"+
				"\x31\xFFFF\x2\x22\x2F\xFFFF\x120\x22\xA70\xFFFF\x3F0\x22\x11\xFFFF\xA7FF"+
				"\x22\x2100\xFFFF\x4D0\x22\x20\xFFFF\x20E\x22",
				"\x1\x22\x1\x23\x1\xFFFF\xA\x22\x1\x9\x6\xFFFF\x1A\x22\x4\xFFFF\x1\x22"+
				"\x1\xFFFF\x14\x22\x1\x40\x5\x22\x3C\xFFFF\x1\x22\x8\xFFFF\x17\x22\x1"+
				"\xFFFF\x1F\x22\x1\xFFFF\x286\x22\x1\xFFFF\x1C81\x22\xC\xFFFF\x2\x22"+
				"\x31\xFFFF\x2\x22\x2F\xFFFF\x120\x22\xA70\xFFFF\x3F0\x22\x11\xFFFF\xA7FF"+
				"\x22\x2100\xFFFF\x4D0\x22\x20\xFFFF\x20E\x22",
				"",
				"",
				"",
				"\x1\x22\x1\x23\x1\xFFFF\xA\x22\x1\x9\x6\xFFFF\x1A\x22\x4\xFFFF\x1\x22"+
				"\x1\xFFFF\xB\x22\x1\x41\xE\x22\x3C\xFFFF\x1\x22\x8\xFFFF\x17\x22\x1"+
				"\xFFFF\x1F\x22\x1\xFFFF\x286\x22\x1\xFFFF\x1C81\x22\xC\xFFFF\x2\x22"+
				"\x31\xFFFF\x2\x22\x2F\xFFFF\x120\x22\xA70\xFFFF\x3F0\x22\x11\xFFFF\xA7FF"+
				"\x22\x2100\xFFFF\x4D0\x22\x20\xFFFF\x20E\x22",
				"",
				"",
				"\x1\x32\x1\xFFFF\x19\x32\x1\xFFFF\x1F\x32\x1\xFFFF\x1\x32\x1\xFFFF"+
				"\x1\x32\x1\xFFFF\x1A\x32\x3\xFFFF\xFF82\x32",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"",
				"\x1\x22\x1\x23\x1\xFFFF\xA\x22\x1\x9\x6\xFFFF\x1A\x22\x4\xFFFF\x1\x22"+
				"\x1\xFFFF\xF\x22\x1\x43\xA\x22\x3C\xFFFF\x1\x22\x8\xFFFF\x17\x22\x1"+
				"\xFFFF\x1F\x22\x1\xFFFF\x286\x22\x1\xFFFF\x1C81\x22\xC\xFFFF\x2\x22"+
				"\x31\xFFFF\x2\x22\x2F\xFFFF\x120\x22\xA70\xFFFF\x3F0\x22\x11\xFFFF\xA7FF"+
				"\x22\x2100\xFFFF\x4D0\x22\x20\xFFFF\x20E\x22",
				"\x1\x22\x1\x23\x1\xFFFF\xA\x22\x1\x9\x6\xFFFF\x1A\x22\x4\xFFFF\x1\x22"+
				"\x1\xFFFF\x13\x22\x1\x44\x1\x22\x1\x45\x4\x22\x3C\xFFFF\x1\x22\x8\xFFFF"+
				"\x17\x22\x1\xFFFF\x1F\x22\x1\xFFFF\x286\x22\x1\xFFFF\x1C81\x22\xC\xFFFF"+
				"\x2\x22\x31\xFFFF\x2\x22\x2F\xFFFF\x120\x22\xA70\xFFFF\x3F0\x22\x11"+
				"\xFFFF\xA7FF\x22\x2100\xFFFF\x4D0\x22\x20\xFFFF\x20E\x22",
				"\x1\x22\x1\x23\x1\xFFFF\xA\x22\x1\x9\x6\xFFFF\x1A\x22\x4\xFFFF\x1\x22"+
				"\x1\xFFFF\x6\x22\x1\x46\x13\x22\x3C\xFFFF\x1\x22\x8\xFFFF\x17\x22\x1"+
				"\xFFFF\x1F\x22\x1\xFFFF\x286\x22\x1\xFFFF\x1C81\x22\xC\xFFFF\x2\x22"+
				"\x31\xFFFF\x2\x22\x2F\xFFFF\x120\x22\xA70\xFFFF\x3F0\x22\x11\xFFFF\xA7FF"+
				"\x22\x2100\xFFFF\x4D0\x22\x20\xFFFF\x20E\x22",
				"\x1\x22\x1\x23\x1\xFFFF\xA\x22\x1\x9\x6\xFFFF\x1A\x22\x4\xFFFF\x1\x22"+
				"\x1\xFFFF\xF\x22\x1\x47\xA\x22\x3C\xFFFF\x1\x22\x8\xFFFF\x17\x22\x1"+
				"\xFFFF\x1F\x22\x1\xFFFF\x286\x22\x1\xFFFF\x1C81\x22\xC\xFFFF\x2\x22"+
				"\x31\xFFFF\x2\x22\x2F\xFFFF\x120\x22\xA70\xFFFF\x3F0\x22\x11\xFFFF\xA7FF"+
				"\x22\x2100\xFFFF\x4D0\x22\x20\xFFFF\x20E\x22",
				"\x1\x22\x1\x23\x1\xFFFF\xA\x22\x1\x9\x6\xFFFF\x1A\x22\x4\xFFFF\x1\x22"+
				"\x1\xFFFF\xC\x22\x1\x48\xD\x22\x3C\xFFFF\x1\x22\x8\xFFFF\x17\x22\x1"+
				"\xFFFF\x1F\x22\x1\xFFFF\x286\x22\x1\xFFFF\x1C81\x22\xC\xFFFF\x2\x22"+
				"\x31\xFFFF\x2\x22\x2F\xFFFF\x120\x22\xA70\xFFFF\x3F0\x22\x11\xFFFF\xA7FF"+
				"\x22\x2100\xFFFF\x4D0\x22\x20\xFFFF\x20E\x22",
				"\x1\x22\x1\x23\x1\xFFFF\xA\x22\x1\x9\x6\xFFFF\x1A\x22\x4\xFFFF\x1\x22"+
				"\x1\xFFFF\x4\x22\x1\x49\x15\x22\x3C\xFFFF\x1\x22\x8\xFFFF\x17\x22\x1"+
				"\xFFFF\x1F\x22\x1\xFFFF\x286\x22\x1\xFFFF\x1C81\x22\xC\xFFFF\x2\x22"+
				"\x31\xFFFF\x2\x22\x2F\xFFFF\x120\x22\xA70\xFFFF\x3F0\x22\x11\xFFFF\xA7FF"+
				"\x22\x2100\xFFFF\x4D0\x22\x20\xFFFF\x20E\x22",
				"\x1\x22\x1\x23\x1\xFFFF\xA\x22\x1\x9\x6\xFFFF\x1A\x22\x4\xFFFF\x1\x22"+
				"\x1\xFFFF\x4\x22\x1\x4A\x15\x22\x3C\xFFFF\x1\x22\x8\xFFFF\x17\x22\x1"+
				"\xFFFF\x1F\x22\x1\xFFFF\x286\x22\x1\xFFFF\x1C81\x22\xC\xFFFF\x2\x22"+
				"\x31\xFFFF\x2\x22\x2F\xFFFF\x120\x22\xA70\xFFFF\x3F0\x22\x11\xFFFF\xA7FF"+
				"\x22\x2100\xFFFF\x4D0\x22\x20\xFFFF\x20E\x22",
				"\x1\x22\x1\x23\x1\xFFFF\xA\x22\x1\x9\x6\xFFFF\x1A\x22\x4\xFFFF\x1\x22"+
				"\x1\xFFFF\x12\x22\x1\x4B\x7\x22\x3C\xFFFF\x1\x22\x8\xFFFF\x17\x22\x1"+
				"\xFFFF\x1F\x22\x1\xFFFF\x286\x22\x1\xFFFF\x1C81\x22\xC\xFFFF\x2\x22"+
				"\x31\xFFFF\x2\x22\x2F\xFFFF\x120\x22\xA70\xFFFF\x3F0\x22\x11\xFFFF\xA7FF"+
				"\x22\x2100\xFFFF\x4D0\x22\x20\xFFFF\x20E\x22",
				"",
				"\x1\x22\x1\x23\x1\xFFFF\xA\x22\x1\x9\x6\xFFFF\x1A\x22\x4\xFFFF\x1\x22"+
				"\x1\xFFFF\xE\x22\x1\x4C\xB\x22\x3C\xFFFF\x1\x22\x8\xFFFF\x17\x22\x1"+
				"\xFFFF\x1F\x22\x1\xFFFF\x286\x22\x1\xFFFF\x1C81\x22\xC\xFFFF\x2\x22"+
				"\x31\xFFFF\x2\x22\x2F\xFFFF\x120\x22\xA70\xFFFF\x3F0\x22\x11\xFFFF\xA7FF"+
				"\x22\x2100\xFFFF\x4D0\x22\x20\xFFFF\x20E\x22",
				"\x1\x22\x1\x23\x1\xFFFF\xA\x22\x1\x9\x6\xFFFF\x1A\x22\x4\xFFFF\x1\x22"+
				"\x1\xFFFF\x4\x22\x1\x4D\x15\x22\x3C\xFFFF\x1\x22\x8\xFFFF\x17\x22\x1"+
				"\xFFFF\x1F\x22\x1\xFFFF\x286\x22\x1\xFFFF\x1C81\x22\xC\xFFFF\x2\x22"+
				"\x31\xFFFF\x2\x22\x2F\xFFFF\x120\x22\xA70\xFFFF\x3F0\x22\x11\xFFFF\xA7FF"+
				"\x22\x2100\xFFFF\x4D0\x22\x20\xFFFF\x20E\x22",
				"\x1\x22\x1\x23\x1\xFFFF\xA\x22\x1\x9\x6\xFFFF\x1A\x22\x4\xFFFF\x1\x22"+
				"\x1\xFFFF\x1\x4E\x19\x22\x3C\xFFFF\x1\x22\x8\xFFFF\x17\x22\x1\xFFFF"+
				"\x1F\x22\x1\xFFFF\x286\x22\x1\xFFFF\x1C81\x22\xC\xFFFF\x2\x22\x31\xFFFF"+
				"\x2\x22\x2F\xFFFF\x120\x22\xA70\xFFFF\x3F0\x22\x11\xFFFF\xA7FF\x22\x2100"+
				"\xFFFF\x4D0\x22\x20\xFFFF\x20E\x22",
				"\x1\x22\x1\x23\x1\xFFFF\xA\x22\x1\x9\x6\xFFFF\x1A\x22\x4\xFFFF\x1\x22"+
				"\x1\xFFFF\x4\x22\x1\x4F\x15\x22\x3C\xFFFF\x1\x22\x8\xFFFF\x17\x22\x1"+
				"\xFFFF\x1F\x22\x1\xFFFF\x286\x22\x1\xFFFF\x1C81\x22\xC\xFFFF\x2\x22"+
				"\x31\xFFFF\x2\x22\x2F\xFFFF\x120\x22\xA70\xFFFF\x3F0\x22\x11\xFFFF\xA7FF"+
				"\x22\x2100\xFFFF\x4D0\x22\x20\xFFFF\x20E\x22",
				"\x1\x22\x1\x23\x1\xFFFF\xA\x22\x1\x9\x6\xFFFF\x1A\x22\x4\xFFFF\x1\x22"+
				"\x1\xFFFF\xB\x22\x1\x50\xE\x22\x3C\xFFFF\x1\x22\x8\xFFFF\x17\x22\x1"+
				"\xFFFF\x1F\x22\x1\xFFFF\x286\x22\x1\xFFFF\x1C81\x22\xC\xFFFF\x2\x22"+
				"\x31\xFFFF\x2\x22\x2F\xFFFF\x120\x22\xA70\xFFFF\x3F0\x22\x11\xFFFF\xA7FF"+
				"\x22\x2100\xFFFF\x4D0\x22\x20\xFFFF\x20E\x22",
				"\x1\x22\x1\x23\x1\xFFFF\xA\x22\x1\x9\x6\xFFFF\x1A\x22\x4\xFFFF\x1\x22"+
				"\x1\xFFFF\x12\x22\x1\x51\x7\x22\x3C\xFFFF\x1\x22\x8\xFFFF\x17\x22\x1"+
				"\xFFFF\x1F\x22\x1\xFFFF\x286\x22\x1\xFFFF\x1C81\x22\xC\xFFFF\x2\x22"+
				"\x31\xFFFF\x2\x22\x2F\xFFFF\x120\x22\xA70\xFFFF\x3F0\x22\x11\xFFFF\xA7FF"+
				"\x22\x2100\xFFFF\x4D0\x22\x20\xFFFF\x20E\x22",
				"\x1\x22\x1\x23\x1\xFFFF\xA\x22\x1\x9\x6\xFFFF\x1A\x22\x4\xFFFF\x1\x22"+
				"\x1\xFFFF\x3\x22\x1\x52\x16\x22\x3C\xFFFF\x1\x22\x8\xFFFF\x17\x22\x1"+
				"\xFFFF\x1F\x22\x1\xFFFF\x286\x22\x1\xFFFF\x1C81\x22\xC\xFFFF\x2\x22"+
				"\x31\xFFFF\x2\x22\x2F\xFFFF\x120\x22\xA70\xFFFF\x3F0\x22\x11\xFFFF\xA7FF"+
				"\x22\x2100\xFFFF\x4D0\x22\x20\xFFFF\x20E\x22",
				"\x1\x22\x1\x23\x1\xFFFF\xA\x22\x1\x9\x6\xFFFF\x1A\x22\x4\xFFFF\x1\x22"+
				"\x1\xFFFF\x1A\x22\x3C\xFFFF\x1\x22\x8\xFFFF\x17\x22\x1\xFFFF\x1F\x22"+
				"\x1\xFFFF\x286\x22\x1\xFFFF\x1C81\x22\xC\xFFFF\x2\x22\x31\xFFFF\x2\x22"+
				"\x2F\xFFFF\x120\x22\xA70\xFFFF\x3F0\x22\x11\xFFFF\xA7FF\x22\x2100\xFFFF"+
				"\x4D0\x22\x20\xFFFF\x20E\x22",
				"\x1\x22\x1\x23\x1\xFFFF\xA\x22\x1\x9\x6\xFFFF\x1A\x22\x4\xFFFF\x1\x22"+
				"\x1\xFFFF\x4\x22\x1\x54\x15\x22\x3C\xFFFF\x1\x22\x8\xFFFF\x17\x22\x1"+
				"\xFFFF\x1F\x22\x1\xFFFF\x286\x22\x1\xFFFF\x1C81\x22\xC\xFFFF\x2\x22"+
				"\x31\xFFFF\x2\x22\x2F\xFFFF\x120\x22\xA70\xFFFF\x3F0\x22\x11\xFFFF\xA7FF"+
				"\x22\x2100\xFFFF\x4D0\x22\x20\xFFFF\x20E\x22",
				"\x1\x22\x1\x23\x1\xFFFF\xA\x22\x1\x9\x6\xFFFF\x1A\x22\x4\xFFFF\x1\x22"+
				"\x1\xFFFF\x14\x22\x1\x55\x5\x22\x3C\xFFFF\x1\x22\x8\xFFFF\x17\x22\x1"+
				"\xFFFF\x1F\x22\x1\xFFFF\x286\x22\x1\xFFFF\x1C81\x22\xC\xFFFF\x2\x22"+
				"\x31\xFFFF\x2\x22\x2F\xFFFF\x120\x22\xA70\xFFFF\x3F0\x22\x11\xFFFF\xA7FF"+
				"\x22\x2100\xFFFF\x4D0\x22\x20\xFFFF\x20E\x22",
				"\x1\x22\x1\x23\x1\xFFFF\xA\x22\x1\x9\x6\xFFFF\x1A\x22\x4\xFFFF\x1\x22"+
				"\x1\xFFFF\x11\x22\x1\x56\x8\x22\x3C\xFFFF\x1\x22\x8\xFFFF\x17\x22\x1"+
				"\xFFFF\x1F\x22\x1\xFFFF\x286\x22\x1\xFFFF\x1C81\x22\xC\xFFFF\x2\x22"+
				"\x31\xFFFF\x2\x22\x2F\xFFFF\x120\x22\xA70\xFFFF\x3F0\x22\x11\xFFFF\xA7FF"+
				"\x22\x2100\xFFFF\x4D0\x22\x20\xFFFF\x20E\x22",
				"\x1\x22\x1\x23\x1\xFFFF\xA\x22\x1\x9\x6\xFFFF\x1A\x22\x4\xFFFF\x1\x22"+
				"\x1\xFFFF\xB\x22\x1\x57\xE\x22\x3C\xFFFF\x1\x22\x8\xFFFF\x17\x22\x1"+
				"\xFFFF\x1F\x22\x1\xFFFF\x286\x22\x1\xFFFF\x1C81\x22\xC\xFFFF\x2\x22"+
				"\x31\xFFFF\x2\x22\x2F\xFFFF\x120\x22\xA70\xFFFF\x3F0\x22\x11\xFFFF\xA7FF"+
				"\x22\x2100\xFFFF\x4D0\x22\x20\xFFFF\x20E\x22",
				"\x1\x22\x1\x23\x1\xFFFF\xA\x22\x1\x9\x6\xFFFF\x1A\x22\x4\xFFFF\x1\x22"+
				"\x1\xFFFF\x3\x22\x1\x58\x16\x22\x3C\xFFFF\x1\x22\x8\xFFFF\x17\x22\x1"+
				"\xFFFF\x1F\x22\x1\xFFFF\x286\x22\x1\xFFFF\x1C81\x22\xC\xFFFF\x2\x22"+
				"\x31\xFFFF\x2\x22\x2F\xFFFF\x120\x22\xA70\xFFFF\x3F0\x22\x11\xFFFF\xA7FF"+
				"\x22\x2100\xFFFF\x4D0\x22\x20\xFFFF\x20E\x22",
				"\x1\x22\x1\x23\x1\xFFFF\xA\x22\x1\x9\x6\xFFFF\x1A\x22\x4\xFFFF\x1\x22"+
				"\x1\xFFFF\x4\x22\x1\x59\x15\x22\x3C\xFFFF\x1\x22\x8\xFFFF\x17\x22\x1"+
				"\xFFFF\x1F\x22\x1\xFFFF\x286\x22\x1\xFFFF\x1C81\x22\xC\xFFFF\x2\x22"+
				"\x31\xFFFF\x2\x22\x2F\xFFFF\x120\x22\xA70\xFFFF\x3F0\x22\x11\xFFFF\xA7FF"+
				"\x22\x2100\xFFFF\x4D0\x22\x20\xFFFF\x20E\x22",
				"\x1\x22\x1\x23\x1\xFFFF\xA\x22\x1\x9\x6\xFFFF\x1A\x22\x4\xFFFF\x1\x22"+
				"\x1\xFFFF\x1A\x22\x3C\xFFFF\x1\x22\x8\xFFFF\x17\x22\x1\xFFFF\x1F\x22"+
				"\x1\xFFFF\x286\x22\x1\xFFFF\x1C81\x22\xC\xFFFF\x2\x22\x31\xFFFF\x2\x22"+
				"\x2F\xFFFF\x120\x22\xA70\xFFFF\x3F0\x22\x11\xFFFF\xA7FF\x22\x2100\xFFFF"+
				"\x4D0\x22\x20\xFFFF\x20E\x22",
				"\x1\x22\x1\x23\x1\xFFFF\xA\x22\x1\x9\x6\xFFFF\x1A\x22\x4\xFFFF\x1\x5B"+
				"\x1\xFFFF\x1A\x22\x3C\xFFFF\x1\x22\x8\xFFFF\x17\x22\x1\xFFFF\x1F\x22"+
				"\x1\xFFFF\x286\x22\x1\xFFFF\x1C81\x22\xC\xFFFF\x2\x22\x31\xFFFF\x2\x22"+
				"\x2F\xFFFF\x120\x22\xA70\xFFFF\x3F0\x22\x11\xFFFF\xA7FF\x22\x2100\xFFFF"+
				"\x4D0\x22\x20\xFFFF\x20E\x22",
				"",
				"\x1\x22\x1\x23\x1\xFFFF\xA\x22\x1\x9\x6\xFFFF\x1A\x22\x4\xFFFF\x1\x22"+
				"\x1\xFFFF\x1A\x22\x3C\xFFFF\x1\x22\x8\xFFFF\x17\x22\x1\xFFFF\x1F\x22"+
				"\x1\xFFFF\x286\x22\x1\xFFFF\x1C81\x22\xC\xFFFF\x2\x22\x31\xFFFF\x2\x22"+
				"\x2F\xFFFF\x120\x22\xA70\xFFFF\x3F0\x22\x11\xFFFF\xA7FF\x22\x2100\xFFFF"+
				"\x4D0\x22\x20\xFFFF\x20E\x22",
				"\x1\x22\x1\x23\x1\xFFFF\xA\x22\x1\x9\x6\xFFFF\x1A\x22\x4\xFFFF\x1\x22"+
				"\x1\xFFFF\xD\x22\x1\x5C\xC\x22\x3C\xFFFF\x1\x22\x8\xFFFF\x17\x22\x1"+
				"\xFFFF\x1F\x22\x1\xFFFF\x286\x22\x1\xFFFF\x1C81\x22\xC\xFFFF\x2\x22"+
				"\x31\xFFFF\x2\x22\x2F\xFFFF\x120\x22\xA70\xFFFF\x3F0\x22\x11\xFFFF\xA7FF"+
				"\x22\x2100\xFFFF\x4D0\x22\x20\xFFFF\x20E\x22",
				"\x1\x22\x1\x23\x1\xFFFF\xA\x22\x1\x9\x6\xFFFF\x1A\x22\x4\xFFFF\x1\x22"+
				"\x1\xFFFF\xC\x22\x1\x5D\xD\x22\x3C\xFFFF\x1\x22\x8\xFFFF\x17\x22\x1"+
				"\xFFFF\x1F\x22\x1\xFFFF\x286\x22\x1\xFFFF\x1C81\x22\xC\xFFFF\x2\x22"+
				"\x31\xFFFF\x2\x22\x2F\xFFFF\x120\x22\xA70\xFFFF\x3F0\x22\x11\xFFFF\xA7FF"+
				"\x22\x2100\xFFFF\x4D0\x22\x20\xFFFF\x20E\x22",
				"\x1\x22\x1\x23\x1\xFFFF\xA\x22\x1\x9\x6\xFFFF\x1A\x22\x4\xFFFF\x1\x22"+
				"\x1\xFFFF\x14\x22\x1\x5E\x5\x22\x3C\xFFFF\x1\x22\x8\xFFFF\x17\x22\x1"+
				"\xFFFF\x1F\x22\x1\xFFFF\x286\x22\x1\xFFFF\x1C81\x22\xC\xFFFF\x2\x22"+
				"\x31\xFFFF\x2\x22\x2F\xFFFF\x120\x22\xA70\xFFFF\x3F0\x22\x11\xFFFF\xA7FF"+
				"\x22\x2100\xFFFF\x4D0\x22\x20\xFFFF\x20E\x22",
				"\x1\x22\x1\x23\x1\xFFFF\xA\x22\x1\x9\x6\xFFFF\x1A\x22\x4\xFFFF\x1\x5F"+
				"\x1\xFFFF\x1A\x22\x3C\xFFFF\x1\x22\x8\xFFFF\x17\x22\x1\xFFFF\x1F\x22"+
				"\x1\xFFFF\x286\x22\x1\xFFFF\x1C81\x22\xC\xFFFF\x2\x22\x31\xFFFF\x2\x22"+
				"\x2F\xFFFF\x120\x22\xA70\xFFFF\x3F0\x22\x11\xFFFF\xA7FF\x22\x2100\xFFFF"+
				"\x4D0\x22\x20\xFFFF\x20E\x22",
				"\x1\x22\x1\x23\x1\xFFFF\xA\x22\x1\x9\x6\xFFFF\x1A\x22\x4\xFFFF\x1\x60"+
				"\x1\xFFFF\x1A\x22\x3C\xFFFF\x1\x22\x8\xFFFF\x17\x22\x1\xFFFF\x1F\x22"+
				"\x1\xFFFF\x286\x22\x1\xFFFF\x1C81\x22\xC\xFFFF\x2\x22\x31\xFFFF\x2\x22"+
				"\x2F\xFFFF\x120\x22\xA70\xFFFF\x3F0\x22\x11\xFFFF\xA7FF\x22\x2100\xFFFF"+
				"\x4D0\x22\x20\xFFFF\x20E\x22",
				"",
				"\x1\x22\x1\x23\x1\xFFFF\xA\x22\x1\x9\x6\xFFFF\x1A\x22\x4\xFFFF\x1\x22"+
				"\x1\xFFFF\x15\x22\x1\x61\x4\x22\x3C\xFFFF\x1\x22\x8\xFFFF\x17\x22\x1"+
				"\xFFFF\x1F\x22\x1\xFFFF\x286\x22\x1\xFFFF\x1C81\x22\xC\xFFFF\x2\x22"+
				"\x31\xFFFF\x2\x22\x2F\xFFFF\x120\x22\xA70\xFFFF\x3F0\x22\x11\xFFFF\xA7FF"+
				"\x22\x2100\xFFFF\x4D0\x22\x20\xFFFF\x20E\x22",
				"\x1\x22\x1\x23\x1\xFFFF\xA\x22\x1\x9\x6\xFFFF\x1A\x22\x4\xFFFF\x1\x22"+
				"\x1\xFFFF\x3\x22\x1\x62\x16\x22\x3C\xFFFF\x1\x22\x8\xFFFF\x17\x22\x1"+
				"\xFFFF\x1F\x22\x1\xFFFF\x286\x22\x1\xFFFF\x1C81\x22\xC\xFFFF\x2\x22"+
				"\x31\xFFFF\x2\x22\x2F\xFFFF\x120\x22\xA70\xFFFF\x3F0\x22\x11\xFFFF\xA7FF"+
				"\x22\x2100\xFFFF\x4D0\x22\x20\xFFFF\x20E\x22",
				"\x1\x22\x1\x23\x1\xFFFF\xA\x22\x1\x9\x6\xFFFF\x1A\x22\x4\xFFFF\x1\x22"+
				"\x1\xFFFF\x1A\x22\x3C\xFFFF\x1\x22\x8\xFFFF\x17\x22\x1\xFFFF\x1F\x22"+
				"\x1\xFFFF\x286\x22\x1\xFFFF\x1C81\x22\xC\xFFFF\x2\x22\x31\xFFFF\x2\x22"+
				"\x2F\xFFFF\x120\x22\xA70\xFFFF\x3F0\x22\x11\xFFFF\xA7FF\x22\x2100\xFFFF"+
				"\x4D0\x22\x20\xFFFF\x20E\x22",
				"\x1\x22\x1\x23\x1\xFFFF\xA\x22\x1\x9\x6\xFFFF\x1A\x22\x4\xFFFF\x1\x22"+
				"\x1\xFFFF\x4\x22\x1\x64\x15\x22\x3C\xFFFF\x1\x22\x8\xFFFF\x17\x22\x1"+
				"\xFFFF\x1F\x22\x1\xFFFF\x286\x22\x1\xFFFF\x1C81\x22\xC\xFFFF\x2\x22"+
				"\x31\xFFFF\x2\x22\x2F\xFFFF\x120\x22\xA70\xFFFF\x3F0\x22\x11\xFFFF\xA7FF"+
				"\x22\x2100\xFFFF\x4D0\x22\x20\xFFFF\x20E\x22",
				"\x1\x22\x1\x23\x1\xFFFF\xA\x22\x1\x9\x6\xFFFF\x1A\x22\x4\xFFFF\x1\x22"+
				"\x1\xFFFF\x15\x22\x1\x65\x4\x22\x3C\xFFFF\x1\x22\x8\xFFFF\x17\x22\x1"+
				"\xFFFF\x1F\x22\x1\xFFFF\x286\x22\x1\xFFFF\x1C81\x22\xC\xFFFF\x2\x22"+
				"\x31\xFFFF\x2\x22\x2F\xFFFF\x120\x22\xA70\xFFFF\x3F0\x22\x11\xFFFF\xA7FF"+
				"\x22\x2100\xFFFF\x4D0\x22\x20\xFFFF\x20E\x22",
				"\x1\x22\x1\x23\x1\xFFFF\xA\x22\x1\x9\x6\xFFFF\x1A\x22\x4\xFFFF\x1\x22"+
				"\x1\xFFFF\x13\x22\x1\x66\x6\x22\x3C\xFFFF\x1\x22\x8\xFFFF\x17\x22\x1"+
				"\xFFFF\x1F\x22\x1\xFFFF\x286\x22\x1\xFFFF\x1C81\x22\xC\xFFFF\x2\x22"+
				"\x31\xFFFF\x2\x22\x2F\xFFFF\x120\x22\xA70\xFFFF\x3F0\x22\x11\xFFFF\xA7FF"+
				"\x22\x2100\xFFFF\x4D0\x22\x20\xFFFF\x20E\x22",
				"\x1\x22\x1\x23\x1\xFFFF\xA\x22\x1\x9\x6\xFFFF\x1A\x22\x4\xFFFF\x1\x22"+
				"\x1\xFFFF\x1\x67\x19\x22\x3C\xFFFF\x1\x22\x8\xFFFF\x17\x22\x1\xFFFF"+
				"\x1F\x22\x1\xFFFF\x286\x22\x1\xFFFF\x1C81\x22\xC\xFFFF\x2\x22\x31\xFFFF"+
				"\x2\x22\x2F\xFFFF\x120\x22\xA70\xFFFF\x3F0\x22\x11\xFFFF\xA7FF\x22\x2100"+
				"\xFFFF\x4D0\x22\x20\xFFFF\x20E\x22",
				"\x1\x22\x1\x23\x1\xFFFF\xA\x22\x1\x9\x6\xFFFF\x1A\x22\x4\xFFFF\x1\x68"+
				"\x1\xFFFF\x1A\x22\x3C\xFFFF\x1\x22\x8\xFFFF\x17\x22\x1\xFFFF\x1F\x22"+
				"\x1\xFFFF\x286\x22\x1\xFFFF\x1C81\x22\xC\xFFFF\x2\x22\x31\xFFFF\x2\x22"+
				"\x2F\xFFFF\x120\x22\xA70\xFFFF\x3F0\x22\x11\xFFFF\xA7FF\x22\x2100\xFFFF"+
				"\x4D0\x22\x20\xFFFF\x20E\x22",
				"",
				"\x1\x22\x1\x23\x1\xFFFF\xA\x22\x1\x9\x6\xFFFF\x1A\x22\x4\xFFFF\x1\x22"+
				"\x1\xFFFF\x12\x22\x1\x69\x7\x22\x3C\xFFFF\x1\x22\x8\xFFFF\x17\x22\x1"+
				"\xFFFF\x1F\x22\x1\xFFFF\x286\x22\x1\xFFFF\x1C81\x22\xC\xFFFF\x2\x22"+
				"\x31\xFFFF\x2\x22\x2F\xFFFF\x120\x22\xA70\xFFFF\x3F0\x22\x11\xFFFF\xA7FF"+
				"\x22\x2100\xFFFF\x4D0\x22\x20\xFFFF\x20E\x22",
				"\x1\x22\x1\x23\x1\xFFFF\xA\x22\x1\x9\x6\xFFFF\x1A\x22\x4\xFFFF\x1\x22"+
				"\x1\xFFFF\x1\x6A\x19\x22\x3C\xFFFF\x1\x22\x8\xFFFF\x17\x22\x1\xFFFF"+
				"\x1F\x22\x1\xFFFF\x286\x22\x1\xFFFF\x1C81\x22\xC\xFFFF\x2\x22\x31\xFFFF"+
				"\x2\x22\x2F\xFFFF\x120\x22\xA70\xFFFF\x3F0\x22\x11\xFFFF\xA7FF\x22\x2100"+
				"\xFFFF\x4D0\x22\x20\xFFFF\x20E\x22",
				"\x1\x22\x1\x23\x1\xFFFF\xA\x22\x1\x9\x6\xFFFF\x1A\x22\x4\xFFFF\x1\x22"+
				"\x1\xFFFF\x4\x22\x1\x6B\x15\x22\x3C\xFFFF\x1\x22\x8\xFFFF\x17\x22\x1"+
				"\xFFFF\x1F\x22\x1\xFFFF\x286\x22\x1\xFFFF\x1C81\x22\xC\xFFFF\x2\x22"+
				"\x31\xFFFF\x2\x22\x2F\xFFFF\x120\x22\xA70\xFFFF\x3F0\x22\x11\xFFFF\xA7FF"+
				"\x22\x2100\xFFFF\x4D0\x22\x20\xFFFF\x20E\x22",
				"\x1\x22\x1\x23\x1\xFFFF\xA\x22\x1\x9\x6\xFFFF\x1A\x22\x4\xFFFF\x1\x22"+
				"\x1\xFFFF\xB\x22\x1\x6C\xE\x22\x3C\xFFFF\x1\x22\x8\xFFFF\x17\x22\x1"+
				"\xFFFF\x1F\x22\x1\xFFFF\x286\x22\x1\xFFFF\x1C81\x22\xC\xFFFF\x2\x22"+
				"\x31\xFFFF\x2\x22\x2F\xFFFF\x120\x22\xA70\xFFFF\x3F0\x22\x11\xFFFF\xA7FF"+
				"\x22\x2100\xFFFF\x4D0\x22\x20\xFFFF\x20E\x22",
				"\x1\x22\x1\x23\x1\xFFFF\xA\x22\x1\x9\x6\xFFFF\x1A\x22\x4\xFFFF\x1\x22"+
				"\x1\xFFFF\x13\x22\x1\x6D\x6\x22\x3C\xFFFF\x1\x22\x8\xFFFF\x17\x22\x1"+
				"\xFFFF\x1F\x22\x1\xFFFF\x286\x22\x1\xFFFF\x1C81\x22\xC\xFFFF\x2\x22"+
				"\x31\xFFFF\x2\x22\x2F\xFFFF\x120\x22\xA70\xFFFF\x3F0\x22\x11\xFFFF\xA7FF"+
				"\x22\x2100\xFFFF\x4D0\x22\x20\xFFFF\x20E\x22",
				"\x1\x22\x1\x23\x1\xFFFF\xA\x22\x1\x9\x6\xFFFF\x1A\x22\x4\xFFFF\x1\x22"+
				"\x1\xFFFF\x1A\x22\x3C\xFFFF\x1\x22\x8\xFFFF\x17\x22\x1\xFFFF\x1F\x22"+
				"\x1\xFFFF\x286\x22\x1\xFFFF\x1C81\x22\xC\xFFFF\x2\x22\x31\xFFFF\x2\x22"+
				"\x2F\xFFFF\x120\x22\xA70\xFFFF\x3F0\x22\x11\xFFFF\xA7FF\x22\x2100\xFFFF"+
				"\x4D0\x22\x20\xFFFF\x20E\x22",
				"\x1\x22\x1\x23\x1\xFFFF\xA\x22\x1\x9\x6\xFFFF\x1A\x22\x4\xFFFF\x1\x22"+
				"\x1\xFFFF\xB\x22\x1\x6F\xE\x22\x3C\xFFFF\x1\x22\x8\xFFFF\x17\x22\x1"+
				"\xFFFF\x1F\x22\x1\xFFFF\x286\x22\x1\xFFFF\x1C81\x22\xC\xFFFF\x2\x22"+
				"\x31\xFFFF\x2\x22\x2F\xFFFF\x120\x22\xA70\xFFFF\x3F0\x22\x11\xFFFF\xA7FF"+
				"\x22\x2100\xFFFF\x4D0\x22\x20\xFFFF\x20E\x22",
				"\x1\x22\x1\x23\x1\xFFFF\xA\x22\x1\x9\x6\xFFFF\x1A\x22\x4\xFFFF\x1\x22"+
				"\x1\xFFFF\x11\x22\x1\x70\x8\x22\x3C\xFFFF\x1\x22\x8\xFFFF\x17\x22\x1"+
				"\xFFFF\x1F\x22\x1\xFFFF\x286\x22\x1\xFFFF\x1C81\x22\xC\xFFFF\x2\x22"+
				"\x31\xFFFF\x2\x22\x2F\xFFFF\x120\x22\xA70\xFFFF\x3F0\x22\x11\xFFFF\xA7FF"+
				"\x22\x2100\xFFFF\x4D0\x22\x20\xFFFF\x20E\x22",
				"\x1\x22\x1\x23\x1\xFFFF\xA\x22\x1\x9\x6\xFFFF\x1A\x22\x4\xFFFF\x1\x22"+
				"\x1\xFFFF\x14\x22\x1\x71\x5\x22\x3C\xFFFF\x1\x22\x8\xFFFF\x17\x22\x1"+
				"\xFFFF\x1F\x22\x1\xFFFF\x286\x22\x1\xFFFF\x1C81\x22\xC\xFFFF\x2\x22"+
				"\x31\xFFFF\x2\x22\x2F\xFFFF\x120\x22\xA70\xFFFF\x3F0\x22\x11\xFFFF\xA7FF"+
				"\x22\x2100\xFFFF\x4D0\x22\x20\xFFFF\x20E\x22",
				"\x1\x22\x1\x23\x1\xFFFF\xA\x22\x1\x9\x6\xFFFF\x1A\x22\x4\xFFFF\x1\x22"+
				"\x1\xFFFF\x4\x22\x1\x72\x15\x22\x3C\xFFFF\x1\x22\x8\xFFFF\x17\x22\x1"+
				"\xFFFF\x1F\x22\x1\xFFFF\x286\x22\x1\xFFFF\x1C81\x22\xC\xFFFF\x2\x22"+
				"\x31\xFFFF\x2\x22\x2F\xFFFF\x120\x22\xA70\xFFFF\x3F0\x22\x11\xFFFF\xA7FF"+
				"\x22\x2100\xFFFF\x4D0\x22\x20\xFFFF\x20E\x22",
				"",
				"\x1\x22\x1\x23\x1\xFFFF\xA\x22\x1\x9\x6\xFFFF\x1A\x22\x4\xFFFF\x1\x22"+
				"\x1\xFFFF\x14\x22\x1\x73\x5\x22\x3C\xFFFF\x1\x22\x8\xFFFF\x17\x22\x1"+
				"\xFFFF\x1F\x22\x1\xFFFF\x286\x22\x1\xFFFF\x1C81\x22\xC\xFFFF\x2\x22"+
				"\x31\xFFFF\x2\x22\x2F\xFFFF\x120\x22\xA70\xFFFF\x3F0\x22\x11\xFFFF\xA7FF"+
				"\x22\x2100\xFFFF\x4D0\x22\x20\xFFFF\x20E\x22",
				"\x1\x22\x1\x23\x1\xFFFF\xA\x22\x1\x9\x6\xFFFF\x1A\x22\x4\xFFFF\x1\x22"+
				"\x1\xFFFF\xC\x22\x1\x74\xD\x22\x3C\xFFFF\x1\x22\x8\xFFFF\x17\x22\x1"+
				"\xFFFF\x1F\x22\x1\xFFFF\x286\x22\x1\xFFFF\x1C81\x22\xC\xFFFF\x2\x22"+
				"\x31\xFFFF\x2\x22\x2F\xFFFF\x120\x22\xA70\xFFFF\x3F0\x22\x11\xFFFF\xA7FF"+
				"\x22\x2100\xFFFF\x4D0\x22\x20\xFFFF\x20E\x22",
				"\x1\x22\x1\x23\x1\xFFFF\xA\x22\x1\x9\x6\xFFFF\x1A\x22\x4\xFFFF\x1\x22"+
				"\x1\xFFFF\x4\x22\x1\x75\x15\x22\x3C\xFFFF\x1\x22\x8\xFFFF\x17\x22\x1"+
				"\xFFFF\x1F\x22\x1\xFFFF\x286\x22\x1\xFFFF\x1C81\x22\xC\xFFFF\x2\x22"+
				"\x31\xFFFF\x2\x22\x2F\xFFFF\x120\x22\xA70\xFFFF\x3F0\x22\x11\xFFFF\xA7FF"+
				"\x22\x2100\xFFFF\x4D0\x22\x20\xFFFF\x20E\x22",
				"\x1\x22\x1\x23\x1\xFFFF\xA\x22\x1\x9\x6\xFFFF\x1A\x22\x4\xFFFF\x1\x22"+
				"\x1\xFFFF\x11\x22\x1\x76\x8\x22\x3C\xFFFF\x1\x22\x8\xFFFF\x17\x22\x1"+
				"\xFFFF\x1F\x22\x1\xFFFF\x286\x22\x1\xFFFF\x1C81\x22\xC\xFFFF\x2\x22"+
				"\x31\xFFFF\x2\x22\x2F\xFFFF\x120\x22\xA70\xFFFF\x3F0\x22\x11\xFFFF\xA7FF"+
				"\x22\x2100\xFFFF\x4D0\x22\x20\xFFFF\x20E\x22",
				"\x1\x22\x1\x23\x1\xFFFF\xA\x22\x1\x9\x6\xFFFF\x1A\x22\x4\xFFFF\x1\x22"+
				"\x1\xFFFF\x4\x22\x1\x77\x15\x22\x3C\xFFFF\x1\x22\x8\xFFFF\x17\x22\x1"+
				"\xFFFF\x1F\x22\x1\xFFFF\x286\x22\x1\xFFFF\x1C81\x22\xC\xFFFF\x2\x22"+
				"\x31\xFFFF\x2\x22\x2F\xFFFF\x120\x22\xA70\xFFFF\x3F0\x22\x11\xFFFF\xA7FF"+
				"\x22\x2100\xFFFF\x4D0\x22\x20\xFFFF\x20E\x22",
				"\x1\x22\x1\x23\x1\xFFFF\xA\x22\x1\x9\x6\xFFFF\x1A\x22\x4\xFFFF\x1\x22"+
				"\x1\xFFFF\x1A\x22\x3C\xFFFF\x1\x22\x8\xFFFF\x17\x22\x1\xFFFF\x1F\x22"+
				"\x1\xFFFF\x286\x22\x1\xFFFF\x1C81\x22\xC\xFFFF\x2\x22\x31\xFFFF\x2\x22"+
				"\x2F\xFFFF\x120\x22\xA70\xFFFF\x3F0\x22\x11\xFFFF\xA7FF\x22\x2100\xFFFF"+
				"\x4D0\x22\x20\xFFFF\x20E\x22",
				"\x1\x22\x1\x23\x1\xFFFF\xA\x22\x1\x9\x6\xFFFF\x1A\x22\x4\xFFFF\x1\x22"+
				"\x1\xFFFF\x1A\x22\x3C\xFFFF\x1\x22\x8\xFFFF\x17\x22\x1\xFFFF\x1F\x22"+
				"\x1\xFFFF\x286\x22\x1\xFFFF\x1C81\x22\xC\xFFFF\x2\x22\x31\xFFFF\x2\x22"+
				"\x2F\xFFFF\x120\x22\xA70\xFFFF\x3F0\x22\x11\xFFFF\xA7FF\x22\x2100\xFFFF"+
				"\x4D0\x22\x20\xFFFF\x20E\x22",
				"\x1\x22\x1\x23\x1\xFFFF\xA\x22\x1\x9\x6\xFFFF\x1A\x22\x4\xFFFF\x1\x22"+
				"\x1\xFFFF\xC\x22\x1\x7A\xD\x22\x3C\xFFFF\x1\x22\x8\xFFFF\x17\x22\x1"+
				"\xFFFF\x1F\x22\x1\xFFFF\x286\x22\x1\xFFFF\x1C81\x22\xC\xFFFF\x2\x22"+
				"\x31\xFFFF\x2\x22\x2F\xFFFF\x120\x22\xA70\xFFFF\x3F0\x22\x11\xFFFF\xA7FF"+
				"\x22\x2100\xFFFF\x4D0\x22\x20\xFFFF\x20E\x22",
				"\x1\x22\x1\x23\x1\xFFFF\xA\x22\x1\x9\x6\xFFFF\x1A\x22\x4\xFFFF\x1\x22"+
				"\x1\xFFFF\x1A\x22\x3C\xFFFF\x1\x22\x8\xFFFF\x17\x22\x1\xFFFF\x1F\x22"+
				"\x1\xFFFF\x286\x22\x1\xFFFF\x1C81\x22\xC\xFFFF\x2\x22\x31\xFFFF\x2\x22"+
				"\x2F\xFFFF\x120\x22\xA70\xFFFF\x3F0\x22\x11\xFFFF\xA7FF\x22\x2100\xFFFF"+
				"\x4D0\x22\x20\xFFFF\x20E\x22",
				"",
				"",
				"\x1\x22\x1\x23\x1\xFFFF\xA\x22\x1\x9\x6\xFFFF\x1A\x22\x4\xFFFF\x1\x22"+
				"\x1\xFFFF\x1A\x22\x3C\xFFFF\x1\x22\x8\xFFFF\x17\x22\x1\xFFFF\x1F\x22"+
				"\x1\xFFFF\x286\x22\x1\xFFFF\x1C81\x22\xC\xFFFF\x2\x22\x31\xFFFF\x2\x22"+
				"\x2F\xFFFF\x120\x22\xA70\xFFFF\x3F0\x22\x11\xFFFF\xA7FF\x22\x2100\xFFFF"+
				"\x4D0\x22\x20\xFFFF\x20E\x22",
				"",
				""
			};

		private static readonly short[] DFA21_eot = DFA.UnpackEncodedString(DFA21_eotS);
		private static readonly short[] DFA21_eof = DFA.UnpackEncodedString(DFA21_eofS);
		private static readonly char[] DFA21_min = DFA.UnpackEncodedStringToUnsignedChars(DFA21_minS);
		private static readonly char[] DFA21_max = DFA.UnpackEncodedStringToUnsignedChars(DFA21_maxS);
		private static readonly short[] DFA21_accept = DFA.UnpackEncodedString(DFA21_acceptS);
		private static readonly short[] DFA21_special = DFA.UnpackEncodedString(DFA21_specialS);
		private static readonly short[][] DFA21_transition;

		static DFA21()
		{
			int numStates = DFA21_transitionS.Length;
			DFA21_transition = new short[numStates][];
			for ( int i=0; i < numStates; i++ )
			{
				DFA21_transition[i] = DFA.UnpackEncodedString(DFA21_transitionS[i]);
			}
		}

		public DFA21( BaseRecognizer recognizer )
		{
			this.recognizer = recognizer;
			this.decisionNumber = 21;
			this.eot = DFA21_eot;
			this.eof = DFA21_eof;
			this.min = DFA21_min;
			this.max = DFA21_max;
			this.accept = DFA21_accept;
			this.special = DFA21_special;
			this.transition = DFA21_transition;
		}

		public override string Description { get { return "1:1: Tokens : ( COMPOUND_TERM | IN_TERM | IN_VALUES | LANGED_VALUE | SIMPLE_TERM | TERMS | TYPED_VALUE | T__50 | T__51 | T__52 | WS | PNAME_NS | PNAME_LN | IRI_REF | LANGTAG | BOOLEAN | DECIMAL | STRING_LITERAL | REFERENCE | LESS_EQUAL | GREATER_EQUAL | NOT_EQUAL | AND | OR | OPEN_BRACE | CLOSE_BRACE | OPEN_CURLY_BRACE | CLOSE_CURLY_BRACE | OPEN_SQUARE_BRACE | CLOSE_SQUARE_BRACE | SEMICOLON | DOT | PLUS | MINUS | ASTERISK | COMMA | NOT | EQUAL | LESS | GREATER );"; } }

		public override void Error(NoViableAltException nvae)
		{
			DebugRecognitionException(nvae);
		}
	}

 
	#endregion

}
